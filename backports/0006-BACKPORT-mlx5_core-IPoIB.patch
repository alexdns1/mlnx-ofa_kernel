From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: mlx5_core IPoIB

Add only mlx5_core IPoIB backports to this patch.
That is:
- drivers/net/ethernet/mellanox/mlx5/core/ipoib*

Change-Id: Ibb98ca08c02d93e0823477924152cf320381d3cc
Signed-off-by: Alaa Hleihel <alaa@mellanox.com>
---
 drivers/net/ethernet/mellanox/mlx5/core/ipoib.c    | 149 ++++++++++++++++++++-
 .../net/ethernet/mellanox/mlx5/core/ipoib_vlan.c   |  15 ++-
 2 files changed, 156 insertions(+), 8 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib.c
@@ -44,8 +44,15 @@ static int mlx5i_open(struct net_device
 static int mlx5i_close(struct net_device *netdev);
 static int mlx5i_change_mtu(struct net_device *netdev, int new_mtu);
 static int mlx5i_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd);
-static void mlx5i_get_stats(struct net_device *dev,
-			    struct rtnl_link_stats64 *stats);
+
+#ifdef HAVE_NDO_GET_STATS64_RET_VOID
+void mlx5i_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats);
+#elif defined(HAVE_NDO_GET_STATS64)
+struct rtnl_link_stats64 * mlx5i_get_stats(struct net_device *dev,
+                                          struct rtnl_link_stats64 *stats);
+#else
+struct net_device_stats * mlx5i_get_stats(struct net_device *dev);
+#endif
 
 static const struct net_device_ops mlx5i_netdev_ops = {
 	.ndo_open                = mlx5i_open,
@@ -54,7 +61,11 @@ static const struct net_device_ops mlx5i
 	.ndo_uninit              = mlx5i_dev_cleanup,
 	.ndo_change_mtu          = mlx5i_change_mtu,
 	.ndo_do_ioctl		 = mlx5i_ioctl,
+#if defined(HAVE_NDO_GET_STATS64) || defined(HAVE_NDO_GET_STATS64_RET_VOID)
 	.ndo_get_stats64         = mlx5i_get_stats,
+#else
+	.ndo_get_stats           = mlx5i_get_stats,
+#endif
 };
 
 /* IPoIB ethtool support */
@@ -107,6 +118,7 @@ static void mlx5i_get_ringparam(struct n
 	mlx5e_ethtool_get_ringparam(priv, param);
 }
 
+#ifdef HAVE_GET_SET_CHANNELS
 static int mlx5i_set_channels(struct net_device *dev,
 			      struct ethtool_channels *ch)
 {
@@ -122,6 +134,7 @@ static void mlx5i_get_channels(struct ne
 
 	mlx5e_ethtool_get_channels(priv, ch);
 }
+#endif
 
 static int mlx5i_set_coalesce(struct net_device *netdev,
 			      struct ethtool_coalesce *coal)
@@ -139,6 +152,7 @@ static int mlx5i_get_coalesce(struct net
 	return mlx5e_ethtool_get_coalesce(priv, coal);
 }
 
+#ifdef HAVE_GET_TS_INFO
 static int mlx5i_get_ts_info(struct net_device *netdev,
 			     struct ethtool_ts_info *info)
 {
@@ -146,6 +160,7 @@ static int mlx5i_get_ts_info(struct net_
 
 	return mlx5e_ethtool_get_ts_info(priv, info);
 }
+#endif
 
 enum ib_ptys_width {
 	IB_PTYS_WIDTH_1X	= 1 << 0,
@@ -234,6 +249,7 @@ static int mlx5i_get_settings(struct net
 	return 0;
 }
 
+#ifdef HAVE_GET_SET_LINK_KSETTINGS
 static int mlx5i_get_link_ksettings(struct net_device *netdev,
 				    struct ethtool_link_ksettings *link_ksettings)
 {
@@ -261,6 +277,46 @@ static int mlx5i_get_link_ksettings(stru
 
 	return 0;
 }
+#endif
+
+#ifndef HAVE_NETDEV_HW_FEATURES
+#if defined(HAVE_GET_SET_FLAGS) && defined(CONFIG_COMPAT_LRO_ENABLED_IPOIB)
+int mlx5i_set_flags(struct net_device *dev, u32 data)
+{
+	int hw_support_lro = 0;
+
+#ifdef HAVE_NETDEV_HW_FEATURES
+	hw_support_lro = dev->hw_features & NETIF_F_RXCSUM;
+#else
+	hw_support_lro = dev->features & NETIF_F_RXCSUM;
+#endif
+
+	if ((data & ETH_FLAG_LRO) && hw_support_lro)
+		dev->features |= NETIF_F_LRO;
+	else
+		dev->features &= ~NETIF_F_LRO;
+	return 0;
+}
+#endif
+
+#ifdef HAVE_GET_SET_TSO
+int mlx5i_set_tso(struct net_device *dev, u32 data)
+{
+	if (data)
+		dev->features |= (NETIF_F_TSO | NETIF_F_TSO6);
+	else
+		dev->features &= ~(NETIF_F_TSO | NETIF_F_TSO6);
+
+	return 0;
+}
+#endif
+#ifdef HAVE_GET_SET_RX_CSUM
+static u32 mlx5i_get_rx_csum(struct net_device *dev)
+{
+	return dev->features & NETIF_F_RXCSUM;
+}
+#endif
+#endif
 
 const struct ethtool_ops mlx5i_ethtool_ops = {
 	.get_drvinfo        = mlx5i_get_drvinfo,
@@ -269,14 +325,39 @@ const struct ethtool_ops mlx5i_ethtool_o
 	.get_ethtool_stats  = mlx5i_get_ethtool_stats,
 	.get_ringparam      = mlx5i_get_ringparam,
 	.set_ringparam      = mlx5i_set_ringparam,
+#ifdef HAVE_GET_SET_CHANNELS
 	.get_channels       = mlx5i_get_channels,
 	.set_channels       = mlx5i_set_channels,
+#endif
 	.get_coalesce       = mlx5i_get_coalesce,
 	.set_coalesce       = mlx5i_set_coalesce,
+#ifdef HAVE_GET_TS_INFO
 	.get_ts_info        = mlx5i_get_ts_info,
+#endif
 	.get_settings       = mlx5i_get_settings,
 	.get_link           = ethtool_op_get_link,
+#ifdef HAVE_GET_SET_LINK_KSETTINGS
 	.get_link_ksettings = mlx5i_get_link_ksettings,
+#endif
+/* IPoIB current code supports HW_FEATURES and doesn't
+ * support EXTENDED_HW_FEATURES. If support for EXTENDED_HW_FEATURES
+ * is added then this code and the set function should be masked
+ *  with LEGACY_ETHTOOL_OPS.
+ */
+#ifndef HAVE_NETDEV_HW_FEATURES
+#ifdef HAVE_GET_SET_FLAGS
+#if defined (CONFIG_COMPAT_LRO_ENABLED_IPOIB)
+	.set_flags          = mlx5i_set_flags,
+#endif
+	.get_flags          = ethtool_op_get_flags,
+#endif
+#ifdef HAVE_GET_SET_TSO
+       .set_tso             = mlx5i_set_tso,
+#endif
+#ifdef HAVE_GET_SET_RX_CSUM
+	.get_rx_csum        = mlx5i_get_rx_csum,
+#endif
+#endif
 };
 
 static void mlx5i_build_nic_params(struct mlx5_core_dev *mdev,
@@ -290,8 +371,32 @@ static void mlx5i_build_nic_params(struc
 		MLX5E_PARAMS_MINIMUM_LOG_RQ_SIZE :
 		MLX5I_PARAMS_DEFAULT_LOG_RQ_SIZE;
 
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	params->lro_en = true;
+	params->pflags &= ~MLX5E_PFLAG_HWLRO;
+#else
 	params->lro_en = false;
+#endif
+}
+
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+void set_lro_features_bit(struct mlx5e_priv *priv)
+{
+	u64 hw_support_lro = 0;
+#ifdef HAVE_NETDEV_HW_FEATURES
+	hw_support_lro = priv->netdev->hw_features & NETIF_F_RXCSUM;
+#else
+	hw_support_lro = priv->netdev->features & NETIF_F_RXCSUM;
+#endif
+	if (hw_support_lro) {
+		priv->netdev->features |= NETIF_F_LRO;
+#ifdef HAVE_NETDEV_HW_FEATURES
+		priv->netdev->hw_features |= NETIF_F_LRO;
+		priv->netdev->wanted_features |= NETIF_F_LRO;
+#endif
+	}
 }
+#endif
 
 /* IPoIB mlx5 netdev profile */
 
@@ -316,6 +421,7 @@ void mlx5i_init(struct mlx5_core_dev *md
 	mlx5i_build_nic_params(mdev, &priv->channels.params);
 
 	/* netdev init */
+#ifdef HAVE_NETDEV_HW_FEATURES
 	netdev->hw_features    |= NETIF_F_SG;
 	netdev->hw_features    |= NETIF_F_IP_CSUM;
 	netdev->hw_features    |= NETIF_F_IPV6_CSUM;
@@ -323,17 +429,41 @@ void mlx5i_init(struct mlx5_core_dev *md
 	netdev->hw_features    |= NETIF_F_TSO;
 	netdev->hw_features    |= NETIF_F_TSO6;
 	netdev->hw_features    |= NETIF_F_RXCSUM;
+#ifdef HAVE_NETIF_F_RXHASH
 	netdev->hw_features    |= NETIF_F_RXHASH;
-
+#endif
+#else
+	netdev->features    |= NETIF_F_SG;
+	netdev->features    |= NETIF_F_IP_CSUM;
+	netdev->features    |= NETIF_F_IPV6_CSUM;
+	netdev->features    |= NETIF_F_GRO;
+	netdev->features    |= NETIF_F_TSO;
+	netdev->features    |= NETIF_F_TSO6;
+	netdev->features    |= NETIF_F_RXCSUM;
+#ifdef HAVE_NETIF_F_RXHASH
+	netdev->features    |= NETIF_F_RXHASH;
+#endif
+#endif
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	set_lro_features_bit(priv);
+#endif
 	netdev->netdev_ops  = &mlx5i_netdev_ops;
 	netdev->ethtool_ops = &mlx5i_ethtool_ops;
 }
-
-static void
-mlx5i_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
+#ifdef HAVE_NDO_GET_STATS64_RET_VOID
+void mlx5i_get_stats(struct net_device *dev, struct rtnl_link_stats64 *stats)
+#elif defined(HAVE_NDO_GET_STATS64)
+struct rtnl_link_stats64 * mlx5i_get_stats(struct net_device *dev,
+					   struct rtnl_link_stats64 *stats)
+#else
+struct net_device_stats * mlx5i_get_stats(struct net_device *dev)
+#endif
 {
 	struct mlx5e_priv *priv = mlx5i_epriv(dev);
 	struct mlx5e_sw_stats *sstats = &priv->stats.sw;
+#if !defined(HAVE_NDO_GET_STATS64) && !defined(HAVE_NDO_GET_STATS64_RET_VOID)
+	struct net_device_stats *stats = &priv->netdev_stats;
+#endif
 
 	stats->rx_packets = sstats->rx_packets;
 	stats->rx_bytes   = sstats->rx_bytes;
@@ -341,6 +471,9 @@ mlx5i_get_stats(struct net_device *dev,
 	stats->tx_bytes   = sstats->tx_bytes;
 	stats->tx_dropped = sstats->tx_queue_dropped;
 	stats->rx_dropped = priv->stats.qcnt.rx_out_of_buffer;
+#ifndef HAVE_NDO_GET_STATS64_RET_VOID
+	return stats;
+#endif
 }
 
 /* Called directly before IPoIB netdevice is destroyed to cleanup SW structs */
@@ -493,7 +626,11 @@ static int mlx5i_create_flow_steering(st
 	if (err) {
 		netdev_err(priv->netdev, "Failed to create arfs tables, err=%d\n",
 			   err);
+#ifdef HAVE_NETDEV_HW_FEATURES
+#ifdef CONFIG_RFS_ACCEL
 		priv->netdev->hw_features &= ~NETIF_F_NTUPLE;
+#endif
+#endif
 	}
 
 	err = mlx5e_create_ttc_table(priv, ipriv->qp.qpn);
--- a/drivers/net/ethernet/mellanox/mlx5/core/ipoib_vlan.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/ipoib_vlan.c
@@ -88,8 +88,9 @@ static struct qpn_to_netdev *mlx5i_find_
 {
 	struct qpn_to_netdev *node;
 	struct hlist_head *h = &buckets[hash_32(qpn, MLX5I_MAX_LOG_PKEY_SUP)];
+	COMPAT_HL_NODE
 
-	hlist_for_each_entry(node, h, hlist) {
+	compat_hlist_for_each_entry(node, h, hlist) {
 		if (node->underlay_qpn == qpn)
 			return node;
 	}
@@ -170,7 +171,11 @@ static int mlx5i_child_dev_init(struct n
 	ipriv = priv->ppriv;
 
 	/* Get QPN to netdevice hash table from parent */
+#ifdef HAVE_NDO_GET_IFLINK
 	parent_ifindex = dev->netdev_ops->ndo_get_iflink(dev);
+#else
+	parent_ifindex = dev->iflink;	
+#endif
 	parent_dev = dev_get_by_index(dev_net(dev), parent_ifindex);
 	if (!parent_dev) {
 		mlx5_core_warn(priv->mdev, "failed to get parent device\n");
@@ -275,7 +280,13 @@ static void mlx5i_child_init(struct mlx5
 	struct mlx5e_priv *priv  = mlx5i_epriv(netdev);
 
 	mlx5i_init(mdev, netdev, profile, ppriv);
-
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+       netdev->features &= ~NETIF_F_LRO;
+#ifdef HAVE_NETDEV_HW_FEATURES
+       priv->netdev->hw_features &= ~NETIF_F_LRO;
+       priv->netdev->wanted_features &= ~NETIF_F_LRO;
+#endif
+#endif
 	/* Overrun parent ndo */
 	netdev->netdev_ops = &mlx5i_child_netdev_ops;
 
