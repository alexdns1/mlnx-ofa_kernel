From: Feras Daoud <ferasda@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en_tc.c

Change-Id: I72f6a6b96594b6d1ef97d37344f631752137be0c
---
 drivers/net/ethernet/mellanox/mlx5/core/en_tc.c | 1023 ++++++++++++++++++++---
 1 file changed, 917 insertions(+), 106 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_tc.c
@@ -11,14 +11,14 @@
  *     without modification, are permitted provided that the following
  *     conditions are met:
  *
- *      - Redistributions of source code must retain the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer.
+ *	- Redistributions of source code must retain the above
+ *	  copyright notice, this list of conditions and the following
+ *	  disclaimer.
  *
- *      - Redistributions in binary form must reproduce the above
- *        copyright notice, this list of conditions and the following
- *        disclaimer in the documentation and/or other materials
- *        provided with the distribution.
+ *	- Redistributions in binary form must reproduce the above
+ *	  copyright notice, this list of conditions and the following
+ *	  disclaimer in the documentation and/or other materials
+ *	  provided with the distribution.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
@@ -30,34 +30,132 @@
  * SOFTWARE.
  */
 
-#include <net/flow_dissector.h>
 #include <net/sch_generic.h>
 #include <net/pkt_cls.h>
+#ifdef HAVE_TC_GACT_H
 #include <net/tc_act/tc_gact.h>
+#endif
+#ifdef HAVE_IS_TCF_SKBEDIT_MARK
 #include <net/tc_act/tc_skbedit.h>
+#endif
 #include <linux/mlx5/fs.h>
 #include <linux/mlx5/device.h>
+#include <linux/mlx5/devcom.h>
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 #include <linux/rhashtable.h>
 #include <linux/refcount.h>
+#endif
+#ifdef CONFIG_NET_SWITCHDEV
 #include <net/switchdev.h>
+#endif
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 #include <net/tc_act/tc_mirred.h>
+#endif
+#ifdef HAVE_IS_TCF_VLAN
 #include <net/tc_act/tc_vlan.h>
+#endif
+#ifdef HAVE_TCF_TUNNEL_INFO
 #include <net/tc_act/tc_tunnel_key.h>
+#endif
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
+#include <linux/tc_act/tc_pedit.h>
 #include <net/tc_act/tc_pedit.h>
+#endif
+#ifdef HAVE_TCA_CSUM_UPDATE_FLAG_IPV4HDR
 #include <net/tc_act/tc_csum.h>
+#endif
+#ifdef HAVE_MINIFLOW
 #include <net/tc_act/tc_ct.h>
+#endif
+#ifdef HAVE_TCF_TUNNEL_INFO
 #include <net/vxlan.h>
+#endif
 #include <net/arp.h>
+#ifdef HAVE_TC_FLOWER_OFFLOAD
+#include <net/flow_dissector.h>
+#endif
 #include "en.h"
 #include "en_rep.h"
 #include "en_tc.h"
 #include "eswitch.h"
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 #include "miniflow.h"
+#endif
 #include "lib/vxlan.h"
 #include "fs_core.h"
 #include "en/port.h"
-#include <linux/mlx5/devcom.h>
+#include <linux/mlx5/vport.h>
+
+#if defined(HAVE_TC_CLS_FLOWER_OFFLOAD_COMMON) && \
+    defined(HAVE_IS_TCF_GACT_GOTO_CHAIN) && \
+    defined(HAVE_FLOWER_MULTI_MASK)
+#define PRIO_CHAIN_SUPPORT 1
+#endif
+
+#if defined(HAVE_TC_FLOWER_OFFLOAD) && \
+    (!defined(HAVE_SWITCHDEV_PORT_SAME_PARENT_ID) || \
+    !defined(CONFIG_NET_SWITCHDEV))
+#include <net/bonding.h>
+static bool switchdev_port_same_parent_id(struct net_device *a,
+					  struct net_device *b)
+{
+	struct mlx5e_priv *priv_a, *priv_b;
+	struct mlx5_eswitch *peer_esw;
+	struct mlx5_devcom *devcom;
+	struct net_device *ndev;
+	struct bonding *bond;
+	bool ret = true;
+
+	if (netif_is_bond_master(b)) {
+		bond = netdev_priv(b);
+		if (!bond_has_slaves(bond))
+			return false;
+
+		rcu_read_lock();
+#ifdef for_each_netdev_in_bond_rcu
+		for_each_netdev_in_bond_rcu(b, ndev) {
+#else
+		for_each_netdev_in_bond(b, ndev) {
+#endif
+			ret &= switchdev_port_same_parent_id(a, ndev);
+			if (!ret)
+				break;
+		}
+		rcu_read_unlock();
+		return ret;
+	}
 
+	if (!(a->features & NETIF_F_HW_TC) || !(b->features & NETIF_F_HW_TC))
+		return false;
+
+	priv_a = netdev_priv(a);
+	priv_b = netdev_priv(b);
+
+	if (!priv_a->mdev->priv.eswitch || !priv_b->mdev->priv.eswitch)
+		return false;
+
+	if (priv_a->mdev->priv.eswitch->mode != SRIOV_OFFLOADS ||
+	    priv_b->mdev->priv.eswitch->mode != SRIOV_OFFLOADS)
+		return false;
+
+	if (priv_a->mdev == priv_b->mdev)
+		return true;
+
+	if (!mlx5_lag_is_sriov(priv_a->mdev))
+		return false;
+
+	devcom = priv_a->mdev->priv.devcom;
+	peer_esw = mlx5_devcom_get_peer_data(devcom, MLX5_DEVCOM_ESW_OFFLOADS);
+	if (!peer_esw)
+		return false;
+
+	ret = (peer_esw->dev == priv_b->mdev);
+	mlx5_devcom_release_peer_data(devcom, MLX5_DEVCOM_ESW_OFFLOADS);
+	return ret;
+}
+#endif
+
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 static char out_ifname[IFNAMSIZ] = "";
 module_param_string(out_ifname, out_ifname, sizeof(out_ifname),
 		    S_IRUGO | S_IWUSR);
@@ -95,36 +193,22 @@ struct mlx5e_hairpin_entry {
 	struct rcu_head rcu;
 };
 
-struct mod_hdr_key {
-	int num_actions;
-	void *actions;
-};
-
-struct mlx5e_mod_hdr_entry {
-	/* a node of a hash table which keeps all the mod_hdr entries */
-	struct hlist_node mod_hdr_hlist;
-
-	/* protects flows list */
-	spinlock_t flows_lock;
-	/* flows sharing the same mod_hdr entry */
-	struct list_head flows;
-
-	struct mod_hdr_key key;
-
-	u32 mod_hdr_id;
-
-	refcount_t refcnt;
-	struct rcu_head rcu;
-};
-
 static void mlx5e_tc_del_flow(struct mlx5e_priv *priv,
 			      struct mlx5e_tc_flow *flow);
 
 static struct mlx5e_tc_flow *mlx5e_flow_get(struct mlx5e_tc_flow *flow)
 {
 	if (!flow ||
+#ifdef HAVE_ATOMIC_READ_ACQUIRE
 	    !(atomic_read_acquire(&flow->flags) & MLX5E_TC_FLOW_INIT_DONE) ||
+#else
+	    !(smp_load_acquire(&flow->flags.counter) & MLX5E_TC_FLOW_INIT_DONE) ||
+#endif
+#ifdef HAVE_REFCOUNT
 	    !refcount_inc_not_zero(&flow->refcnt))
+#else
+	    !atomic_inc_not_zero(&flow->refcnt))
+#endif
 		return ERR_PTR(-EINVAL);
 	return flow;
 }
@@ -132,7 +216,11 @@ static struct mlx5e_tc_flow *mlx5e_flow_
 void mlx5e_flow_put(struct mlx5e_priv *priv,
 		    struct mlx5e_tc_flow *flow)
 {
+#ifdef HAVE_REFCOUNT
 	if (refcount_dec_and_test(&flow->refcnt)) {
+#else
+	if (atomic_dec_and_test(&flow->refcnt)) {
+#endif
 		if (!list_empty(&flow->nft_node))
 			list_del_init(&flow->nft_node);
 		mlx5e_tc_del_flow(priv, flow);
@@ -147,7 +235,11 @@ static bool mlx5e_is_eswitch_flow(struct
 
 static bool mlx5e_is_offloaded_flow(struct mlx5e_tc_flow *flow)
 {
+#ifdef HAVE_ATOMIC_READ_ACQUIRE
 	return !!(atomic_read_acquire(&flow->flags) & MLX5E_TC_FLOW_OFFLOADED);
+#else
+	return !!(smp_load_acquire(&flow->flags.counter) & MLX5E_TC_FLOW_OFFLOADED);
+#endif
 }
 
 static void mlx5e_set_flow_flag_mb_before(struct mlx5e_tc_flow *flow, int flag)
@@ -162,6 +254,33 @@ static bool mlx5e_is_simple_flow(struct
 	return !!(atomic_read(&flow->flags) & MLX5E_TC_FLOW_SIMPLE);
 }
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
+struct mod_hdr_key {
+	int num_actions;
+	void *actions;
+};
+
+struct mlx5e_mod_hdr_entry {
+	/* a node of a hash table which keeps all the mod_hdr entries */
+	struct hlist_node mod_hdr_hlist;
+
+	/* protects flows list */
+	spinlock_t flows_lock;
+	/* flows sharing the same mod_hdr entry */
+	struct list_head flows;
+
+	struct mod_hdr_key key;
+
+	u32 mod_hdr_id;
+
+#ifdef HAVE_REFCOUNT
+	refcount_t		refcnt;
+#else
+	atomic_t		refcnt;
+#endif
+	struct rcu_head rcu;
+};
+
 static inline u32 hash_mod_hdr_info(struct mod_hdr_key *key)
 {
 	return jhash(key->actions,
@@ -190,7 +309,11 @@ mlx5e_mod_hdr_get(struct mlx5e_priv *pri
 		hash_for_each_possible_rcu(esw->offloads.mod_hdr_tbl, mh,
 					   mod_hdr_hlist, hash_key) {
 			if (!cmp_mod_hdr_info(&mh->key, key) &&
+#ifdef HAVE_REFCOUNT
 			    refcount_inc_not_zero(&mh->refcnt)) {
+#else
+			    atomic_inc_not_zero(&mh->refcnt)) {
+#endif
 				found = true;
 				break;
 			}
@@ -199,7 +322,11 @@ mlx5e_mod_hdr_get(struct mlx5e_priv *pri
 		hash_for_each_possible_rcu(priv->fs.tc.mod_hdr_tbl, mh,
 					   mod_hdr_hlist, hash_key) {
 			if (!cmp_mod_hdr_info(&mh->key, key) &&
+#ifdef HAVE_REFCOUNT
 			    refcount_inc_not_zero(&mh->refcnt)) {
+#else
+			    atomic_inc_not_zero(&mh->refcnt)) {
+#endif
 				found = true;
 				break;
 			}
@@ -237,7 +364,11 @@ mlx5e_mod_hdr_get_create(struct mlx5e_pr
 	mh->key.num_actions = num_actions;
 	spin_lock_init(&mh->flows_lock);
 	INIT_LIST_HEAD(&mh->flows);
+#ifdef HAVE_REFCOUNT
 	refcount_set(&mh->refcnt, 1);
+#else
+	atomic_set(&mh->refcnt, 1);
+#endif
 
 	err = mlx5_modify_header_alloc(priv->mdev, namespace,
 				       mh->key.num_actions,
@@ -291,7 +422,11 @@ static void mlx5e_mod_hdr_put(struct mlx
 			      struct mlx5e_mod_hdr_entry *mh,
 			      spinlock_t *tbl_lock)
 {
+#ifdef HAVE_REFCOUNT
 	if (refcount_dec_and_test(&mh->refcnt)) {
+#else
+	if (atomic_dec_and_test(&mh->refcnt)) {
+#endif
 		WARN_ON(!list_empty(&mh->flows));
 		mlx5_modify_header_dealloc(priv->mdev, mh->mod_hdr_id);
 		spin_lock(tbl_lock);
@@ -353,6 +488,7 @@ static void mlx5e_detach_mod_hdr(struct
 	mlx5e_mod_hdr_put(priv, flow->mh, tbl_lock);
 	flow->mh = NULL;
 }
+#endif /* HAVE_TCF_PEDIT_TCFP_KEYS_EX */
 
 static
 struct mlx5_core_dev *mlx5e_hairpin_get_mdev(struct net *net, int ifindex)
@@ -624,7 +760,11 @@ static struct mlx5e_hairpin_entry *mlx5e
 	hash_for_each_possible_rcu(priv->fs.tc.hairpin_tbl, hpe,
 				   hairpin_hlist, hash_key) {
 		if (hpe->peer_vhca_id == peer_vhca_id && hpe->prio == prio &&
+#ifdef HAVE_REFCOUNT
 		    refcount_inc_not_zero(&hpe->refcnt)) {
+#else
+		    atomic_inc_not_zero(&hpe->refcnt)) {
+#endif
 			rcu_read_unlock();
 			return hpe;
 		}
@@ -657,7 +797,11 @@ mlx5e_hairpin_get_create(struct mlx5e_pr
 	INIT_LIST_HEAD(&hpe->flows);
 	hpe->peer_vhca_id = peer_id;
 	hpe->prio = match_prio;
+#ifdef HAVE_REFCOUNT
 	refcount_set(&hpe->refcnt, 1);
+#else
+	atomic_set(&hpe->refcnt, 1);
+#endif
 
 	params.log_data_size = 15;
 	params.log_data_size = min_t(u8, params.log_data_size,
@@ -721,7 +865,11 @@ static void mlx5e_hairpin_put(struct mlx
 			      struct mlx5e_hairpin_entry *hpe)
 {
 	/* no more hairpin flows for us, release the hairpin pair */
+#ifdef HAVE_REFCOUNT
 	if (refcount_dec_and_test(&hpe->refcnt)) {
+#else
+	if (atomic_dec_and_test(&hpe->refcnt)) {
+#endif
 		netdev_dbg(priv->netdev, "del hairpin: peer %s\n",
 			   dev_name(hpe->hp->pair->peer_mdev->device));
 
@@ -735,22 +883,31 @@ static void mlx5e_hairpin_put(struct mlx
 }
 
 #define UNKNOWN_MATCH_PRIO 8
-
 static int mlx5e_hairpin_get_prio(struct mlx5e_priv *priv,
-				  struct mlx5_flow_spec *spec, u8 *match_prio,
-				  struct netlink_ext_ack *extack)
+				  struct mlx5_flow_spec *spec, u8 *match_prio
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				  ,struct netlink_ext_ack *extack)
+#else
+				)
+#endif
 {
 	void *headers_c, *headers_v;
 	u8 prio_val, prio_mask = 0;
 	bool vlan_present;
 
+#ifdef HAVE_IEEE_DCBNL_ETS
 #ifdef CONFIG_MLX5_CORE_EN_DCB
 	if (priv->dcbx_dp.trust_state != MLX5_QPTS_TRUST_PCP) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "only PCP trust state supported for hairpin");
+#else
+		netdev_warn(priv->netdev, "only PCP trust state supported for hairpin\n");
+#endif
 		return -EOPNOTSUPP;
 	}
 #endif
+#endif
 	headers_c = MLX5_ADDR_OF(fte_match_param, spec->match_criteria, outer_headers);
 	headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value, outer_headers);
 
@@ -763,8 +920,12 @@ static int mlx5e_hairpin_get_prio(struct
 	if (!vlan_present || !prio_mask) {
 		prio_val = UNKNOWN_MATCH_PRIO;
 	} else if (prio_mask != 0x7) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "masked priority match not supported for hairpin");
+#else
+		netdev_warn(priv->netdev, "masked priority match not supported for hairpin\n");
+#endif
 		return -EOPNOTSUPP;
 	}
 
@@ -774,8 +935,11 @@ static int mlx5e_hairpin_get_prio(struct
 
 static int mlx5e_hairpin_flow_add(struct mlx5e_priv *priv,
 				  struct mlx5e_tc_flow *flow,
-				  struct mlx5e_tc_flow_parse_attr *parse_attr,
-				  struct netlink_ext_ack *extack)
+				  struct mlx5e_tc_flow_parse_attr *parse_attr
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				  ,struct netlink_ext_ack *extack
+#endif
+				  )
 {
 	int peer_ifindex = parse_attr->mirred_ifindex;
 	struct mlx5_core_dev *peer_mdev;
@@ -786,13 +950,20 @@ static int mlx5e_hairpin_flow_add(struct
 
 	peer_mdev = mlx5e_hairpin_get_mdev(dev_net(priv->netdev), peer_ifindex);
 	if (!MLX5_CAP_GEN(priv->mdev, hairpin) || !MLX5_CAP_GEN(peer_mdev, hairpin)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack, "hairpin is not supported");
+#else
+		netdev_warn(priv->netdev, "hairpin is not supported\n");
+#endif
 		return -EOPNOTSUPP;
 	}
 
 	peer_id = MLX5_CAP_GEN(peer_mdev, vhca_id);
-	err = mlx5e_hairpin_get_prio(priv, &parse_attr->spec, &match_prio,
-				     extack);
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+	err = mlx5e_hairpin_get_prio(priv, &parse_attr->spec, &match_prio, extack);
+#else
+	err = mlx5e_hairpin_get_prio(priv, &parse_attr->spec, &match_prio);
+#endif
 	if (err)
 		return err;
 	hpe = mlx5e_hairpin_get_create(priv, peer_ifindex, peer_id, match_prio);
@@ -831,8 +1002,11 @@ static void mlx5e_hairpin_flow_del(struc
 static int
 mlx5e_tc_add_nic_flow(struct mlx5e_priv *priv,
 		      struct mlx5e_tc_flow_parse_attr *parse_attr,
-		      struct mlx5e_tc_flow *flow,
-		      struct netlink_ext_ack *extack)
+		      struct mlx5e_tc_flow *flow
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+		      ,struct netlink_ext_ack *extack
+#endif
+		      )
 {
 	struct mlx5_flow_context *flow_context = &parse_attr->spec.flow_context;
 	struct mlx5_nic_flow_attr *attr = flow->nic_attr;
@@ -841,7 +1015,7 @@ mlx5e_tc_add_nic_flow(struct mlx5e_priv
 	struct mlx5_flow_act flow_act = {
 		.action = attr->action,
 		.reformat_id = 0,
-		.flags    = FLOW_ACT_NO_APPEND,
+		.flags	  = FLOW_ACT_NO_APPEND,
 	};
 	struct mlx5_fc *counter = NULL;
 	int err, dest_ix = 0;
@@ -850,7 +1024,11 @@ mlx5e_tc_add_nic_flow(struct mlx5e_priv
 	flow_context->flow_tag = attr->flow_tag;
 
 	if (atomic_read(&flow->flags) & MLX5E_TC_FLOW_HAIRPIN) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		err = mlx5e_hairpin_flow_add(priv, flow, parse_attr, extack);
+#else
+		err = mlx5e_hairpin_flow_add(priv, flow, parse_attr);
+#endif
 		if (err)
 			return err;
 
@@ -879,12 +1057,14 @@ mlx5e_tc_add_nic_flow(struct mlx5e_priv
 		attr->counter = counter;
 	}
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR) {
 		err = mlx5e_attach_mod_hdr(priv, flow, parse_attr);
 		flow_act.modify_id = attr->mod_hdr_id;
 		if (err)
 			return err;
 	}
+#endif
 
 	mutex_lock(&priv->fs.tc.t_lock);
 	if (IS_ERR_OR_NULL(priv->fs.tc.t)) {
@@ -907,8 +1087,10 @@ mlx5e_tc_add_nic_flow(struct mlx5e_priv
 							    MLX5E_TC_FT_LEVEL, 0);
 		if (IS_ERR(priv->fs.tc.t)) {
 			mutex_unlock(&priv->fs.tc.t_lock);
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "Failed to create tc offload table\n");
+#endif
 			netdev_err(priv->netdev,
 				   "Failed to create tc offload table\n");
 			return PTR_ERR(priv->fs.tc.t);
@@ -946,20 +1128,25 @@ static void mlx5e_tc_del_nic_flow(struct
 	}
 	mutex_unlock(&priv->fs.tc.t_lock);
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)
 		mlx5e_detach_mod_hdr(priv, flow);
+#endif
 
 	if (atomic_read(&flow->flags) & MLX5E_TC_FLOW_HAIRPIN)
 		mlx5e_hairpin_flow_del(priv, flow);
 }
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 static void mlx5e_detach_encap(struct mlx5e_priv *priv,
 			       struct mlx5e_tc_flow *flow);
 
 static int mlx5e_attach_encap(struct mlx5e_priv *priv,
 			      struct mlx5e_tc_flow *flow,
 			      struct net_device *mirred_dev,
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			      struct netlink_ext_ack *extack,
+#endif
 			      struct net_device **encap_dev,
 			      bool *encap_valid);
 
@@ -985,6 +1172,16 @@ mlx5e_tc_offload_fdb_rules(struct mlx5_e
 
 	return rule;
 }
+#endif
+
+#ifndef HAVE_ATOMIC_AND
+static void atomic_and(int i, atomic_t *v) {
+	int flags = atomic_read(v);
+
+	flags &= i;
+	atomic_set(v, flags);
+}
+#endif
 
 static void
 mlx5e_tc_unoffload_fdb_rules(struct mlx5_eswitch *esw,
@@ -999,6 +1196,7 @@ mlx5e_tc_unoffload_fdb_rules(struct mlx5
 	mlx5_eswitch_del_offloaded_rule(esw, flow->rule[0], attr);
 }
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 static struct mlx5_flow_handle *
 mlx5e_tc_offload_to_slow_path(struct mlx5_eswitch *esw,
 			      struct mlx5e_tc_flow *flow,
@@ -1018,6 +1216,7 @@ mlx5e_tc_offload_to_slow_path(struct mlx
 
 	return rule;
 }
+#endif
 
 static void
 mlx5e_tc_unoffload_from_slow_path(struct mlx5_eswitch *esw,
@@ -1053,18 +1252,23 @@ static void remove_unready_flow(struct m
 int
 mlx5e_tc_add_fdb_flow(struct mlx5e_priv *priv,
 		      struct mlx5e_tc_flow_parse_attr *parse_attr,
-		      struct mlx5e_tc_flow *flow,
-		      struct netlink_ext_ack *extack)
+		      struct mlx5e_tc_flow *flow
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+		      ,struct netlink_ext_ack *extack
+#endif
+		      )
 {
 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 	u32 max_chain = mlx5_eswitch_get_chain_range(esw);
 	struct mlx5_esw_flow_attr *attr = flow->esw_attr;
 	u16 max_prio = mlx5_eswitch_get_prio_range(esw);
-	struct net_device *out_dev, *encap_dev = NULL;
 	struct mlx5_fc *counter = NULL;
+#ifdef HAVE_TCF_TUNNEL_INFO
+	struct net_device *out_dev, *encap_dev = NULL;
 	struct mlx5e_rep_priv *rpriv;
 	struct mlx5e_priv *out_priv;
 	bool encap_valid = true;
+#endif
 	int err = 0;
 
 #ifdef HAVE_MINIFLOW
@@ -1072,25 +1276,41 @@ mlx5e_tc_add_fdb_flow(struct mlx5e_priv
 		attr->prio = 1;
 #else
 	if (!mlx5_eswitch_prios_supported(esw) && attr->prio != 1) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG(extack, "E-switch priorities unsupported, upgrade FW");
+#else
+		netdev_err(priv->netdev,"E-switch priorities unsupported, upgrade\n");
+#endif
 		return -EOPNOTSUPP;
 	}
 #endif
 
 	if (attr->chain > max_chain) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG(extack, "Requested chain is out of supported range");
+#else
+		netdev_err(priv->netdev,"Requested chain is out of supported range\n");
+#endif
 		return -EOPNOTSUPP;
 	}
 
 	if (attr->prio > max_prio) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG(extack, "Requested priority is out of supported range");
+#else
+		netdev_err(priv->netdev,"Requested priority is out of supported range\n");
+#endif
 		return -EOPNOTSUPP;
 	}
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_PACKET_REFORMAT) {
 		out_dev = __dev_get_by_index(dev_net(priv->netdev),
 					     attr->parse_attr->mirred_ifindex);
-		err = mlx5e_attach_encap(priv, flow, out_dev, extack,
+		err = mlx5e_attach_encap(priv, flow, out_dev,
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+					 extack,
+#endif
 					 &encap_dev, &encap_valid);
 		if (err)
 			return err;
@@ -1100,11 +1320,13 @@ mlx5e_tc_add_fdb_flow(struct mlx5e_priv
 		attr->out_rep[attr->out_count] = rpriv->rep;
 		attr->out_mdev[attr->out_count++] = out_priv->mdev;
 	}
+#endif /* HAVE_TCF_TUNNEL_INFO */
 
 	err = mlx5_eswitch_add_vlan_action(esw, attr);
 	if (err)
 		return err;
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR) {
 		err = mlx5e_attach_mod_hdr(priv, flow, parse_attr);
 		kfree(parse_attr->mod_hdr_actions);
@@ -1112,6 +1334,7 @@ mlx5e_tc_add_fdb_flow(struct mlx5e_priv
 		if (err)
 			return err;
 	}
+#endif
 
 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_COUNT) {
 		counter = mlx5_fc_create(attr->counter_dev, true);
@@ -1121,6 +1344,7 @@ mlx5e_tc_add_fdb_flow(struct mlx5e_priv
 		attr->counter = counter;
 	}
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	/* we get here if one of the following takes place:
 	 * (1) there's no error
 	 * (2) there's an encap action and we don't have valid neigh
@@ -1138,11 +1362,14 @@ mlx5e_tc_add_fdb_flow(struct mlx5e_priv
 		return PTR_ERR(flow->rule[0]);
 	else
 		mlx5e_set_flow_flag_mb_before(flow, MLX5E_TC_FLOW_OFFLOADED);
+#endif
 
 	if (!(flow->esw_attr->action &
 	      MLX5_FLOW_CONTEXT_ACTION_PACKET_REFORMAT)) {
 		kvfree(parse_attr);
+#ifdef HAVE_TCF_TUNNEL_INFO
 		flow->esw_attr->parse_attr = NULL;
+#endif
 	}
 
 	return 0;
@@ -1173,11 +1400,15 @@ static void mlx5e_tc_del_fdb_flow_simple
 
 	mlx5_eswitch_del_vlan_action(esw, attr);
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_PACKET_REFORMAT)
 		mlx5e_detach_encap(priv, flow);
+#endif
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)
 		mlx5e_detach_mod_hdr(priv, flow);
+#endif
 
 	if (attr->action & MLX5_FLOW_CONTEXT_ACTION_COUNT)
 		mlx5_fc_destroy(attr->counter_dev, attr->counter);
@@ -1197,12 +1428,25 @@ static void mlx5e_tc_del_fdb_flow(struct
 			mlx5_fc_destroy(priv->mdev, flow->dummy_counter);
 	}
 
+#if defined(HAVE_TCF_PEDIT_TCFP_KEYS_EX) && defined(HAVE_TCF_TUNNEL_INFO)
 	if (attr->parse_attr) {
 		kfree(attr->parse_attr->mod_hdr_actions);
 		kvfree(attr->parse_attr);
 	}
+#endif
 }
 
+#if defined(HAVE_TCF_TUNNEL_INFO) || defined(HAVE_TC_CLSFLOWER_STATS)
+static struct mlx5_fc *mlx5e_tc_get_counter(struct mlx5e_tc_flow *flow)
+{
+	if (atomic_read(&flow->flags) & MLX5E_TC_FLOW_ESWITCH)
+		return flow->esw_attr->counter;
+	else
+		return flow->nic_attr->counter;
+}
+#endif
+
+#ifdef HAVE_TCF_TUNNEL_INFO
 static void mlx5e_put_flow_list(struct mlx5e_priv *priv,
 				struct list_head *flow_list)
 {
@@ -1316,14 +1560,6 @@ void mlx5e_tc_encap_flows_del(struct mlx
 	mlx5e_put_flow_list(priv, &deleted_flows);
 }
 
-static struct mlx5_fc *mlx5e_tc_get_counter(struct mlx5e_tc_flow *flow)
-{
-	if (mlx5e_is_eswitch_flow(flow))
-		return flow->esw_attr->counter;
-	else
-		return flow->nic_attr->counter;
-}
-
 static struct mlx5e_tc_flow *
 mlx5e_get_next_encap_flow(struct mlx5e_encap_entry *e,
 			  struct mlx5e_tc_flow *flow)
@@ -1425,9 +1661,12 @@ void mlx5e_tc_update_neigh_used_value(st
 
 	if (m_neigh->family == AF_INET)
 		tbl = &arp_tbl;
-#if IS_ENABLED(CONFIG_IPV6)
-	else if (m_neigh->family == AF_INET6)
-		tbl = &nd_tbl;
+#if defined(__IPV6_SUPPORT__) && IS_ENABLED(CONFIG_IPV6)
+	else if (m_neigh->family == AF_INET6) {
+		if (!ipv6_stub || !ipv6_stub->nd_tbl)
+			return;
+		tbl = ipv6_stub->nd_tbl;
+	}
 #endif
 	else
 		return;
@@ -1470,7 +1709,11 @@ void mlx5e_encap_put(struct mlx5e_priv *
 {
 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 
+#ifdef HAVE_REFCOUNT
 	if (refcount_dec_and_test(&e->refcnt)) {
+#else
+	if (atomic_dec_and_test(&e->refcnt)) {
+#endif
 		WARN_ON(!list_empty(&e->flows));
 		/* encap can be deleted before attachment to dev if error
 		 * happens during encap initialization
@@ -1562,6 +1805,7 @@ int mlx5e_tc_update_and_init_done_fdb_fl
 
 	return err;
 }
+#endif
 
 static void __mlx5e_tc_del_fdb_peer_flow(struct mlx5e_tc_flow *flow)
 {
@@ -1609,6 +1853,7 @@ static void mlx5e_tc_del_flow(struct mlx
 	}
 }
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 static void parse_vxlan_attr(struct mlx5_flow_spec *spec,
 			     struct tc_cls_flower_offload *f)
 {
@@ -1645,7 +1890,9 @@ static int parse_tunnel_attr(struct mlx5
 			     struct tc_cls_flower_offload *f,
 			     u8 *match_level)
 {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#endif
 	void *headers_c = MLX5_ADDR_OF(fte_match_param, spec->match_criteria,
 				       outer_headers);
 	void *headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value,
@@ -1674,8 +1921,10 @@ static int parse_tunnel_attr(struct mlx5
 		    MLX5_CAP_ESW(priv->mdev, vxlan_encap_decap))
 			parse_vxlan_attr(spec, f);
 		else {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "port isn't an offloaded vxlan udp dport");
+#endif
 			netdev_warn(priv->netdev,
 				    "%d isn't an offloaded vxlan udp dport\n", be16_to_cpu(key->dst));
 			return -EOPNOTSUPP;
@@ -1693,8 +1942,10 @@ static int parse_tunnel_attr(struct mlx5
 			 udp_sport, ntohs(key->src));
 	} else { /* udp dst port must be given */
 vxlan_match_offload_err:
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "IP tunnel decap offload supported only for vxlan, must set UDP dport");
+#endif
 		netdev_warn(priv->netdev,
 			    "IP tunnel decap offload supported only for vxlan, must set UDP dport\n");
 		return -EOPNOTSUPP;
@@ -1753,6 +2004,7 @@ vxlan_match_offload_err:
 		MLX5_SET(fte_match_set_lyr_2_4, headers_v, ethertype, ETH_P_IPV6);
 	}
 
+#ifdef HAVE_FLOW_DISSECTOR_KEY_ENC_IP
 	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_ENC_IP)) {
 		struct flow_dissector_key_ip *key =
 			skb_flow_dissector_target(f->dissector,
@@ -1771,18 +2023,20 @@ vxlan_match_offload_err:
 
 		MLX5_SET(fte_match_set_lyr_2_4, headers_c, ttl_hoplimit, mask->ttl);
 		MLX5_SET(fte_match_set_lyr_2_4, headers_v, ttl_hoplimit, key->ttl);
-
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		if (mask->ttl &&
 		    !MLX5_CAP_ESW_FLOWTABLE_FDB
 			(priv->mdev,
-			 ft_field_support.outer_ipv4_ttl)) {
+			 ft_field_support.outer_ipv4_ttl))
+			 {
 			NL_SET_ERR_MSG_MOD(extack,
 					   "Matching on TTL is not supported");
 			return -EOPNOTSUPP;
 		}
-
+#endif
 	}
 
+#endif
 	/* Enforce DMAC when offloading incoming tunneled flows.
 	 * Flow counters require a match on the DMAC.
 	 */
@@ -1797,6 +2051,7 @@ vxlan_match_offload_err:
 
 	return 0;
 }
+#endif /* HAVE_TCF_TUNNEL_INFO */
 
 static void *get_match_headers_criteria(u32 flags,
 					struct mlx5_flow_spec *spec)
@@ -1823,15 +2078,19 @@ static int __parse_cls_flower(struct mlx
 			      struct tc_cls_flower_offload *f,
 			      u8 *match_level, u8 *tunnel_match_level)
 {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#endif
 	void *headers_c = MLX5_ADDR_OF(fte_match_param, spec->match_criteria,
 				       outer_headers);
 	void *headers_v = MLX5_ADDR_OF(fte_match_param, spec->match_value,
 				       outer_headers);
+#ifdef HAVE_FLOW_DISSECTOR_KEY_CVLAN
 	void *misc_c = MLX5_ADDR_OF(fte_match_param, spec->match_criteria,
 				    misc_parameters);
 	void *misc_v = MLX5_ADDR_OF(fte_match_param, spec->match_value,
 				    misc_parameters);
+#endif
 	u16 addr_type = 0;
 	u8 ip_proto = 0;
 
@@ -1841,25 +2100,43 @@ static int __parse_cls_flower(struct mlx
 	    ~(BIT(FLOW_DISSECTOR_KEY_CONTROL) |
 	      BIT(FLOW_DISSECTOR_KEY_BASIC) |
 	      BIT(FLOW_DISSECTOR_KEY_ETH_ADDRS) |
+#ifdef HAVE_FLOW_DISSECTOR_KEY_VLAN
 	      BIT(FLOW_DISSECTOR_KEY_VLAN) |
+#else
+	      BIT(FLOW_DISSECTOR_KEY_VLANID) |
+#endif
+#ifdef HAVE_FLOW_DISSECTOR_KEY_CVLAN
 	      BIT(FLOW_DISSECTOR_KEY_CVLAN) |
+#endif
 	      BIT(FLOW_DISSECTOR_KEY_IPV4_ADDRS) |
 	      BIT(FLOW_DISSECTOR_KEY_IPV6_ADDRS) |
+#ifdef HAVE_TCF_TUNNEL_INFO
 	      BIT(FLOW_DISSECTOR_KEY_PORTS) |
 	      BIT(FLOW_DISSECTOR_KEY_ENC_KEYID) |
 	      BIT(FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS) |
 	      BIT(FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS) |
 	      BIT(FLOW_DISSECTOR_KEY_ENC_PORTS)	|
 	      BIT(FLOW_DISSECTOR_KEY_ENC_CONTROL) |
+#else
+	      BIT(FLOW_DISSECTOR_KEY_PORTS) |
+#endif
+#ifdef HAVE_FLOW_DISSECTOR_KEY_TCP
 	      BIT(FLOW_DISSECTOR_KEY_TCP) |
+#endif
+#ifdef HAVE_FLOW_DISSECTOR_KEY_IP
 	      BIT(FLOW_DISSECTOR_KEY_IP)  |
+#endif
+#ifdef HAVE_FLOW_DISSECTOR_KEY_ENC_IP
 	      BIT(FLOW_DISSECTOR_KEY_ENC_IP))) {
-		NL_SET_ERR_MSG_MOD(extack, "Unsupported key");
+#else
+	      0)) {
+#endif
 		netdev_warn(priv->netdev, "Unsupported key used: 0x%x\n",
 			    f->dissector->used_keys);
 		return -EOPNOTSUPP;
 	}
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	if ((dissector_uses_key(f->dissector,
 				FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS) ||
 	     dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_ENC_KEYID) ||
@@ -1887,6 +2164,7 @@ static int __parse_cls_flower(struct mlx
 		headers_v = get_match_headers_value(MLX5_FLOW_CONTEXT_ACTION_DECAP,
 						    spec);
 	}
+#endif
 
 	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_BASIC)) {
 		struct flow_dissector_key_basic *key =
@@ -1906,6 +2184,7 @@ static int __parse_cls_flower(struct mlx
 			*match_level = MLX5_MATCH_L2;
 	}
 
+#ifdef HAVE_FLOW_DISSECTOR_KEY_VLAN
 	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_VLAN)) {
 		struct flow_dissector_key_vlan *key =
 			skb_flow_dissector_target(f->dissector,
@@ -1915,6 +2194,7 @@ static int __parse_cls_flower(struct mlx
 			skb_flow_dissector_target(f->dissector,
 						  FLOW_DISSECTOR_KEY_VLAN,
 						  f->mask);
+#ifdef HAVE_FLOW_DISSECTOR_KEY_CVLAN
 		if (mask->vlan_id || mask->vlan_priority || mask->vlan_tpid) {
 			if (key->vlan_tpid == htons(ETH_P_8021AD)) {
 				MLX5_SET(fte_match_set_lyr_2_4, headers_c,
@@ -1927,7 +2207,11 @@ static int __parse_cls_flower(struct mlx
 				MLX5_SET(fte_match_set_lyr_2_4, headers_v,
 					 cvlan_tag, 1);
 			}
-
+#else
+			if (mask->vlan_id || mask->vlan_priority) {
+				MLX5_SET(fte_match_set_lyr_2_4, headers_c, cvlan_tag, 1);
+				MLX5_SET(fte_match_set_lyr_2_4, headers_v, cvlan_tag, 1);
+#endif /* HAVE_FLOW_DISSECTOR_KEY_CVLAN */
 			MLX5_SET(fte_match_set_lyr_2_4, headers_c, first_vid, mask->vlan_id);
 			MLX5_SET(fte_match_set_lyr_2_4, headers_v, first_vid, key->vlan_id);
 
@@ -1936,12 +2220,32 @@ static int __parse_cls_flower(struct mlx
 
 			*match_level = MLX5_MATCH_L2;
 		}
+#else
+	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_VLANID)) {
+		struct flow_dissector_key_tags *key =
+			skb_flow_dissector_target(f->dissector,
+						  FLOW_DISSECTOR_KEY_VLANID,
+						  f->key);
+		struct flow_dissector_key_tags *mask =
+			skb_flow_dissector_target(f->dissector,
+						  FLOW_DISSECTOR_KEY_VLANID,
+						  f->mask);
+		if (mask->vlan_id) {
+			MLX5_SET(fte_match_set_lyr_2_4, headers_c, cvlan_tag, 1);
+			MLX5_SET(fte_match_set_lyr_2_4, headers_v, cvlan_tag, 1);
+			MLX5_SET(fte_match_set_lyr_2_4, headers_c, first_vid, mask->vlan_id);
+			MLX5_SET(fte_match_set_lyr_2_4, headers_v, first_vid, key->vlan_id);
+
+			*match_level = MLX5_MATCH_L2;
+		}
+#endif
 	} else if (*match_level != MLX5_MATCH_NONE) {
 		MLX5_SET(fte_match_set_lyr_2_4, headers_c, svlan_tag, 1);
 		MLX5_SET(fte_match_set_lyr_2_4, headers_c, cvlan_tag, 1);
 		*match_level = MLX5_MATCH_L2;
 	}
 
+#ifdef HAVE_FLOW_DISSECTOR_KEY_CVLAN 
 	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_CVLAN)) {
 		struct flow_dissector_key_vlan *key =
 			skb_flow_dissector_target(f->dissector,
@@ -1976,7 +2280,7 @@ static int __parse_cls_flower(struct mlx
 			*match_level = MLX5_MATCH_L2;
 		}
 	}
-
+#endif /* HAVE_FLOW_DISSECTOR_KEY_CVLAN */
 	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_ETH_ADDRS)) {
 		struct flow_dissector_key_eth_addrs *key =
 			skb_flow_dissector_target(f->dissector,
@@ -2029,7 +2333,7 @@ static int __parse_cls_flower(struct mlx
 			/* the HW doesn't need L3 inline to match on frag=no */
 			if (!(key->flags & FLOW_DIS_IS_FRAGMENT))
 				*match_level = MLX5_MATCH_L2;
-	/* ***  L2 attributes parsing up to here *** */
+	/* ***	L2 attributes parsing up to here *** */
 			else
 				*match_level = MLX5_MATCH_L3;
 		}
@@ -2111,6 +2415,7 @@ static int __parse_cls_flower(struct mlx
 			*match_level = MLX5_MATCH_L3;
 	}
 
+#ifdef HAVE_FLOW_DISSECTOR_KEY_IP
 	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_IP)) {
 		struct flow_dissector_key_ip *key =
 			skb_flow_dissector_target(f->dissector,
@@ -2133,16 +2438,19 @@ static int __parse_cls_flower(struct mlx
 		if (mask->ttl &&
 		    !MLX5_CAP_ESW_FLOWTABLE_FDB(priv->mdev,
 						ft_field_support.outer_ipv4_ttl)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "Matching on TTL is not supported");
+#endif
 			return -EOPNOTSUPP;
 		}
 
 		if (mask->tos || mask->ttl)
 			*match_level = MLX5_MATCH_L3;
 	}
+#endif
 
-	/* ***  L3 attributes parsing up to here *** */
+	/* ***	L3 attributes parsing up to here *** */
 
 	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_PORTS)) {
 		struct flow_dissector_key_ports *key =
@@ -2178,8 +2486,10 @@ static int __parse_cls_flower(struct mlx
 				 udp_dport, ntohs(key->dst));
 			break;
 		default:
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "Only UDP and TCP transports are supported for L4 matching");
+#endif
 			netdev_err(priv->netdev,
 				   "Only UDP and TCP transport are supported\n");
 			return -EINVAL;
@@ -2189,6 +2499,7 @@ static int __parse_cls_flower(struct mlx
 			*match_level = MLX5_MATCH_L4;
 	}
 
+#ifdef HAVE_FLOW_DISSECTOR_KEY_TCP
 	if (dissector_uses_key(f->dissector, FLOW_DISSECTOR_KEY_TCP)) {
 		struct flow_dissector_key_tcp *key =
 			skb_flow_dissector_target(f->dissector,
@@ -2207,6 +2518,7 @@ static int __parse_cls_flower(struct mlx
 		if (mask->flags)
 			*match_level = MLX5_MATCH_L4;
 	}
+#endif
 
 	return 0;
 }
@@ -2236,7 +2548,9 @@ static int parse_cls_flower(struct mlx5e
 			    struct mlx5_flow_spec *spec,
 			    struct tc_cls_flower_offload *f)
 {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#endif
 	struct mlx5_core_dev *dev = priv->mdev;
 	struct mlx5_eswitch *esw = dev->priv.eswitch;
 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
@@ -2258,8 +2572,10 @@ static int parse_cls_flower(struct mlx5e
 		if (rep->vport != MLX5_VPORT_UPLINK &&
 		    (esw->offloads.inline_mode != MLX5_INLINE_MODE_NONE &&
 		    esw->offloads.inline_mode < match_level)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "Flow is not offloaded due to min inline setting");
+#endif
 			netdev_warn(priv->netdev,
 				    "Flow is not offloaded due to min inline setting, required %d actual %d\n",
 				    match_level, esw->offloads.inline_mode);
@@ -2267,7 +2583,7 @@ static int parse_cls_flower(struct mlx5e
 		}
 	}
 
-	if (is_eswitch_flow)
+	if (is_eswitch_flow) {
 		flow->esw_attr->match_level = match_level;
 		flow->esw_attr->tunnel_match_level = tunnel_match_level;
 	} else {
@@ -2277,6 +2593,7 @@ static int parse_cls_flower(struct mlx5e
 	return err;
 }
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 struct pedit_headers {
 	struct ethhdr  eth;
 	struct vlan_hdr vlan;
@@ -2338,8 +2655,8 @@ static struct mlx5_fields fields[] = {
 	OFFLOAD(FIRST_VID,  2, vlan.h_vlan_TCI, 0),
 
 	OFFLOAD(IP_TTL, 1, ip4.ttl,   0),
-	OFFLOAD(SIPV4,  4, ip4.saddr, 0),
-	OFFLOAD(DIPV4,  4, ip4.daddr, 0),
+	OFFLOAD(SIPV4,	4, ip4.saddr, 0),
+	OFFLOAD(DIPV4,	4, ip4.daddr, 0),
 
 	OFFLOAD(SIPV6_127_96, 4, ip6.saddr.s6_addr32[0], 0),
 	OFFLOAD(SIPV6_95_64,  4, ip6.saddr.s6_addr32[1], 0),
@@ -2365,8 +2682,11 @@ static struct mlx5_fields fields[] = {
  */
 static int offload_pedit_fields(struct pedit_headers *masks,
 				struct pedit_headers *vals,
-				struct mlx5e_tc_flow_parse_attr *parse_attr,
-				struct netlink_ext_ack *extack)
+				struct mlx5e_tc_flow_parse_attr *parse_attr
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				,struct netlink_ext_ack *extack
+#endif
+				)
 {
 	struct pedit_headers *set_masks, *add_masks, *set_vals, *add_vals;
 	int i, action_size, nactions, max_actions, first, last, next_z;
@@ -2407,15 +2727,19 @@ static int offload_pedit_fields(struct p
 			continue;
 
 		if (s_mask && a_mask) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "can't set and add to the same HW field");
+#endif
 			printk(KERN_WARNING "mlx5: can't set and add to the same HW field (%x)\n", f->field);
 			return -EOPNOTSUPP;
 		}
 
 		if (nactions == max_actions) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "too many pedit actions, can't offload");
+#endif
 			printk(KERN_WARNING "mlx5: parsed %d pedit actions, can't do more\n", nactions);
 			return -EOPNOTSUPP;
 		}
@@ -2448,8 +2772,10 @@ static int offload_pedit_fields(struct p
 		next_z = find_next_zero_bit(&mask, field_bsize, first);
 		last  = find_last_bit(&mask, field_bsize);
 		if (first < next_z && next_z < last) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "rewrite of few sub-fields isn't supported");
+#endif
 			printk(KERN_WARNING "mlx5: rewrite of few sub-fields (mask %lx) isn't offloaded\n",
 			       mask);
 			return -EOPNOTSUPP;
@@ -2508,8 +2834,11 @@ static const struct pedit_headers zero_m
 
 static int parse_tc_pedit_action(struct mlx5e_priv *priv,
 				 const struct tc_action *a, int namespace,
-				 struct mlx5e_tc_flow_parse_attr *parse_attr,
-				 struct netlink_ext_ack *extack)
+				 struct mlx5e_tc_flow_parse_attr *parse_attr
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				 ,struct netlink_ext_ack *extack
+#endif
+				 )
 {
 	struct pedit_headers masks[__PEDIT_CMD_MAX], vals[__PEDIT_CMD_MAX], *cmd_masks;
 	int nkeys, i, err = -EOPNOTSUPP;
@@ -2527,13 +2856,21 @@ static int parse_tc_pedit_action(struct
 		err = -EOPNOTSUPP; /* can't be all optimistic */
 
 		if (htype == TCA_PEDIT_KEY_EX_HDR_TYPE_NETWORK) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "legacy pedit isn't offloaded");
+#else
+			netdev_warn(priv->netdev, "legacy pedit isn't offloaded\n");
+#endif
 			goto out_err;
 		}
 
 		if (cmd != TCA_PEDIT_KEY_EX_CMD_SET && cmd != TCA_PEDIT_KEY_EX_CMD_ADD) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack, "pedit cmd isn't offloaded");
+#else
+			netdev_warn(priv->netdev, "pedit cmd %d isn't offloaded\n", cmd);
+#endif
 			goto out_err;
 		}
 
@@ -2552,15 +2889,21 @@ static int parse_tc_pedit_action(struct
 			goto out_err;
 	}
 
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	err = offload_pedit_fields(masks, vals, parse_attr, extack);
+#else
+	err = offload_pedit_fields(masks, vals, parse_attr);
+#endif
 	if (err < 0)
 		goto out_dealloc_parsed_actions;
 
 	for (cmd = 0; cmd < __PEDIT_CMD_MAX; cmd++) {
 		cmd_masks = &masks[cmd];
 		if (memcmp(cmd_masks, &zero_masks, sizeof(zero_masks))) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG_MOD(extack,
 					   "attempt to offload an unsupported field");
+#endif
 			netdev_warn(priv->netdev, "attempt to offload an unsupported field (cmd %d)\n", cmd);
 			print_hex_dump(KERN_WARNING, "mask: ", DUMP_PREFIX_ADDRESS,
 				       16, 1, cmd_masks, sizeof(zero_masks), true);
@@ -2577,27 +2920,36 @@ out_dealloc_parsed_actions:
 out_err:
 	return err;
 }
+#endif /* HAVE_TCF_PEDIT_TCFP_KEYS_EX */
 
+#ifdef HAVE_TCA_CSUM_UPDATE_FLAG_IPV4HDR
 static bool csum_offload_supported(struct mlx5e_priv *priv,
 				   u32 action,
-				   u32 update_flags,
-				   struct netlink_ext_ack *extack)
+				   u32 update_flags
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				   ,struct netlink_ext_ack *extack
+#endif
+				   )
 {
 	u32 prot_flags = TCA_CSUM_UPDATE_FLAG_IPV4HDR | TCA_CSUM_UPDATE_FLAG_TCP |
 			 TCA_CSUM_UPDATE_FLAG_UDP;
 
 	/*  The HW recalcs checksums only if re-writing headers */
 	if (!(action & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "TC csum action is only offloaded with pedit");
+#endif
 		netdev_warn(priv->netdev,
 			    "TC csum action is only offloaded with pedit\n");
 		return false;
 	}
 
 	if (update_flags & ~prot_flags) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "can't offload TC csum action for some header/s");
+#endif
 		netdev_warn(priv->netdev,
 			    "can't offload TC csum action for some header/s - flags %#x\n",
 			    update_flags);
@@ -2606,7 +2958,9 @@ static bool csum_offload_supported(struc
 
 	return true;
 }
+#endif
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 struct ip_ttl_word {
 	__u8	ttl;
 	__u8	protocol;
@@ -2658,16 +3012,22 @@ static bool is_action_keys_supported(con
 
 static bool modify_header_match_supported(struct mlx5_flow_spec *spec,
 					  struct tcf_exts *exts,
-					  u32 match_actions,
-					  struct netlink_ext_ack *extack)
+					  u32 match_actions
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+					  ,struct netlink_ext_ack *extack
+#endif
+					  )
 {
 	const struct tc_action *a;
 	bool modify_ip_header;
-	LIST_HEAD(actions);
 	void *headers_v;
 	u16 ethertype;
 	u8 ip_proto;
+#ifdef tcf_exts_for_each_action
 	int i;
+#else
+	LIST_HEAD(actions);
+#endif
 
 	headers_v = get_match_headers_value(match_actions, spec);
 	ethertype = MLX5_GET(fte_match_set_lyr_2_4, headers_v, ethertype);
@@ -2677,7 +3037,16 @@ static bool modify_header_match_supporte
 		goto out_ok;
 
 	modify_ip_header = false;
+#ifdef HAVE_TCF_EXTS_TO_LIST
+	tcf_exts_to_list(exts, &actions);
+	list_for_each_entry(a, &actions, list) {
+#else
+#ifdef tcf_exts_for_each_action
 	tcf_exts_for_each_action(i, a, exts) {
+#else
+	tc_for_each_action(a, exts) {
+#endif
+#endif
 		if (!is_tcf_pedit(a))
 			continue;
 
@@ -2687,8 +3056,10 @@ static bool modify_header_match_supporte
 	ip_proto = MLX5_GET(fte_match_set_lyr_2_4, headers_v, ip_protocol);
 	if (modify_ip_header && ip_proto != IPPROTO_TCP &&
 	    ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_ICMP) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "can't offload re-write of non TCP/UDP");
+#endif
 		pr_info("can't offload re-write of ip proto %d\n", ip_proto);
 		return false;
 	}
@@ -2696,12 +3067,17 @@ static bool modify_header_match_supporte
 out_ok:
 	return true;
 }
+#endif /* HAVE_TCF_PEDIT_TCFP_KEYS_EX */
 
+#if defined(HAVE_TCF_PEDIT_TCFP_KEYS_EX) || defined(HAVE_TCF_TUNNEL_INFO)
 static bool actions_match_supported(struct mlx5e_priv *priv,
 				    struct tcf_exts *exts,
 				    struct mlx5e_tc_flow_parse_attr *parse_attr,
-				    struct mlx5e_tc_flow *flow,
-				    struct netlink_ext_ack *extack)
+				    struct mlx5e_tc_flow *flow
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				    ,struct netlink_ext_ack *extack
+#endif
+				    )
 {
 	u32 actions;
 
@@ -2717,12 +3093,18 @@ static bool actions_match_supported(stru
 		return false;
 #endif
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	if (actions & MLX5_FLOW_CONTEXT_ACTION_MOD_HDR)
-		return modify_header_match_supported(&parse_attr->spec, exts,
-						     actions, extack);
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+		return modify_header_match_supported(&parse_attr->spec, exts, actions, extack);
+#else
+		return modify_header_match_supported(&parse_attr->spec, exts, actions);
+#endif
+#endif
 
 	return true;
 }
+#endif
 
 static bool same_hw_devs(struct mlx5e_priv *priv, struct mlx5e_priv *peer_priv)
 {
@@ -2740,21 +3122,43 @@ static bool same_hw_devs(struct mlx5e_pr
 
 static int parse_tc_nic_actions(struct mlx5e_priv *priv, struct tcf_exts *exts,
 				struct mlx5e_tc_flow_parse_attr *parse_attr,
-				struct mlx5e_tc_flow *flow,
-				struct netlink_ext_ack *extack)
+				struct mlx5e_tc_flow *flow
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				,struct netlink_ext_ack *extack
+#endif
+				)
 {
 	struct mlx5_nic_flow_attr *attr = flow->nic_attr;
 	const struct tc_action *a;
+#ifdef tcf_exts_for_each_action
+	int i;
+#else
 	LIST_HEAD(actions);
+#endif
 	u32 action = 0;
-	int err, i;
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
+	int err;
+#endif
 
+#ifdef HAVE_TCF_EXTS_HAS_ACTIONS
 	if (!tcf_exts_has_actions(exts))
+#else
+	if (tc_no_actions(exts))
+#endif
 		return -EINVAL;
 
 	attr->flow_tag = MLX5_FS_DEFAULT_FLOW_TAG;
-
+#ifdef HAVE_TCF_EXTS_TO_LIST
+	tcf_exts_to_list(exts, &actions);
+	list_for_each_entry(a, &actions, list) {
+#else
+#ifdef tcf_exts_for_each_action
 	tcf_exts_for_each_action(i, a, exts) {
+#else
+	tc_for_each_action(a, exts) {
+#endif
+#endif
+#ifdef HAVE_IS_TCF_GACT_SHOT
 		if (is_tcf_gact_shot(a)) {
 			action |= MLX5_FLOW_CONTEXT_ACTION_DROP;
 			if (MLX5_CAP_FLOWTABLE(priv->mdev,
@@ -2762,10 +3166,16 @@ static int parse_tc_nic_actions(struct m
 				action |= MLX5_FLOW_CONTEXT_ACTION_COUNT;
 			continue;
 		}
+#endif
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 		if (is_tcf_pedit(a)) {
 			err = parse_tc_pedit_action(priv, a, MLX5_FLOW_NAMESPACE_KERNEL,
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 						    parse_attr, extack);
+#else
+						    parse_attr);
+#endif
 			if (err)
 				return err;
 
@@ -2773,18 +3183,30 @@ static int parse_tc_nic_actions(struct m
 				  MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
 			continue;
 		}
+#endif
 
+#ifdef HAVE_TCA_CSUM_UPDATE_FLAG_IPV4HDR
 		if (is_tcf_csum(a)) {
 			if (csum_offload_supported(priv, action,
-						   tcf_csum_update_flags(a),
-						   extack))
+						   tcf_csum_update_flags(a)
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+						   ,extack))
+#else
+						   ))
+#endif
 				continue;
 
 			return -EOPNOTSUPP;
 		}
+#endif
 
 		if (is_tcf_mirred_egress_redirect(a)) {
+#ifdef HAVE_TCF_MIRRED_DEV
 			struct net_device *peer_dev = tcf_mirred_dev(a);
+#else
+			int ifindex = tcf_mirred_ifindex(a);
+			struct net_device *peer_dev = __dev_get_by_index(dev_net(priv->netdev), ifindex);
+#endif
 
 			if (priv->netdev->netdev_ops == peer_dev->netdev_ops &&
 			    same_hw_devs(priv, netdev_priv(peer_dev))) {
@@ -2793,8 +3215,10 @@ static int parse_tc_nic_actions(struct m
 				action |= MLX5_FLOW_CONTEXT_ACTION_FWD_DEST |
 					  MLX5_FLOW_CONTEXT_ACTION_COUNT;
 			} else {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 				NL_SET_ERR_MSG_MOD(extack,
 						   "device is not on same HW, can't offload");
+#endif
 				netdev_warn(priv->netdev, "device %s not on same HW, can't offload\n",
 					    peer_dev->name);
 				return -EINVAL;
@@ -2802,12 +3226,17 @@ static int parse_tc_nic_actions(struct m
 			continue;
 		}
 
+#ifdef HAVE_IS_TCF_SKBEDIT_MARK
 		if (is_tcf_skbedit_mark(a)) {
 			u32 mark = tcf_skbedit_mark(a);
 
 			if (mark & ~MLX5E_TC_FLOW_ID_MASK) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 				NL_SET_ERR_MSG_MOD(extack,
 						   "Bad flow mark - only 16 bit is supported");
+#else
+				netdev_warn(priv->netdev, "Bad flow mark - only 16 bit is supported: 0x%x\n",mark);
+#endif
 				return -EINVAL;
 			}
 
@@ -2817,11 +3246,18 @@ static int parse_tc_nic_actions(struct m
 		}
 
 		return -EINVAL;
+#endif
 	}
 
 	attr->action = action;
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	if (!actions_match_supported(priv, exts, parse_attr, flow, extack))
+#else
+	if (!actions_match_supported(priv, exts, parse_attr, flow))
+#endif
 		return -EOPNOTSUPP;
+#endif
 
 	return 0;
 }
@@ -2834,12 +3270,17 @@ static struct net_device *mlx5_upper_lag
 	upper = netdev_master_upper_dev_get_rcu(uplink_dev);
 	rcu_read_unlock();
 
+#if defined(HAVE_LAG_TX_TYPE) || defined(MLX_USE_LAG_COMPAT)
 	if (upper && netif_is_lag_master(upper))
+#else
+	if (upper && netif_is_bond_master(upper))
+#endif
 		return upper;
 	else
 		return NULL;
 }
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 static inline int cmp_encap_info(struct ip_tunnel_key *a,
 				 struct ip_tunnel_key *b)
 {
@@ -2896,7 +3337,7 @@ static int mlx5e_route_lookup_ipv4(struc
 				   struct neighbour **out_n,
 				   u8 *out_ttl)
 {
- 	struct neighbour *n = NULL;
+	struct neighbour *n = NULL;
 	struct rtable *rt;
 
 #if IS_ENABLED(CONFIG_INET)
@@ -2936,6 +3377,7 @@ static int mlx5e_route_lookup_ipv4(struc
 	*out_n = n;
 	return 0;
 }
+#endif /* HAVE_TCF_TUNNEL_INFO */
 
 static bool is_merged_eswitch_dev(struct mlx5e_priv *priv,
 				  struct net_device *peer_netdev)
@@ -2950,6 +3392,8 @@ static bool is_merged_eswitch_dev(struct
 		same_hw_devs(priv, peer_priv));
 }
 
+#ifdef HAVE_TCF_TUNNEL_INFO
+#ifdef __IPV6_SUPPORT__
 static int mlx5e_route_lookup_ipv6(struct mlx5e_priv *priv,
 				   struct net_device *mirred_dev,
 				   struct net_device **out_dev,
@@ -2988,6 +3432,7 @@ static int mlx5e_route_lookup_ipv6(struc
 	*out_n = n;
 	return 0;
 }
+#endif /* __IPV6_SUPPORT__ */
 
 static char *gen_eth_tnl_hdr(char *buf, struct net_device *dev,
 			     unsigned char h_dest[ETH_ALEN],
@@ -3047,6 +3492,7 @@ static void gen_vxlan_header_ipv4(struct
 	vxh->vx_vni = vxlan_vni_field(vx_vni);
 }
 
+#ifdef __IPV6_SUPPORT__
 static void gen_vxlan_header_ipv6(struct net_device *out_dev,
 				  char buf[], int encap_size,
 				  unsigned char h_dest[ETH_ALEN],
@@ -3066,7 +3512,7 @@ static void gen_vxlan_header_ipv6(struct
 						 ETH_P_IPV6);
 	ip6_flow_hdr(ip6h, tos, 0);
 	/* the HW fills up ipv6 payload len */
-	ip6h->nexthdr     = IPPROTO_UDP;
+	ip6h->nexthdr	  = IPPROTO_UDP;
 	ip6h->hop_limit   = ttl;
 	ip6h->daddr	  = *daddr;
 	ip6h->saddr	  = *saddr;
@@ -3078,6 +3524,7 @@ static void gen_vxlan_header_ipv6(struct
 	vxh->vx_flags = VXLAN_HF_VNI;
 	vxh->vx_vni = vxlan_vni_field(vx_vni);
 }
+#endif /* __IPV6_SUPPORT__ */
 
 static int mlx5e_encap_entry_attach_update(struct mlx5e_priv *priv,
 					   struct net_device *out_dev,
@@ -3237,6 +3684,7 @@ out:
 	return err;
 }
 
+#ifdef __IPV6_SUPPORT__
 static int mlx5e_create_encap_header_ipv6(struct mlx5e_priv *priv,
 					  struct net_device *mirred_dev,
 					  struct mlx5e_encap_entry *e)
@@ -3366,10 +3814,15 @@ out:
 		neigh_release(n);
 	return err;
 }
+#endif /* __IPV6_SUPPORT__ */
 
 bool mlx5e_encap_take(struct mlx5e_encap_entry *e)
 {
+#ifdef HAVE_REFCOUNT
 	return refcount_inc_not_zero(&e->refcnt);
+#else
+	return atomic_inc_not_zero(&e->refcnt);
+#endif
 }
 
 static struct mlx5e_encap_entry *
@@ -3422,12 +3875,21 @@ mlx5e_encap_get_create(struct mlx5e_priv
 	e->tunnel_type = tunnel_type;
 	INIT_LIST_HEAD(&e->flows);
 	INIT_LIST_HEAD(&e->neigh_update_list);
+#ifdef HAVE_REFCOUNT
 	refcount_set(&e->refcnt, 1);
+#else
+	atomic_set(&e->refcnt, 1);
+#endif
 
 	if (family == AF_INET)
 		err = mlx5e_create_encap_header_ipv4(priv, mirred_dev, e);
+#ifdef __IPV6_SUPPORT__
 	else if (family == AF_INET6)
 		err = mlx5e_create_encap_header_ipv6(priv, mirred_dev, e);
+#else
+	else
+		err = -EOPNOTSUPP;
+#endif
 
 	if (err) {
 		kfree(e);
@@ -3454,7 +3916,9 @@ err_out:
 static int mlx5e_attach_encap(struct mlx5e_priv *priv,
 			      struct mlx5e_tc_flow *flow,
 			      struct net_device *mirred_dev,
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			      struct netlink_ext_ack *extack,
+#endif
 			      struct net_device **encap_dev,
 			      bool *encap_valid)
 {
@@ -3476,8 +3940,10 @@ static int mlx5e_attach_encap(struct mlx
 	/* setting udp src port isn't supported */
 	if (memchr_inv(&key->tp_src, 0, sizeof(key->tp_src))) {
 vxlan_encap_offload_err:
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "must set udp dst port and not set udp src port");
+#endif
 		netdev_warn(priv->netdev,
 			    "must set udp dst port and not set udp src port\n");
 		return -EOPNOTSUPP;
@@ -3487,8 +3953,10 @@ vxlan_encap_offload_err:
 	    MLX5_CAP_ESW(priv->mdev, vxlan_encap_decap)) {
 		tunnel_type = MLX5_REFORMAT_TYPE_L2_TO_VXLAN;
 	} else {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "port isn't an offloaded vxlan udp dport");
+#endif
 		netdev_warn(priv->netdev,
 			    "%d isn't an offloaded vxlan udp dport\n", be16_to_cpu(key->tp_dst));
 		return -EOPNOTSUPP;
@@ -3515,12 +3983,19 @@ vxlan_encap_offload_err:
 
 	return err;
 }
+#endif /* HAVE_TCF_TUNNEL_INFO */
 
+#ifdef HAVE_IS_TCF_VLAN
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 static int add_vlan_rewrite_action(struct mlx5e_priv *priv,
 				   const struct tc_action *a,
 				   struct mlx5_esw_flow_attr *attr,
 				   struct mlx5e_tc_flow_parse_attr *parse_attr,
-				   u32 *action, struct netlink_ext_ack *extack)
+				   u32 *action
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				   , struct netlink_ext_ack *extack
+#endif
+				   )
 {
 	int err;
 	struct tcf_pedit_key_ex pedit_key_ex = {
@@ -3541,22 +4016,37 @@ static int add_vlan_rewrite_action(struc
 	};
 
 	if (tcf_vlan_push_prio(a)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack, "Setting VLAN prio is not supported");
+#else
+		pr_err("Setting VLAN prio is not supported");
+#endif
 		return -EOPNOTSUPP;
 	}
 
 	err = parse_tc_pedit_action(priv, (const struct tc_action *)&pedit_act,
-				    MLX5_FLOW_NAMESPACE_FDB, parse_attr, NULL);
+				    MLX5_FLOW_NAMESPACE_FDB, parse_attr
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				    , NULL
+#endif
+				    );
 	*action |= MLX5_FLOW_CONTEXT_ACTION_MOD_HDR;
 	return err;
 }
-
+#endif /* HAVE_TCF_PEDIT_TCFP_KEYS_EX */
+ 
+#if defined(HAVE_TC_CLS_FLOWER_OFFLOAD_COMMON) && defined(HAVE_TCF_PEDIT_TCFP_KEYS_EX)
 static int
 add_vlan_prio_tag_rewrite_action(struct mlx5e_priv *priv,
 				 struct mlx5e_tc_flow_parse_attr *parse_attr,
 				 struct mlx5_esw_flow_attr *attr,
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 				 u32 *action, struct netlink_ext_ack *extack)
+#else
+				 u32 *action)
+#endif
 {
+#ifdef HAVE_TCF_VLAN_PARAMS
 	struct tcf_vlan_params p = {
 		.tcfv_push_vid = 0,
 		.tcfv_push_prio =
@@ -3572,17 +4062,40 @@ add_vlan_prio_tag_rewrite_action(struct
 	struct tcf_vlan vlan = {
 		.vlan_p = &p,
 	};
+#else
+	struct tcf_vlan vlan = {
+		.tcfv_push_vid = 0,
+		.tcfv_push_prio =
+			MLX5_GET(fte_match_set_lyr_2_4,
+				 get_match_headers_value(*action,
+							 &parse_attr->spec),
+				 first_prio) &
+			MLX5_GET(fte_match_set_lyr_2_4,
+				 get_match_headers_criteria(*action,
+							    &parse_attr->spec),
+				 first_prio),
+	};
+#endif
 
 	return add_vlan_rewrite_action(priv, (struct tc_action *)&vlan,
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 				       attr, parse_attr, action, extack);
+#else
+				       attr, parse_attr, action);
+#endif
 }
+#endif
 
 static int parse_tc_vlan_action(struct mlx5e_priv *priv,
 				const struct tc_action *a,
 				struct mlx5_esw_flow_attr *attr,
 				u32 *action,
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 				struct mlx5e_tc_flow_parse_attr *parse_attr,
 				struct netlink_ext_ack *extack)
+#else
+				struct mlx5e_tc_flow_parse_attr *parse_attr)
+#endif
 {
 	u8 vlan_idx = attr->total_vlan;
 
@@ -3600,12 +4113,18 @@ static int parse_tc_vlan_action(struct m
 			*action |= MLX5_FLOW_CONTEXT_ACTION_VLAN_POP;
 		}
 	} else if (tcf_vlan_action(a) == TCA_VLAN_ACT_PUSH) {
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 		if ((*action) & MLX5_FLOW_CONTEXT_ACTION_VLAN_POP) {
 			/* Replace vlan pop+push with vlan modify */
 			*action &= ~MLX5_FLOW_CONTEXT_ACTION_VLAN_POP;
 			return add_vlan_rewrite_action(priv, a, attr, parse_attr,
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 					       action, extack);
+#else
+					       action);
+#endif
 		}
+#endif
 		attr->vlan_vid[vlan_idx] = tcf_vlan_push_vid(a);
 		attr->vlan_prio[vlan_idx] = tcf_vlan_push_prio(a);
 		attr->vlan_proto[vlan_idx] = tcf_vlan_push_proto(a);
@@ -3627,51 +4146,104 @@ static int parse_tc_vlan_action(struct m
 			*action |= MLX5_FLOW_CONTEXT_ACTION_VLAN_PUSH;
 		}
 	} else { /* action is TCA_VLAN_ACT_MODIFY */
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 		int err;
 
 		err = add_vlan_rewrite_action(priv, a, attr, parse_attr,
-					      action, extack);
+					      action
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+					      , extack
+#endif
+					      );
 		if (err)
 			return err;
 
 		attr->mirror_count = attr->out_count;
 		return err;
+#else
+		return -EOPNOTSUPP;
+#endif
 	}
 
 	attr->total_vlan = vlan_idx + 1;
 
 	return 0;
 }
+#endif /* HAVE_IS_TCF_VLAN */
 
 static int parse_tc_fdb_actions(struct mlx5e_priv *priv, struct tcf_exts *exts,
-				struct mlx5e_tc_flow_parse_attr *parse_attr,
-				struct mlx5e_tc_flow *flow,
-				struct netlink_ext_ack *extack)
+				struct mlx5e_tc_flow_parse_attr *parse_attr
+#ifdef HAVE_TCF_TUNNEL_INFO
+				,struct mlx5e_tc_flow *flow
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+				,struct netlink_ext_ack *extack
+#endif
+#else
+				,struct mlx5_esw_flow_attr *attr
+#endif
+				)
 {
+#if defined(PRIO_CHAIN_SUPPORT) || \
+    defined(HAVE_TC_CLS_FLOWER_OFFLOAD_COMMON) && defined(HAVE_TCF_PEDIT_TCFP_KEYS_EX)
+	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
+#endif
+#ifdef HAVE_TCF_TUNNEL_INFO
 	struct mlx5_esw_flow_attr *attr = flow->esw_attr;
+#endif
 	struct mlx5e_rep_priv *rpriv = priv->ppriv;
+#ifdef HAVE_TCF_TUNNEL_INFO
+#ifndef CONFIG_COMPAT_TCF_TUNNEL_KEY_MOD
 	struct ip_tunnel_info *info = NULL;
+#else
+	struct ip_tunnel_info info_compat;
+	struct ip_tunnel_info *info = &info_compat;
+#endif
+#endif
 	const struct tc_action *a;
+#ifdef tcf_exts_for_each_action
+	int i;
+#else
 	LIST_HEAD(actions);
+#endif
+#ifdef HAVE_TCF_TUNNEL_INFO
 	bool encap = false;
+#endif
 	u32 action = 0;
-	int err, i;
+	int err;
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	attr->parse_attr = parse_attr;
+#endif
 
+#ifdef HAVE_TCF_EXTS_HAS_ACTIONS
 	if (!tcf_exts_has_actions(exts))
+#else
+	if (tc_no_actions(exts))
+#endif
 		return -EINVAL;
 
 	attr->in_rep = rpriv->rep;
 	attr->in_mdev = priv->mdev;
 
+#ifdef HAVE_TCF_EXTS_TO_LIST
+	tcf_exts_to_list(exts, &actions);
+	list_for_each_entry(a, &actions, list) {
+#else
+#ifdef tcf_exts_for_each_action
 	tcf_exts_for_each_action(i, a, exts) {
+#else
+	tc_for_each_action(a, exts) {
+#endif
+#endif
+#ifdef HAVE_IS_TCF_GACT_SHOT
 		if (is_tcf_gact_shot(a)) {
 			action |= MLX5_FLOW_CONTEXT_ACTION_DROP |
 				  MLX5_FLOW_CONTEXT_ACTION_COUNT;
 			continue;
 		}
+#endif /* HAVE_IS_TCF_GACT_SHOT */
 
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 		if (is_tcf_pedit(a)) {
 			if (action & MLX5_FLOW_CONTEXT_ACTION_CT) {
 				pr_err("CT action before HDR is not allowed");
@@ -3679,7 +4251,11 @@ static int parse_tc_fdb_actions(struct m
 			}
 
 			err = parse_tc_pedit_action(priv, a, MLX5_FLOW_NAMESPACE_FDB,
-						    parse_attr, extack);
+						    parse_attr
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+						    , extack
+#endif
+						    );
 			if (err)
 				return err;
 
@@ -3687,25 +4263,39 @@ static int parse_tc_fdb_actions(struct m
 			attr->mirror_count = attr->out_count;
 			continue;
 		}
+#endif /* HAVE_TCF_PEDIT_TCFP_KEYS_EX */
 
+#ifdef HAVE_TCA_CSUM_UPDATE_FLAG_IPV4HDR
 		if (is_tcf_csum(a)) {
 			if (csum_offload_supported(priv, action,
-						   tcf_csum_update_flags(a),
-						   extack))
+						   tcf_csum_update_flags(a)
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+						   ,extack))
+#else
+						   ))
+#endif
 				continue;
 
 			return -EOPNOTSUPP;
 		}
+#endif
 
 		if (is_tcf_mirred_egress_redirect(a) || is_tcf_mirred_egress_mirror(a)) {
 			struct mlx5e_priv *out_priv;
 			struct net_device *out_dev;
 
+#ifdef HAVE_TCF_MIRRED_DEV
 			out_dev = tcf_mirred_dev(a);
+#else
+			int ifindex = tcf_mirred_ifindex(a);
+			out_dev = __dev_get_by_index(dev_net(priv->netdev), ifindex);
+#endif
 
 			if (attr->out_count >= MLX5_MAX_FLOW_FWD_VPORTS) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 				NL_SET_ERR_MSG_MOD(extack,
 						   "can't support more output ports, can't offload forwarding");
+#endif
 				pr_err("can't support more than %d output ports, can't offload forwarding\n",
 				       attr->out_count);
 				return -EOPNOTSUPP;
@@ -3738,25 +4328,35 @@ static int parse_tc_fdb_actions(struct m
 				rpriv = out_priv->ppriv;
 				attr->out_rep[attr->out_count] = rpriv->rep;
 				attr->out_mdev[attr->out_count++] = out_priv->mdev;
+#ifdef HAVE_TCF_TUNNEL_INFO
 			} else if (encap) {
+#ifdef HAVE_TCF_MIRRED_DEV
 				parse_attr->mirred_ifindex = out_dev->ifindex;
+#else
+				parse_attr->mirred_ifindex = ifindex;
+#endif
 				parse_attr->tun_info = *info;
 				action |= MLX5_FLOW_CONTEXT_ACTION_PACKET_REFORMAT |
 					  MLX5_FLOW_CONTEXT_ACTION_FWD_DEST |
 					  MLX5_FLOW_CONTEXT_ACTION_COUNT;
 				/* attr->out_rep is resolved when we handle encap */
 			} else {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 				NL_SET_ERR_MSG_MOD(extack,
 						   "devices are not on same switch HW, can't offload forwarding");
+#endif
 				pr_err("devices %s %s not on same switch HW, can't offload forwarding\n",
 				       priv->netdev->name, out_dev->name);
 				return -EINVAL;
 			}
 			continue;
 		}
-
 		if (is_tcf_tunnel_set(a)) {
+#if !defined(CONFIG_COMPAT_TCF_TUNNEL_KEY_MOD) || defined (CONFIG_NET_SCHED_NEW)
 			info = tcf_tunnel_info(a);
+#else
+			tcf_tunnel_info_compat(a, info);
+#endif
 			if (info)
 				encap = true;
 			else
@@ -3764,10 +4364,28 @@ static int parse_tc_fdb_actions(struct m
 			attr->mirror_count = attr->out_count;
 			continue;
 		}
+#else /* HAVE_TCF_TUNNEL_INFO */
+			} else {
+				pr_err("devices %s %s not on same switch HW, can't offload forwarding\n",
+				       priv->netdev->name, out_dev->name);
+				return -EINVAL;
+			}
+			action |= MLX5_FLOW_CONTEXT_ACTION_FWD_DEST |
+				  MLX5_FLOW_CONTEXT_ACTION_COUNT;
+			out_priv = netdev_priv(out_dev);
+			attr->out_rep[attr->out_count++] = out_priv->ppriv;
+			continue;
+		}
+#endif /* HAVE_TCF_TUNNEL_INFO */
 
+#ifdef HAVE_IS_TCF_VLAN
 		if (is_tcf_vlan(a)) {
 			err = parse_tc_vlan_action(priv, a, attr, &action,
-						   parse_attr, extack);
+						   parse_attr
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+						   , extack
+#endif
+						   );
 
 			if (err)
 				return err;
@@ -3775,17 +4393,23 @@ static int parse_tc_fdb_actions(struct m
 			attr->mirror_count = attr->out_count;
 			continue;
 		}
+#endif /* HAVE_IS_TCF_VLAN */
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 		if (is_tcf_tunnel_release(a)) {
 			action |= MLX5_FLOW_CONTEXT_ACTION_DECAP;
 			continue;
 		}
+#endif /* HAVE_TCF_TUNNEL_INFO */
  
+#ifdef HAVE_MINIFLOW
 		if (is_tcf_ct(a)) {
 			action |= MLX5_FLOW_CONTEXT_ACTION_CT;
 			continue;
 		}
+#endif
 
+#ifdef PRIO_CHAIN_SUPPORT
 		if (is_tcf_gact_goto_chain(a)) {
 			u32 dest_chain = tcf_gact_goto_chain_index(a);
 
@@ -3794,11 +4418,19 @@ static int parse_tc_fdb_actions(struct m
 			u32 max_chain = mlx5_eswitch_get_chain_range(esw);
 
 			if (dest_chain <= attr->chain) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 				NL_SET_ERR_MSG(extack, "Goto earlier chain isn't supported");
+#else
+				netdev_warn(priv->netdev, "Goto earlier chain isn't supported\n");
+#endif
 				return -EOPNOTSUPP;
 			}
 			if (dest_chain > max_chain) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 				NL_SET_ERR_MSG(extack, "Requested destination chain is out of supported range");
+#else
+				netdev_warn(priv->netdev, "Requested destination chain is out of supported range\n");
+#endif
 				return -EOPNOTSUPP;
 			}
 			attr->dest_chain = dest_chain;
@@ -3816,6 +4448,7 @@ static int parse_tc_fdb_actions(struct m
 
 			continue;
 		}
+#endif /* PRIO_CHAIN_SUPPORT */
 
 		return -EINVAL;
 	}
@@ -3828,6 +4461,7 @@ static int parse_tc_fdb_actions(struct m
 	}
 #endif
 
+#if defined(HAVE_TC_CLS_FLOWER_OFFLOAD_COMMON) && defined(HAVE_TCF_PEDIT_TCFP_KEYS_EX)
 	if (MLX5_CAP_GEN(esw->dev, prio_tag_required) &&
 	    action & MLX5_FLOW_CONTEXT_ACTION_VLAN_POP) {
 		/* For prio tag mode, replace vlan pop with rewrite vlan prio
@@ -3835,26 +4469,43 @@ static int parse_tc_fdb_actions(struct m
 		 */
 		action &= ~MLX5_FLOW_CONTEXT_ACTION_VLAN_POP;
 		err = add_vlan_prio_tag_rewrite_action(priv, parse_attr, attr,
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 						       &action, extack);
+#else
+						       &action);
+#endif
 		if (err)
 			return err;
 	}
+#endif /* HAVE_TC_CLS_FLOWER_OFFLOAD_COMMON && HAVE_TCF_PEDIT_TCFP_KEYS_EX */
 
 	attr->action = action;
-	if (!actions_match_supported(priv, exts, parse_attr, flow, extack))
+#if defined(HAVE_TCF_TUNNEL_INFO)
+	if (!actions_match_supported(priv, exts, parse_attr, flow
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+		, extack
+#endif
+		))
 		return -EOPNOTSUPP;
+#endif
 
 	if (attr->dest_chain) {
 		if (attr->action & MLX5_FLOW_CONTEXT_ACTION_FWD_DEST) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 			NL_SET_ERR_MSG(extack, "Mirroring goto chain rules isn't supported");
+#else
+			netdev_warn(priv->netdev, "Mirroring goto chain rules isn't supported\n");
+#endif
 			return -EOPNOTSUPP;
 		}
 		attr->action |= MLX5_FLOW_CONTEXT_ACTION_FWD_DEST;
 	}
 
 	if (attr->mirror_count > 0 && !mlx5_esw_has_fwd_fdb(priv->mdev)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "current firmware doesn't support split rule for port mirroring");
+#endif
 		netdev_warn_once(priv->netdev, "current firmware doesn't support split rule for port mirroring\n");
 		return -EOPNOTSUPP;
 	}
@@ -3870,28 +4521,39 @@ static int parse_tc_fdb_actions(struct m
 static bool is_peer_flow_needed(struct mlx5e_tc_flow *flow)
 {
 	struct mlx5_esw_flow_attr *attr = flow->esw_attr;
+#ifdef HAVE_QDISC_SUPPORTS_BLOCK_SHARING
 	bool is_rep_ingress = attr->in_rep->vport != MLX5_VPORT_UPLINK &&
 				atomic_read(&flow->flags) & MLX5E_TC_FLOW_INGRESS;
 	bool act_is_encap = !!(attr->action &
 			       MLX5_FLOW_CONTEXT_ACTION_PACKET_REFORMAT);
+#endif
 	bool esw_paired = mlx5_devcom_is_paired(attr->in_mdev->priv.devcom,
 						MLX5_DEVCOM_ESW_OFFLOADS);
 
 	if (!esw_paired)
 		return false;
 
+#ifdef HAVE_QDISC_SUPPORTS_BLOCK_SHARING
 	if ((mlx5_lag_is_sriov(attr->in_mdev) ||
 	     mlx5_lag_is_multipath(attr->in_mdev)) &&
-	    (is_rep_ingress || act_is_encap))
+	    (is_rep_ingress || act_is_encap
+#ifdef HAVE_TC_SETUP_CB_EGDEV_REGISTER
+	     || (atomic_read(&flow->flags) & MLX5E_TC_FLOW_EGRESS)
+#endif
+))
 		return true;
 
 	return false;
+#else
+	return (mlx5_lag_is_sriov(attr->in_mdev) ||  mlx5_lag_is_multipath(attr->in_mdev));
+#endif
 }
 
 static void get_flags(int flags, u32 *flow_flags)
 {
 	u32 __flow_flags = 0;
 
+	/* relevant for the new ndo */
 	if (flags & MLX5E_TC_INGRESS)
 		__flow_flags |= MLX5E_TC_FLOW_INGRESS;
 	if (flags & MLX5E_TC_EGRESS)
@@ -3912,12 +4574,28 @@ static const struct rhashtable_params tc
 	.automatic_shrinking = true,
 };
 
+#ifdef CONFIG_COMPAT_CLS_FLOWER_MOD
+static void get_new_flags(struct mlx5e_priv *priv, int *flags)
+{
+	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
+
+	if (mlx5e_eswitch_rep(priv->netdev) &&
+	    MLX5_VPORT_MANAGER(priv->mdev) && esw->mode == SRIOV_OFFLOADS)
+		*flags |= MLX5E_TC_ESW_OFFLOAD;
+}
+#endif
+
 static struct rhashtable *get_tc_ht(struct mlx5e_priv *priv, int flags)
 {
 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
 	struct mlx5e_rep_priv *uplink_rpriv;
 
+#ifdef CONFIG_COMPAT_CLS_FLOWER_MOD
+	if (mlx5e_eswitch_rep(priv->netdev) &&
+	    MLX5_VPORT_MANAGER(priv->mdev) && esw->mode == SRIOV_OFFLOADS) {
+#else
 	if (flags & MLX5E_TC_ESW_OFFLOAD) {
+#endif
 		uplink_rpriv = mlx5_eswitch_get_uplink_priv(esw, REP_ETH);
 		return &uplink_rpriv->tc_ht;
 	} else /* NIC offload */
@@ -3979,16 +4657,26 @@ mlx5e_alloc_flow(struct mlx5e_priv *priv
 
 	if (f) {
 		flow->cookie = f->cookie;
+#ifdef HAVE_TC_CLS_OFFLOAD_HANDLE
 		parse_attr->spec.handle = f->common.handle;
+#endif
 	}
 
 	atomic_set(&flow->flags, flow_flags);
 	flow->priv = priv;
+#ifdef HAVE_TCF_TUNNEL_INFO
 	INIT_LIST_HEAD(&flow->encap);
+#endif
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	INIT_LIST_HEAD(&flow->mod_hdr);
+#endif
 	INIT_LIST_HEAD(&flow->hairpin);
 	INIT_LIST_HEAD(&flow->tmp_list);
+#ifdef HAVE_REFCOUNT
 	refcount_set(&flow->refcnt, 1);
+#else
+	atomic_set(&flow->refcnt, 1);
+#endif
 	INIT_LIST_HEAD(&flow->miniflow_list);
 	INIT_LIST_HEAD(&flow->nft_node);
 
@@ -4025,7 +4713,9 @@ __mlx5e_add_fdb_flow(struct mlx5e_priv *
 		     struct mlx5e_tc_flow **__flow)
 {
 	struct mlx5_eswitch *esw = priv->mdev->priv.eswitch;
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#endif
 	struct mlx5e_tc_flow_parse_attr *parse_attr;
 	struct mlx5e_tc_flow *flow;
 	int attr_size, err;
@@ -4040,10 +4730,21 @@ __mlx5e_add_fdb_flow(struct mlx5e_priv *
 	err = parse_cls_flower(priv, flow, &parse_attr->spec, f);
 	if (err)
 		goto err_parse_flow;
-
+#ifdef PRIO_CHAIN_SUPPORT
 	flow->esw_attr->chain = f->common.chain_index;
 	flow->esw_attr->prio = TC_H_MAJ(f->common.prio) >> 16;
+#else
+	flow->esw_attr->prio = 1;
+#endif
+#ifdef HAVE_TCF_TUNNEL_INFO
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	err = parse_tc_fdb_actions(priv, f->exts, parse_attr, flow, extack);
+#else
+	err = parse_tc_fdb_actions(priv, f->exts, parse_attr, flow);
+#endif /*HAVE_TC_CLS_OFFLOAD_EXTACK */
+#else
+	err = parse_tc_fdb_actions(priv, f->exts, parse_attr, flow->esw_attr);
+#endif
 	if (err)
 		goto err_free;
 
@@ -4057,7 +4758,11 @@ __mlx5e_add_fdb_flow(struct mlx5e_priv *
 		flow->esw_attr->counter_dev = priv->mdev;
 
 	if (is_flow_simple(flow)) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		err = mlx5e_tc_add_fdb_flow(priv, parse_attr, flow, extack);
+#else
+		err = mlx5e_tc_add_fdb_flow(priv, parse_attr, flow);
+#endif
 		if (err) {
 			if (!(err == -ENETUNREACH && mlx5_lag_is_multipath(in_mdev)))
 				goto err_free;
@@ -4068,16 +4773,20 @@ __mlx5e_add_fdb_flow(struct mlx5e_priv *
 		atomic_and(~MLX5E_TC_FLOW_SIMPLE, &flow->flags);
 	}
 
+#ifdef HAVE_TCF_TUNNEL_INFO
 	err = mlx5e_tc_update_and_init_done_fdb_flow(priv, flow);
 	if (err)
 		goto err_free;
+#endif
 
 	*__flow = flow;
 
 	return 0;
 
 err_parse_flow:
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	kfree(parse_attr->mod_hdr_actions);
+#endif
 	kvfree(parse_attr);
 err_free:
 	mlx5e_flow_put(priv, flow);
@@ -4169,14 +4878,18 @@ mlx5e_add_nic_flow(struct mlx5e_priv *pr
 		   u32 flow_flags,
 		   struct mlx5e_tc_flow **__flow)
 {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#endif
 	struct mlx5e_tc_flow_parse_attr *parse_attr;
 	struct mlx5e_tc_flow *flow;
 	int attr_size, err;
 
+#if defined(HAVE_TC_CLS_OFFLOAD_EXTACK) && defined(PRIO_CHAIN_SUPPORT)
 	/* multi-chain not supported for NIC rules */
 	if (!tc_cls_can_offload_and_chain0(priv->netdev, &f->common))
 		return -EOPNOTSUPP;
+#endif /* HAVE_TC_CLS_OFFLOAD_EXTACK && PRIO_CHAIN_SUPPORT */
 
 	flow_flags |= MLX5E_TC_FLOW_SIMPLE | MLX5E_TC_FLOW_NIC;
 	attr_size  = sizeof(struct mlx5_nic_flow_attr);
@@ -4189,17 +4902,27 @@ mlx5e_add_nic_flow(struct mlx5e_priv *pr
 	if (err)
 		goto err_free;
 
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	err = parse_tc_nic_actions(priv, f->exts, parse_attr, flow, extack);
+#else
+	err = parse_tc_nic_actions(priv, f->exts, parse_attr, flow);
+#endif
 	if (err)
 		goto err_free;
 
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	err = mlx5e_tc_add_nic_flow(priv, parse_attr, flow, extack);
+#else
+	err = mlx5e_tc_add_nic_flow(priv, parse_attr, flow);
+#endif
 	if (err)
 		goto err_free;
 
 	mlx5e_set_flow_flag_mb_before(flow, MLX5E_TC_FLOW_OFFLOADED |
 				      MLX5E_TC_FLOW_INIT_DONE);
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	kfree(parse_attr->mod_hdr_actions);
+#endif
 	kvfree(parse_attr);
 	*__flow = flow;
 
@@ -4207,7 +4930,9 @@ mlx5e_add_nic_flow(struct mlx5e_priv *pr
 
 err_free:
 	mlx5e_flow_put(priv, flow);
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	kfree(parse_attr->mod_hdr_actions);
+#endif
 	kvfree(parse_attr);
 out:
 	return err;
@@ -4225,9 +4950,10 @@ mlx5e_tc_add_flow(struct mlx5e_priv *pri
 
 	get_flags(flags, &flow_flags);
 
+#if defined(HAVE_TC_CLS_OFFLOAD_EXTACK) && defined(HAVE_TC_CLS_FLOWER_OFFLOAD_COMMON)
 	if (!tc_can_offload_extack(priv->netdev, f->common.extack))
 		return -EOPNOTSUPP;
-
+#endif
 	if (esw && esw->mode == SRIOV_OFFLOADS)
 		err = mlx5e_add_fdb_flow(priv, f, flow_flags, flow);
 	else
@@ -4239,15 +4965,23 @@ mlx5e_tc_add_flow(struct mlx5e_priv *pri
 int mlx5e_configure_flower(struct mlx5e_priv *priv,
 			   struct tc_cls_flower_offload *f, int flags)
 {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 	struct netlink_ext_ack *extack = f->common.extack;
+#endif
 	struct rhashtable *tc_ht = get_tc_ht(priv, flags);
 	struct mlx5e_tc_flow *flow;
 	int err = 0;
 
+#ifdef CONFIG_COMPAT_CLS_FLOWER_MOD
+	get_new_flags(priv, &flags);
+#endif
+
 	flow = rhashtable_lookup_fast(tc_ht, &f->cookie, tc_ht_params);
 	if (flow) {
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
 		NL_SET_ERR_MSG_MOD(extack,
 				   "flow cookie already exists, ignoring");
+#endif
 		netdev_warn_once(priv->netdev,
 				 "flow cookie %lx already exists, ignoring\n",
 				 f->cookie);
@@ -4272,17 +5006,24 @@ err_free:
 out:
 	return err;
 }
+#ifdef CONFIG_COMPAT_CLS_FLOWER_MOD
+EXPORT_SYMBOL(mlx5e_configure_flower);
+#endif
 
 #define DIRECTION_MASK (MLX5E_TC_INGRESS | MLX5E_TC_EGRESS)
 #define FLOW_DIRECTION_MASK (MLX5E_TC_FLOW_INGRESS | MLX5E_TC_FLOW_EGRESS)
 
 static bool same_flow_direction(struct mlx5e_tc_flow *flow, int flags)
 {
+#if !(defined(HAVE_NDO_SETUP_TC_4_PARAMS) || defined(HAVE_NDO_SETUP_TC_TAKES_CHAIN_INDEX))
 	if ((atomic_read(&flow->flags) & FLOW_DIRECTION_MASK) ==
 	    (flags & DIRECTION_MASK))
 		return true;
 
 	return false;
+#else
+	return true;
+#endif
 }
 
 static void mlx5e_flow_defered_put(struct rcu_head *head)
@@ -4317,7 +5058,11 @@ int mlx5e_delete_flower(struct mlx5e_pri
 
 	return 0;
 }
+#ifdef CONFIG_COMPAT_CLS_FLOWER_MOD
+EXPORT_SYMBOL(mlx5e_delete_flower);
+#endif
 
+#ifdef HAVE_TC_CLSFLOWER_STATS
 int mlx5e_stats_flower(struct mlx5e_priv *priv,
 		       struct tc_cls_flower_offload *f, int flags)
 {
@@ -4326,11 +5071,19 @@ int mlx5e_stats_flower(struct mlx5e_priv
 	struct mlx5_eswitch *peer_esw;
 	struct mlx5e_tc_flow *flow;
 	struct mlx5_fc *counter;
+#ifndef HAVE_TCF_EXTS_STATS_UPDATE
+	struct tc_action *a;
+	LIST_HEAD(actions);
+#endif
 	int err = 0;
 	u64 lastuse = 0;
 	u64 packets = 0;
 	u64 bytes = 0;
 
+#ifdef CONFIG_COMPAT_CLS_FLOWER_MOD
+	get_new_flags(priv, &flags);
+#endif
+
 	rcu_read_lock();
 	flow = mlx5e_flow_get(rhashtable_lookup(tc_ht, &f->cookie,
 						tc_ht_params));
@@ -4378,11 +5131,40 @@ int mlx5e_stats_flower(struct mlx5e_priv
 no_peer_counter:
 	mlx5_devcom_release_peer_data(devcom, MLX5_DEVCOM_ESW_OFFLOADS);
 out:
+#ifdef HAVE_TCF_EXTS_STATS_UPDATE
 	tcf_exts_stats_update(f->exts, bytes, packets, lastuse);
+#else
+	preempt_disable();
+
+#ifdef HAVE_TCF_EXTS_TO_LIST
+	tcf_exts_to_list(f->exts, &actions);
+	list_for_each_entry(a, &actions, list)
+#else
+	tc_for_each_action(a, f->exts)
+#endif
+#ifdef HAVE_TCF_ACTION_STATS_UPDATE
+	tcf_action_stats_update(a, bytes, packets, lastuse);
+#else
+	{
+		struct tcf_act_hdr *h = a->priv;
+
+		spin_lock(&h->tcf_lock);
+		h->tcf_tm.lastuse = max_t(u64, h->tcf_tm.lastuse, lastuse);
+		h->tcf_bstats.bytes += bytes;
+		h->tcf_bstats.packets += packets;
+		spin_unlock(&h->tcf_lock);
+	}
+#endif
+	preempt_enable();
+#endif
 errout:
 	mlx5e_flow_put(priv, flow);
 	return err;
 }
+#ifdef CONFIG_COMPAT_CLS_FLOWER_MOD
+EXPORT_SYMBOL(mlx5e_stats_flower);
+#endif
+#endif
 
 static void mlx5e_tc_hairpin_update_dead_peer(struct mlx5e_priv *priv,
 					      struct mlx5e_priv *peer_priv)
@@ -4429,15 +5211,19 @@ static int mlx5e_tc_netdev_event(struct
 
 	return NOTIFY_DONE;
 }
+#endif /* HAVE_TC_FLOWER_OFFLOAD */
 
 int mlx5e_tc_nic_init(struct mlx5e_priv *priv)
 {
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 	struct mlx5e_tc_table *tc = &priv->fs.tc;
 	int err;
 
 	mutex_init(&tc->t_lock);
 	spin_lock_init(&tc->mod_hdr_tbl_lock);
+#ifdef HAVE_TCF_PEDIT_TCFP_KEYS_EX
 	hash_init(tc->mod_hdr_tbl);
+#endif
 	spin_lock_init(&tc->hairpin_tbl_lock);
 	hash_init(tc->hairpin_tbl);
 
@@ -4453,8 +5239,12 @@ int mlx5e_tc_nic_init(struct mlx5e_priv
 	}
 
 	return err;
+#else
+	return 0;
+#endif
 }
 
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 static void _mlx5e_tc_del_flow(void *ptr, void *arg)
 {
 	struct mlx5e_tc_flow *flow = ptr;
@@ -4463,9 +5253,11 @@ static void _mlx5e_tc_del_flow(void *ptr
 	mlx5e_tc_del_flow(priv, flow);
 	kfree(flow);
 }
+#endif
 
 void mlx5e_tc_nic_cleanup(struct mlx5e_priv *priv)
 {
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 	struct mlx5e_tc_table *tc = &priv->fs.tc;
 
 	if (tc->netdevice_nb.notifier_call)
@@ -4478,10 +5270,12 @@ void mlx5e_tc_nic_cleanup(struct mlx5e_p
 		tc->t = NULL;
 	}
 	mutex_destroy(&tc->t_lock);
+#endif
 }
 
 int mlx5e_tc_esw_init(struct mlx5e_priv *priv)
 {
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 	struct rhashtable *tc_ht = get_tc_ht(priv, MLX5E_TC_ESW_OFFLOAD);
 	int err;
 
@@ -4498,33 +5292,44 @@ int mlx5e_tc_esw_init(struct mlx5e_priv
 err_tc_ht:
 	miniflow_cache_destroy(priv);
 	return err;
+#else
+	return 0;
+#endif
 }
 
 void mlx5e_tc_esw_cleanup(struct mlx5e_priv *priv)
 {
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 	struct rhashtable *tc_ht = get_tc_ht(priv, MLX5E_TC_ESW_OFFLOAD);
 
 	rhashtable_free_and_destroy(tc_ht, _mlx5e_tc_del_flow, NULL);
 	miniflow_cache_destroy(priv);
+#endif
 }
 
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 int mlx5e_tc_num_filters(struct mlx5e_priv *priv, int flags)
 {
 	struct rhashtable *tc_ht = get_tc_ht(priv, flags);
 
 	return atomic_read(&tc_ht->nelems);
 }
+#endif
 
 void mlx5e_tc_clean_fdb_peer_flows(struct mlx5_eswitch *esw)
 {
+#ifdef HAVE_TC_FLOWER_OFFLOAD
 	struct mlx5e_tc_flow *flow, *tmp;
 
 	list_for_each_entry_safe(flow, tmp, &esw->offloads.peer_flows, peer)
 		__mlx5e_tc_del_fdb_peer_flow(flow);
+#endif
 }
 
 void mlx5e_tc_reoffload_flows_work(struct mlx5_core_dev *mdev)
 {
+#ifdef HAVE_TC_FLOWER_OFFLOAD
+#ifdef HAVE_TCF_TUNNEL_INFO
 	struct mlx5_eswitch *esw = mdev->priv.eswitch;
 	struct mlx5e_rep_priv *rpriv;
 	struct mlx5e_tc_flow *flow, *tmp;
@@ -4535,7 +5340,13 @@ void mlx5e_tc_reoffload_flows_work(struc
 	list_for_each_entry_safe(flow, tmp, &rpriv->unready_flows, unready) {
 		if (!mlx5e_tc_add_fdb_flow(flow->priv,
 					   flow->esw_attr->parse_attr,
-					   flow, NULL))
+					   flow
+#ifdef HAVE_TC_CLS_OFFLOAD_EXTACK
+					   , NULL
+#endif
+					   ))
 			remove_unready_flow(flow);
 	}
+#endif
+#endif
 }
