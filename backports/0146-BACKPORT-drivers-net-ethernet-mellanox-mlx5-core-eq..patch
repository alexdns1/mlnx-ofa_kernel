From: Aya Levin <ayal@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/eq.c

Change-Id: I6f47e4f82e0b9acc9b1ec0ed2269ad0c0d942306
---
 drivers/net/ethernet/mellanox/mlx5/core/eq.c | 25 ++++++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/eq.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/eq.c
@@ -249,7 +249,11 @@ static void eq_pf_process(struct mlx5_eq
 			break;
 		}
 
+#ifdef dma_rmb
 		dma_rmb();
+#else
+		rmb();
+#endif
 		pf_eqe = &eqe->data.page_fault;
 		pfault->event_subtype = eqe->sub_type;
 		pfault->bytes_committed = be32_to_cpu(pf_eqe->bytes_committed);
@@ -472,7 +476,7 @@ int mlx5_core_page_fault_resume(struct m
 	return ret;
 }
 EXPORT_SYMBOL_GPL(mlx5_core_page_fault_resume);
-#endif
+#endif /* CONFIG_INFINIBAND_ON_DEMAND_PAGING */
 
 void mlx5_pcie_event_work(struct work_struct *work)
 {
@@ -631,7 +635,11 @@ static int mlx5_eq_int(struct notifier_b
 		 * Make sure we read EQ entry contents after we've
 		 * checked the ownership bit.
 		 */
+#ifdef dma_rmb
 		dma_rmb();
+#else
+		rmb();
+#endif
 
 		mlx5_core_dbg(eq->dev, "eqn %d, eqe type %s\n",
 			      eq->eqn, eqe_type_str(eqe->type));
@@ -739,9 +747,11 @@ static int mlx5_eq_int(struct notifier_b
 			mlx5_port_module_event(dev, eqe);
 			break;
 
+#if defined (HAVE_PTP_CLOCK_INFO_N_PINS) && defined (HAVE_PTP_CLOCK_INFO) && (defined (CONFIG_PTP_1588_CLOCK) || defined(CONFIG_PTP_1588_CLOCK_MODULE))
 		case MLX5_EVENT_TYPE_PPS_EVENT:
 			mlx5_pps_event(dev, eqe);
 			break;
+#endif
 
 		case MLX5_EVENT_TYPE_FPGA_ERROR:
 		case MLX5_EVENT_TYPE_FPGA_QP_ERROR:
@@ -829,7 +839,11 @@ static int vecidx_get_irqn(struct mlx5_c
 	if (mlx5_core_is_sf(dev))
 		parent_dev = mlx5_get_sf_dev_parent(dev);
 
+#ifdef HAVE_PCI_IRQ_API
 	return pci_irq_vector(parent_dev->pdev, vecidx);
+#else
+	return mlx5_get_msix_vec(parent_dev, vecidx);
+#endif
 }
 
 void mlx5_add_pci_to_irq_name(struct mlx5_core_dev *dev, const char *src_name,
@@ -1041,6 +1055,13 @@ int mlx5_eq_del_cq(struct mlx5_eq *eq, s
 	return 0;
 }
 
+#ifndef HAVE_PCI_IRQ_API
+u32 mlx5_get_msix_vec(struct mlx5_core_dev *dev, int vecidx)
+{
+	return dev->priv.msix_arr[vecidx].vector;
+}
+#endif
+
 int mlx5_eq_init(struct mlx5_core_dev *dev)
 {
 	int err;
@@ -1220,8 +1241,10 @@ void mlx5_core_eq_free_irqs(struct mlx5_
 	if (MLX5_CAP_GEN(dev, pg))
 		eq_free_irq(dev, &table->pfault_eq);
 #endif
+#ifdef HAVE_PCI_IRQ_API
 	if (!mlx5_core_is_sf(dev))
 		pci_free_irq_vectors(dev->pdev);
+#endif
 }
 
 void mlx5_core_eq_disable_irqs(struct mlx5_core_dev *dev)
