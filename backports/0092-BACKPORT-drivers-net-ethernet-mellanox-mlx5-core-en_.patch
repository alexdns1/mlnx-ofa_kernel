From: Valentine Fatiev <valentinef@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c

Change-Id: I389e99a446f0610991ef41bec66cb54259d00b03
---
 .../net/ethernet/mellanox/mlx5/core/en_arfs.c | 34 +++++++++++++++----
 1 file changed, 27 insertions(+), 7 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_arfs.c
@@ -30,6 +30,8 @@
  * SOFTWARE.
  */
 
+#ifndef HAVE_NET_FLOW_KEYS_H
+
 #include <linux/hash.h>
 #include <linux/mlx5/fs.h>
 #include <linux/ip.h>
@@ -70,7 +72,7 @@ struct arfs_rule {
 
 #define mlx5e_for_each_hash_arfs_rule(hn, tmp, hash, j) \
 	for (j = 0; j < ARFS_HASH_SIZE; j++) \
-		hlist_for_each_entry_safe(hn, tmp, &hash[j], hlist)
+		compat_hlist_for_each_entry_safe(hn, tmp, &hash[j], hlist)
 
 static enum mlx5e_traffic_types arfs_get_tt(enum arfs_type type)
 {
@@ -145,7 +147,11 @@ void mlx5e_arfs_destroy_tables(struct ml
 {
 	int i;
 
+#ifdef HAVE_NETDEV_HW_FEATURES
 	if (!(priv->netdev->hw_features & NETIF_F_NTUPLE))
+#else
+	if (true)
+#endif
 		return;
 
 	arfs_del_rules(priv);
@@ -327,7 +333,11 @@ int mlx5e_arfs_create_tables(struct mlx5
 	int err = 0;
 	int i;
 
+#ifdef HAVE_NETDEV_HW_FEATURES
 	if (!(priv->netdev->hw_features & NETIF_F_NTUPLE))
+#else
+	if (true)
+#endif
 		return 0;
 
 	spin_lock_init(&priv->fs.arfs.arfs_lock);
@@ -358,6 +368,8 @@ static void arfs_may_expire_flow(struct
 	int j;
 
 	HLIST_HEAD(del_list);
+	COMPAT_HL_NODE
+
 	spin_lock_bh(&priv->fs.arfs.arfs_lock);
 	mlx5e_for_each_arfs_rule(arfs_rule, htmp, priv->fs.arfs.arfs_tables, i, j) {
 		if (!work_pending(&arfs_rule->arfs_work) &&
@@ -371,7 +383,7 @@ static void arfs_may_expire_flow(struct
 		}
 	}
 	spin_unlock_bh(&priv->fs.arfs.arfs_lock);
-	hlist_for_each_entry_safe(arfs_rule, htmp, &del_list, hlist) {
+	compat_hlist_for_each_entry_safe(arfs_rule, htmp, &del_list, hlist) {
 		if (arfs_rule->rule)
 			mlx5_del_flow_rules(arfs_rule->rule);
 		hlist_del(&arfs_rule->hlist);
@@ -387,6 +399,8 @@ static void arfs_del_rules(struct mlx5e_
 	int j;
 
 	HLIST_HEAD(del_list);
+	COMPAT_HL_NODE
+
 	spin_lock_bh(&priv->fs.arfs.arfs_lock);
 	mlx5e_for_each_arfs_rule(rule, htmp, priv->fs.arfs.arfs_tables, i, j) {
 		hlist_del_init(&rule->hlist);
@@ -394,7 +408,7 @@ static void arfs_del_rules(struct mlx5e_
 	}
 	spin_unlock_bh(&priv->fs.arfs.arfs_lock);
 
-	hlist_for_each_entry_safe(rule, htmp, &del_list, hlist) {
+	compat_hlist_for_each_entry_safe(rule, htmp, &del_list, hlist) {
 		cancel_work_sync(&rule->arfs_work);
 		if (rule->rule)
 			mlx5_del_flow_rules(rule->rule);
@@ -639,9 +653,10 @@ static struct arfs_rule *arfs_find_rule(
 {
 	struct arfs_rule *arfs_rule;
 	struct hlist_head *head;
+	COMPAT_HL_NODE
 
 	head = arfs_hash_bucket(arfs_t, fk->ports.src, fk->ports.dst);
-	hlist_for_each_entry(arfs_rule, head, hlist) {
+	compat_hlist_for_each_entry(arfs_rule, head, hlist) {
 		if (arfs_cmp(&arfs_rule->tuple, fk))
 			return arfs_rule;
 	}
@@ -657,16 +672,21 @@ int mlx5e_rx_flow_steer(struct net_devic
 	struct arfs_table *arfs_t;
 	struct arfs_rule *arfs_rule;
 	struct flow_keys fk;
-
-	if (!skb_flow_dissect_flow_keys(skb, &fk, 0))
+#ifdef HAVE_SKB_FLOW_DISSECT_FLOW_KEYS_HAS_3_PARAMS
+	if (!skb_flow_dissect_flow_keys(skb, &fk , 0))
+#else
+	if (!skb_flow_dissect_flow_keys(skb, &fk))
+#endif
 		return -EPROTONOSUPPORT;
 
 	if (fk.basic.n_proto != htons(ETH_P_IP) &&
 	    fk.basic.n_proto != htons(ETH_P_IPV6))
 		return -EPROTONOSUPPORT;
 
+#ifdef HAVE_SK_BUFF_ENCAPSULATION
 	if (skb->encapsulation)
 		return -EPROTONOSUPPORT;
+#endif
 
 	arfs_t = arfs_get_table(arfs, fk.basic.ip_proto, fk.basic.n_proto);
 	if (!arfs_t)
@@ -691,4 +711,4 @@ int mlx5e_rx_flow_steer(struct net_devic
 	spin_unlock_bh(&arfs->arfs_lock);
 	return arfs_rule->filter_id;
 }
-
+#endif /* HAVE_NET_FLOW_KEYS_H */
