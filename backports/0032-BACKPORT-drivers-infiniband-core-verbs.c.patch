From: Feras Daoud <ferasda@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/verbs.c

Change-Id: Ica18d09f7f94bf37d4961fab5d39faad29683d6c
---
 drivers/infiniband/core/verbs.c | 50 ++++++++++++++++++++++++++++++++++++++---
 1 file changed, 47 insertions(+), 3 deletions(-)

--- a/drivers/infiniband/core/verbs.c
+++ b/drivers/infiniband/core/verbs.c
@@ -51,11 +51,10 @@
 #include <rdma/ib_addr.h>
 #include <rdma/rw.h>
 #include <rdma/lag.h>
-
 #include "core_priv.h"
+#ifdef HAVE_TRACE_EVENTS_RDMA_CORE_HEADER
 #include <trace/events/rdma_core.h>
-
-#include <trace/events/rdma_core.h>
+#endif
 
 static int ib_resolve_eth_dmac(struct ib_device *device,
 			       struct rdma_ah_attr *ah_attr);
@@ -1789,7 +1788,11 @@ int ib_get_eth_speed(struct ib_device *d
 	int rc;
 	u32 netdev_speed;
 	struct net_device *netdev;
+#ifdef HAVE___ETHTOOL_GET_LINK_KSETTINGS
 	struct ethtool_link_ksettings lksettings;
+#else
+	struct ethtool_cmd lksettings;
+#endif
 
 	if (rdma_port_get_link_layer(dev, port_num) != IB_LINK_LAYER_ETHERNET)
 		return -EINVAL;
@@ -1799,13 +1802,21 @@ int ib_get_eth_speed(struct ib_device *d
 		return -ENODEV;
 
 	rtnl_lock();
+#ifdef HAVE___ETHTOOL_GET_LINK_KSETTINGS
 	rc = __ethtool_get_link_ksettings(netdev, &lksettings);
+#else
+	rc = __ethtool_get_settings(netdev, &lksettings);
+#endif
 	rtnl_unlock();
 
 	dev_put(netdev);
 
 	if (!rc) {
+#ifdef HAVE___ETHTOOL_GET_LINK_KSETTINGS
 		netdev_speed = lksettings.base.speed;
+#else
+		netdev_speed = ethtool_cmd_speed(&lksettings);
+#endif
 	} else {
 		netdev_speed = SPEED_1000;
 		pr_warn("%s speed is unknown, defaulting to %d\n", netdev->name,
@@ -2081,7 +2092,9 @@ int ib_dereg_mr_user(struct ib_mr *mr, s
 	struct ib_sig_attrs *sig_attrs = mr->sig_attrs;
 	int ret;
 
+#ifdef HAVE_TRACE_EVENTS_RDMA_CORE_HEADER
 	trace_mr_dereg(mr);
+#endif
 	rdma_restrack_del(&mr->res);
 	ret = mr->device->ops.dereg_mr(mr, udata);
 	if (!ret) {
@@ -2139,7 +2152,9 @@ struct ib_mr *ib_alloc_mr_user(struct ib
 	}
 
 out:
+#ifdef HAVE_TRACE_EVENTS_RDMA_CORE_HEADER
 	trace_mr_alloc(pd, mr_type, max_num_sg, mr);
+#endif
 	return mr;
 }
 EXPORT_SYMBOL(ib_alloc_mr_user);
@@ -2199,7 +2214,9 @@ struct ib_mr *ib_alloc_mr_integrity(stru
 	mr->sig_attrs = sig_attrs;
 
 out:
+#ifdef HAVE_TRACE_EVENTS_RDMA_CORE_HEADER
 	trace_mr_integ_alloc(pd, max_num_data_sg, max_num_meta_sg, mr);
+#endif
 	return mr;
 }
 EXPORT_SYMBOL(ib_alloc_mr_integrity);
@@ -2513,6 +2530,7 @@ int ib_check_mr_status(struct ib_mr *mr,
 }
 EXPORT_SYMBOL(ib_check_mr_status);
 
+#ifdef HAVE_NDO_SET_VF_MAC
 int ib_set_vf_link_state(struct ib_device *device, int vf, u8 port,
 			 int state)
 {
@@ -2552,6 +2570,7 @@ int ib_set_vf_guid(struct ib_device *dev
 	return device->ops.set_vf_guid(device, vf, port, guid, type);
 }
 EXPORT_SYMBOL(ib_set_vf_guid);
+#endif /* HAVE_NDO_SET_VF_MAC */
 
 int ib_get_vf_guid(struct ib_device *device, int vf, u8 port,
 		   struct ifla_vf_guid *node_guid,
@@ -2836,7 +2855,9 @@ void ib_drain_sq(struct ib_qp *qp)
 		qp->device->ops.drain_sq(qp);
 	else
 		__ib_drain_sq(qp);
+#ifdef HAVE_TRACE_EVENTS_RDMA_CORE_HEADER
 	trace_cq_drain_complete(qp->send_cq);
+#endif
 }
 EXPORT_SYMBOL(ib_drain_sq);
 
@@ -2865,7 +2886,9 @@ void ib_drain_rq(struct ib_qp *qp)
 		qp->device->ops.drain_rq(qp);
 	else
 		__ib_drain_rq(qp);
+#ifdef HAVE_TRACE_EVENTS_RDMA_CORE_HEADER
 	trace_cq_drain_complete(qp->recv_cq);
+#endif
 }
 EXPORT_SYMBOL(ib_drain_rq);
 
@@ -2975,3 +2998,24 @@ bool __rdma_block_iter_next(struct ib_bl
 	return true;
 }
 EXPORT_SYMBOL(__rdma_block_iter_next);
+
+#ifndef HAVE_NET_DEVICE_NEEDS_FREE_NETDEV
+int rdma_uninit_netdev(struct ib_device *device, struct net_device *netdev,
+		       u8 port_num, enum rdma_netdev_t type, int force_fail)
+{
+	struct rdma_netdev_alloc_params params;
+	int rc;
+
+	if (!device->ops.rdma_netdev_get_params || force_fail)
+		return -EOPNOTSUPP;
+
+	rc = device->ops.rdma_netdev_get_params(device, port_num, type, &params);
+	if (rc)
+		return rc;
+
+	params.uninitialize_rdma_netdev(netdev);
+
+	return rc;
+}
+EXPORT_SYMBOL(rdma_uninit_netdev);
+#endif
