From: Mikhael Goikhman <migo@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en_rx.c

Change-Id: Ibe79549651c48be8dd1dacca33898a14f48bdfcf
---
 drivers/net/ethernet/mellanox/mlx5/core/en_rx.c | 347 ++++++++++++++++++++++--
 1 file changed, 323 insertions(+), 24 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_rx.c
@@ -36,7 +36,9 @@
 #include <linux/tcp.h>
 #include <linux/indirect_call_wrapper.h>
 #include <net/ip6_checksum.h>
+#ifdef HAVE_NET_PAGE_POOL_H
 #include <net/page_pool.h>
+#endif
 #include <net/inet_ecn.h>
 #include "en.h"
 #include "en_tc.h"
@@ -48,6 +50,7 @@
 #include "en_accel/tls_rxtx.h"
 #include "lib/clock.h"
 #include "en/xdp.h"
+#include "en/txrx.h"
 #include "en/xsk/rx.h"
 #include "en/health.h"
 #include "en/txrx.h"
@@ -306,7 +309,11 @@ static inline bool mlx5e_rx_cache_extend
 
 static inline bool mlx5e_page_is_reserved(struct page *page)
 {
+#ifdef HAVE_NUMA_MEM_ID
 	return page_is_pfmemalloc(page) || page_to_nid(page) != numa_mem_id();
+#else
+	return page_is_pfmemalloc(page) || page_to_nid(page) != numa_node_id();
+#endif
 }
 
 static inline bool mlx5e_rx_cache_put(struct mlx5e_rq *rq,
@@ -365,9 +372,11 @@ static inline bool mlx5e_rx_cache_get(st
        stats->cache_reuse++;
 	*dma_info = cache->page_cache[cache->head--];
 
+#ifdef HAVE_IOVA_RCACHE
        dma_sync_single_for_device(rq->pdev, dma_info->addr,
        			   PAGE_SIZE,
        			   DMA_FROM_DEVICE);
+#endif
 
 	if (unlikely(page_ref_count(dma_info->page) <= PAGE_REF_THRSD))
 		page_ref_elev(dma_info);
@@ -384,21 +393,36 @@ err_no_page:
 static inline int mlx5e_page_alloc_pool(struct mlx5e_rq *rq,
 					struct mlx5e_dma_info *dma_info)
 {
-	if (mlx5e_rx_cache_get(rq, dma_info))
-		return 0;
+#ifdef HAVE_IOVA_RCACHE
+       if (mlx5e_rx_cache_get(rq, dma_info))
+       	return 0;
+#else
+	if (!mlx5e_rx_cache_get(rq, dma_info)) {
+#endif
 
-	dma_info->page = page_pool_dev_alloc_pages(rq->page_pool);
+#ifdef HAVE_NET_PAGE_POOL_H
+       dma_info->page = page_pool_dev_alloc_pages(rq->page_pool);
+#else
+	dma_info->page = dev_alloc_page();
+#endif
 	if (unlikely(!dma_info->page))
 		return -ENOMEM;
 
 	dma_info->refcnt_bias = 0;
 	page_ref_elev(dma_info);
+#ifndef HAVE_IOVA_RCACHE
+	}
+#endif
 
 	dma_info->addr = dma_map_page(rq->pdev, dma_info->page, 0,
 				      PAGE_SIZE, rq->buff.map_dir);
 	if (unlikely(dma_mapping_error(rq->pdev, dma_info->addr))) {
-		page_ref_sub(dma_info->page, dma_info->refcnt_bias);
-		page_pool_recycle_direct(rq->page_pool, dma_info->page);
+#ifdef HAVE_NET_PAGE_POOL_H
+       	page_ref_sub(dma_info->page, dma_info->refcnt_bias);
+       	page_pool_recycle_direct(rq->page_pool, dma_info->page);
+#else
+		mlx5e_put_page(dma_info);
+#endif
 		dma_info->page = NULL;
 		return -ENOMEM;
 	}
@@ -409,9 +433,11 @@ static inline int mlx5e_page_alloc_pool(
 static inline int mlx5e_page_alloc(struct mlx5e_rq *rq,
 				   struct mlx5e_dma_info *dma_info)
 {
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 	if (rq->umem)
 		return mlx5e_xsk_page_alloc_umem(rq, dma_info);
 	else
+#endif
 		return mlx5e_page_alloc_pool(rq, dma_info);
 }
 
@@ -424,24 +450,47 @@ void mlx5e_page_release_dynamic(struct m
 				struct mlx5e_dma_info *dma_info,
 				bool recycle)
 {
+#ifndef HAVE_IOVA_RCACHE
+	mlx5e_page_dma_unmap(rq, dma_info);
+#endif
+#ifdef HAVE_NET_PAGE_POOL_H
 	if (likely(recycle)) {
 		if (mlx5e_rx_cache_put(rq, dma_info))
 			return;
 
+#ifdef HAVE_IOVA_RCACHE
 		mlx5e_page_dma_unmap(rq, dma_info);
+#endif
 		page_ref_sub(dma_info->page, dma_info->refcnt_bias);
 		page_pool_recycle_direct(rq->page_pool, dma_info->page);
 	} else {
+#ifdef HAVE_IOVA_RCACHE
 		mlx5e_page_dma_unmap(rq, dma_info);
+#endif
+#ifdef HAVE_PAGE_POOL_RELEASE_PAGE
+		/* This call to page_pool_release_page should be part of
+		 * the base code, not backport, in the next rebase.
+		 */
 		page_pool_release_page(rq->page_pool, dma_info->page);
+#endif
 		mlx5e_put_page(dma_info);
 	}
+#else
+	if (likely(recycle) && mlx5e_rx_cache_put(rq, dma_info))
+		return;
+
+#ifdef HAVE_IOVA_RCACHE
+	mlx5e_page_dma_unmap(rq, dma_info);
+#endif
+	mlx5e_put_page(dma_info);
+#endif
 }
 
 static inline void mlx5e_page_release(struct mlx5e_rq *rq,
 				      struct mlx5e_dma_info *dma_info,
 				      bool recycle)
 {
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 	if (rq->umem)
 		/* The `recycle` parameter is ignored, and the page is always
 		 * put into the Reuse Ring, because there is no way to return
@@ -449,6 +498,7 @@ static inline void mlx5e_page_release(st
 		 */
 		mlx5e_xsk_page_release(rq, dma_info);
 	else
+#endif
 		mlx5e_page_release_dynamic(rq, dma_info, recycle);
 }
 
@@ -529,12 +579,14 @@ static int mlx5e_alloc_rx_wqes(struct ml
 	int err;
 	int i;
 
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 	if (rq->umem) {
 		int pages_desired = wqe_bulk << rq->wqe.info.log_num_frags;
 
 		if (unlikely(!mlx5e_xsk_pages_enough_umem(rq, pages_desired)))
 			return -ENOMEM;
 	}
+#endif
 
 	for (i = 0; i < wqe_bulk; i++) {
 		struct mlx5e_rx_wqe_cyc *wqe = mlx5_wq_cyc_get_wqe(wq, ix + i);
@@ -597,6 +649,7 @@ static void mlx5e_mpwqe_page_release(str
 static void
 mlx5e_free_rx_mpwqe(struct mlx5e_rq *rq, struct mlx5e_mpw_info *wi, bool recycle)
 {
+#ifdef HAVE_XDP_BUFF
 	bool no_xdp_xmit;
 	struct mlx5e_dma_info *dma_info = wi->umr.dma_info;
 	int i;
@@ -611,6 +664,13 @@ mlx5e_free_rx_mpwqe(struct mlx5e_rq *rq,
 	for (i = 0; i < MLX5_MPWRQ_PAGES_PER_WQE; i++)
 		if (no_xdp_xmit || !test_bit(i, wi->xdp_xmit_bitmap))
 			mlx5e_mpwqe_page_release(rq, &dma_info[i], recycle);
+#else
+	struct mlx5e_dma_info *dma_info = &wi->umr.dma_info[0];
+	int i;
+
+	for (i = 0; i < MLX5_MPWRQ_PAGES_PER_WQE; i++, dma_info++)
+		mlx5e_page_release(rq, dma_info, recycle);
+#endif
 }
 
 static void mlx5e_post_rx_mpwqe(struct mlx5e_rq *rq, u8 n)
@@ -624,7 +684,11 @@ static void mlx5e_post_rx_mpwqe(struct m
 	} while (--n);
 
 	/* ensure wqes are visible to device before updating doorbell record */
+#ifdef dma_wmb
 	dma_wmb();
+#else
+	wmb();
+#endif
 
 	mlx5_wq_ll_update_db_record(wq);
 
@@ -643,11 +707,13 @@ static int mlx5e_alloc_rx_mpwqe(struct m
 	int err;
 	int i;
 
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 	if (rq->umem &&
 	    unlikely(!mlx5e_xsk_pages_enough_umem(rq, MLX5_MPWRQ_PAGES_PER_WQE))) {
 		err = -ENOMEM;
 		goto err;
 	}
+#endif
 
 	pi = mlx5e_icosq_get_next_pi(sq, MLX5E_UMR_WQEBBS);
 	umr_wqe = mlx5_wq_cyc_get_wqe(wq, pi);
@@ -660,7 +726,9 @@ static int mlx5e_alloc_rx_mpwqe(struct m
 		umr_wqe->inline_mtts[i].ptag = cpu_to_be64(dma_info->addr | MLX5_EN_WR);
 	}
 
+#ifdef HAVE_XDP_BUFF
 	bitmap_zero(wi->xdp_xmit_bitmap, MLX5_MPWRQ_PAGES_PER_WQE);
+#endif
 	wi->consumed_strides = 0;
 
 	umr_wqe->ctrl.opmod_idx_opcode =
@@ -686,7 +754,9 @@ err_unmap:
 		mlx5e_mpwqe_page_release(rq, dma_info, true);
 	}
 
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 err:
+#endif
 	rq->stats->buff_alloc_err++;
 
 	return err;
@@ -726,7 +796,11 @@ bool mlx5e_post_rx_wqes(struct mlx5e_rq
 	} while (mlx5_wq_cyc_missing(wq) >= wqe_bulk);
 
 	/* ensure wqes are visible to device before updating doorbell record */
+#ifdef dma_wmb
 	dma_wmb();
+#else
+	wmb();
+#endif
 
 	mlx5_wq_cyc_update_db_record(wq);
 
@@ -748,7 +822,7 @@ void mlx5e_free_icosq_descs(struct mlx5e
 		ci = mlx5_wq_cyc_ctr2ix(&sq->wq, sqcc);
 		wi = &sq->db.wqe_info[ci];
 		sqcc += wi->num_wqebbs;
-#ifdef CONFIG_MLX5_EN_TLS
+#if defined(HAVE_KTLS_RX_SUPPORT) && defined (CONFIG_MLX5_EN_TLS)
 		switch (wi->wqe_type) {
 		case MLX5E_ICOSQ_WQE_SET_PSV_TLS:
 			mlx5e_ktls_handle_ctx_completion(wi);
@@ -817,7 +891,7 @@ int mlx5e_poll_ico_cq(struct mlx5e_cq *c
 				break;
 			case MLX5E_ICOSQ_WQE_NOP:
 				break;
-#ifdef CONFIG_MLX5_EN_TLS
+#if defined(HAVE_KTLS_RX_SUPPORT) && defined (CONFIG_MLX5_EN_TLS)
 			case MLX5E_ICOSQ_WQE_UMR_TLS:
 				break;
 			case MLX5E_ICOSQ_WQE_SET_PSV_TLS:
@@ -970,15 +1044,21 @@ static void mlx5e_lro_update_hdr(struct
 	}
 }
 
+#ifdef HAVE_NETIF_F_RXHASH
 static inline void mlx5e_skb_set_hash(struct mlx5_cqe64 *cqe,
 				      struct sk_buff *skb)
 {
+#ifdef HAVE_SKB_SET_HASH
 	u8 cht = cqe->rss_hash_type;
 	int ht = (cht & CQE_RSS_HTYPE_L4) ? PKT_HASH_TYPE_L4 :
 		 (cht & CQE_RSS_HTYPE_IP) ? PKT_HASH_TYPE_L3 :
 					    PKT_HASH_TYPE_NONE;
 	skb_set_hash(skb, be32_to_cpu(cqe->rss_hash_result), ht);
+#else
+	skb->rxhash = be32_to_cpu(cqe->rss_hash_result);
+#endif
 }
+#endif
 
 static inline bool is_last_ethertype_ip(struct sk_buff *skb, int *network_depth,
 					__be16 *proto)
@@ -1007,7 +1087,11 @@ static inline void mlx5e_enable_ecn(stru
 
 	ip = skb->data + network_depth;
 	rc = ((proto == htons(ETH_P_IP)) ? IP_ECN_set_ce((struct iphdr *)ip) :
+#ifdef HAVE_IP6_SET_CE_2_PARAMS
 					 IP6_ECN_set_ce(skb, (struct ipv6hdr *)ip));
+#else
+					 IP6_ECN_set_ce((struct ipv6hdr *)ip));
+#endif
 
 	rq->stats->ecn_mark += !!rc;
 }
@@ -1155,8 +1239,12 @@ csum_unnecessary:
 		   (cqe->hds_ip_ext & CQE_L4_OK))) {
 		skb->ip_summed = CHECKSUM_UNNECESSARY;
 		if (cqe_is_tunneled(cqe)) {
-			skb->csum_level = 1;
-			skb->encapsulation = 1;
+#ifdef HAVE_SK_BUFF_CSUM_LEVEL
+       		skb->csum_level = 1;
+#endif
+#ifdef HAVE_SK_BUFF_ENCAPSULATION
+       		skb->encapsulation = 1;
+#endif
 			stats->csum_unnecessary_inner++;
 			return;
 		}
@@ -1178,11 +1266,17 @@ static inline void mlx5e_build_rx_skb(st
 	u8 lro_num_seg = be32_to_cpu(cqe->srqn) >> 24;
 	struct mlx5e_rq_stats *stats = rq->stats;
 	struct net_device *netdev = rq->netdev;
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	struct mlx5e_priv *priv = netdev_priv(netdev);
+	u8 l4_hdr_type;
+#endif
 
 	skb->mac_len = ETH_HLEN;
 
+#ifdef HAVE_TLS_OFFLOAD_RX_RESYNC_REQUEST
 	if (unlikely(mlx5e_accel_is_tls(cqe, skb)))
 		mlx5e_tls_handle_rx_skb(rq, skb, cqe, &cqe_bcnt);
+#endif
 
 	if (unlikely(mlx5_ipsec_is_rx_flow(cqe)))
 		mlx5e_ipsec_offload_handle_rx_skb(netdev, skb, cqe);
@@ -1196,6 +1290,16 @@ static inline void mlx5e_build_rx_skb(st
 		stats->packets += lro_num_seg - 1;
 		stats->lro_packets++;
 		stats->lro_bytes += cqe_bcnt;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 10, 0)
+		/* Flush GRO to avoid OOO packets, since GSO bypasses the
+		 * GRO queue. This was fixed in dev_gro_receive() in kernel 4.10
+		 */
+#ifdef NAPI_GRO_FLUSH_2_PARAMS
+		napi_gro_flush(rq->cq.napi, false);
+#else
+		napi_gro_flush(rq->cq.napi);
+#endif
+#endif
 	}
 
 	if (unlikely(mlx5e_rx_hw_stamp(rq->tstamp)))
@@ -1204,18 +1308,33 @@ static inline void mlx5e_build_rx_skb(st
 
 	skb_record_rx_queue(skb, rq->ix);
 
+#ifdef HAVE_NETIF_F_RXHASH
 	if (likely(netdev->features & NETIF_F_RXHASH))
 		mlx5e_skb_set_hash(cqe, skb);
+#endif
 
 	if (cqe_has_vlan(cqe)) {
+#ifdef HAVE_3_PARAMS_FOR_VLAN_HWACCEL_PUT_TAG
 		__vlan_hwaccel_put_tag(skb, htons(ETH_P_8021Q),
 				       be16_to_cpu(cqe->vlan_info));
+#else
+		__vlan_hwaccel_put_tag(skb, be16_to_cpu(cqe->vlan_info));
+#endif
 		stats->removed_vlan_packets++;
 	}
 
 	skb->mark = be32_to_cpu(cqe->sop_drop_qpn) & MLX5E_TC_FLOW_ID_MASK;
 
+#ifndef CONFIG_COMPAT_LRO_ENABLED_IPOIB
 	mlx5e_handle_csum(netdev, cqe, rq, skb, !!lro_num_seg);
+#else
+	l4_hdr_type = get_cqe_l4_hdr_type(cqe);
+	mlx5e_handle_csum(netdev, cqe, rq, skb,
+			  !!lro_num_seg ||
+			  (IS_SW_LRO(&priv->channels.params) &&
+			  (l4_hdr_type != CQE_L4_HDR_TYPE_NONE) &&
+			  (l4_hdr_type != CQE_L4_HDR_TYPE_UDP)));
+#endif
 	/* checking CE bit in cqe - MSB in ml_path field */
 	if (unlikely(cqe->ml_path & MLX5E_CE_BIT_MASK))
 		mlx5e_enable_ecn(rq, skb);
@@ -1241,6 +1360,42 @@ static inline void mlx5e_complete_rx_cqe
 	}
 }
 
+#ifndef HAVE_BUILD_SKB
+static inline struct sk_buff *mlx5e_compat_build_skb(struct mlx5e_rq *rq,
+						struct page *page,
+						u32 cqe_bcnt,
+						unsigned int offset)
+{
+	u16 headlen = min_t(u32, MLX5E_RX_MAX_HEAD, cqe_bcnt);
+	u32 frag_size = cqe_bcnt - headlen;
+	struct sk_buff *skb;
+	void *head_ptr = page_address(page) + offset + rq->buff.headroom;
+
+	skb = netdev_alloc_skb(rq->netdev, headlen + rq->buff.headroom);
+	if (unlikely(!skb))
+		return NULL;
+
+	if (frag_size) {
+		u32 frag_offset = offset + rq->buff.headroom + headlen;
+		unsigned int truesize =	SKB_TRUESIZE(frag_size);
+
+		skb_add_rx_frag(skb, skb_shinfo(skb)->nr_frags,
+				page, frag_offset,
+				frag_size, truesize);
+	}
+
+	/* copy header */
+	skb_reserve(skb, rq->buff.headroom);
+	skb_copy_to_linear_data(skb, head_ptr, headlen);
+
+	/* skb linear part was allocated with headlen and aligned to long */
+	skb->tail += headlen;
+	skb->len  += headlen;
+	return skb;
+}
+#endif
+
+#ifdef HAVE_BUILD_SKB
 static inline
 struct sk_buff *mlx5e_build_linear_skb(struct mlx5e_rq *rq, void *va,
 				       u32 frag_size, u16 headroom,
@@ -1258,6 +1413,7 @@ struct sk_buff *mlx5e_build_linear_skb(s
 
 	return skb;
 }
+#endif
 
 struct sk_buff *
 mlx5e_skb_from_cqe_linear(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
@@ -1267,7 +1423,9 @@ mlx5e_skb_from_cqe_linear(struct mlx5e_r
 	u16 rx_headroom = rq->buff.headroom;
 	struct sk_buff *skb;
 	void *va, *data;
+#ifdef HAVE_XDP_BUFF
 	bool consumed;
+#endif
 	u32 frag_size;
 
 	va             = page_address(di->page) + wi->offset;
@@ -1279,17 +1437,26 @@ mlx5e_skb_from_cqe_linear(struct mlx5e_r
 	prefetchw(va); /* xdp_frame data area */
 	prefetch(data);
 
-	rcu_read_lock();
-	consumed = mlx5e_xdp_handle(rq, di, va, &rx_headroom, &cqe_bcnt, false);
-	rcu_read_unlock();
-	if (consumed)
-		return NULL; /* page/packet was consumed by XDP */
+#ifdef HAVE_XDP_BUFF
+       rcu_read_lock();
+       consumed = mlx5e_xdp_handle(rq, di, va, &rx_headroom, &cqe_bcnt, false);
+       rcu_read_unlock();
+       if (consumed)
+       	return NULL; /* page/packet was consumed by XDP */
+#endif
 
-	skb = mlx5e_build_linear_skb(rq, va, frag_size, rx_headroom, cqe_bcnt);
+#ifdef HAVE_BUILD_SKB
+       skb = mlx5e_build_linear_skb(rq, va, frag_size, rx_headroom, cqe_bcnt);
+#else
+	skb = mlx5e_compat_build_skb(rq, di->page, cqe_bcnt, wi->offset);
+#endif
 	if (unlikely(!skb))
 		return NULL;
 
 	/* queue up for recycling/reuse */
+#ifndef HAVE_BUILD_SKB
+	if (skb_shinfo(skb)->nr_frags)
+#endif
 	di->refcnt_bias--;
 
 	return skb;
@@ -1309,7 +1476,11 @@ mlx5e_skb_from_cqe_nonlinear(struct mlx5
 	/* XDP is not supported in this configuration, as incoming packets
 	 * might spread among multiple pages.
 	 */
+#ifdef HAVE_NAPI_ALLOC_SKB
 	skb = napi_alloc_skb(rq->cq.napi,
+#else
+	skb = netdev_alloc_skb_ip_align(rq->netdev,
+#endif
 			     ALIGN(MLX5E_RX_MAX_HEAD, sizeof(long)));
 	if (unlikely(!skb)) {
 		rq->stats->buff_alloc_err++;
@@ -1351,6 +1522,9 @@ static void trigger_report(struct mlx5e_
 void mlx5e_handle_rx_cqe(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
 			 bool xmit_more)
 {
+#if defined(HAVE_VLAN_GRO_RECEIVE) || defined(HAVE_VLAN_HWACCEL_RX) || defined(CONFIG_COMPAT_LRO_ENABLED_IPOIB)
+	struct mlx5e_priv *priv = netdev_priv(rq->netdev);
+#endif
 	struct mlx5_wq_cyc *wq = &rq->wqe.wq;
 	struct mlx5e_wqe_frag_info *wi;
 	struct sk_buff *skb;
@@ -1384,6 +1558,31 @@ void mlx5e_handle_rx_cqe(struct mlx5e_rq
 
 	mlx5e_complete_rx_cqe(rq, cqe, cqe_bcnt, skb);
 	mlx5e_set_skb_driver_xmit_more(skb, rq, xmit_more);
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	if (IS_SW_LRO(&priv->channels.params))
+#if defined(HAVE_VLAN_GRO_RECEIVE) || defined(HAVE_VLAN_HWACCEL_RX)
+		if (priv->channels.params.vlan_grp && cqe_has_vlan(cqe))
+			lro_vlan_hwaccel_receive_skb(&rq->sw_lro->lro_mgr,
+						     skb, priv->channels.params.vlan_grp,
+						     be16_to_cpu(cqe->vlan_info),
+						     NULL);
+		else
+#endif
+		lro_receive_skb(&rq->sw_lro->lro_mgr, skb, NULL);
+	else
+#endif
+#if defined(HAVE_VLAN_GRO_RECEIVE) || defined(HAVE_VLAN_HWACCEL_RX)
+                if (priv->channels.params.vlan_grp && cqe_has_vlan(cqe))
+#ifdef HAVE_VLAN_GRO_RECEIVE
+                        vlan_gro_receive(rq->cq.napi, priv->channels.params.vlan_grp,
+                                         be16_to_cpu(cqe->vlan_info),
+                                         skb);
+#else
+                        vlan_hwaccel_receive_skb(skb, priv->channels.params.vlan_grp,
+                                        be16_to_cpu(cqe->vlan_info));
+#endif
+		else
+#endif
 	napi_gro_receive(rq->cq.napi, skb);
 
 free_wqe:
@@ -1396,10 +1595,14 @@ wq_cyc_pop:
 void mlx5e_handle_rx_cqe_rep(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
 			     bool xmit_more)
 {
-	struct net_device *netdev = rq->netdev;
-	struct mlx5e_priv *priv = netdev_priv(netdev);
-	struct mlx5e_rep_priv *rpriv  = priv->ppriv;
-	struct mlx5_eswitch_rep *rep = rpriv->rep;
+#if defined(HAVE_SKB_VLAN_POP) || defined(HAVE_VLAN_GRO_RECEIVE) || defined(HAVE_VLAN_HWACCEL_RX)
+       struct net_device *netdev = rq->netdev;
+       struct mlx5e_priv *priv = netdev_priv(netdev);
+#ifdef HAVE_SKB_VLAN_POP
+       struct mlx5e_rep_priv *rpriv  = priv->ppriv;
+       struct mlx5_eswitch_rep *rep = rpriv->rep;
+#endif
+#endif
 	struct mlx5e_tc_update_priv tc_priv = {};
 	struct mlx5_wq_cyc *wq = &rq->wqe.wq;
 	struct mlx5e_wqe_frag_info *wi;
@@ -1430,8 +1633,23 @@ void mlx5e_handle_rx_cqe_rep(struct mlx5
 
 	mlx5e_complete_rx_cqe(rq, cqe, cqe_bcnt, skb);
 
-	if (rep->vlan && skb_vlan_tag_present(skb))
-		skb_vlan_pop(skb);
+#ifdef HAVE_SKB_VLAN_POP
+       if (rep->vlan && skb_vlan_tag_present(skb))
+       	skb_vlan_pop(skb);
+#endif
+
+#if defined(HAVE_VLAN_GRO_RECEIVE) || defined(HAVE_VLAN_HWACCEL_RX)
+	if (priv->channels.params.vlan_grp && cqe_has_vlan(cqe))
+#ifdef HAVE_VLAN_GRO_RECEIVE
+		vlan_gro_receive(rq->cq.napi, priv->channels.params.vlan_grp,
+				 be16_to_cpu(cqe->vlan_info),
+				 skb);
+#else
+	vlan_hwaccel_receive_skb(skb, priv->channels.params.vlan_grp,
+				 be16_to_cpu(cqe->vlan_info));
+#endif
+	else
+#endif
 
 	if (!mlx5e_rep_tc_update_skb(cqe, skb, &tc_priv))
 		goto free_wqe;
@@ -1518,7 +1736,11 @@ mlx5e_skb_from_cqe_mpwrq_nonlinear(struc
 	struct mlx5e_dma_info *head_di = di;
 	struct sk_buff *skb;
 
+#ifdef HAVE_NAPI_ALLOC_SKB
 	skb = napi_alloc_skb(rq->cq.napi,
+#else
+	skb = netdev_alloc_skb_ip_align(rq->netdev,
+#endif
 			     ALIGN(MLX5E_RX_MAX_HEAD, sizeof(long)));
 	if (unlikely(!skb)) {
 		rq->stats->buff_alloc_err++;
@@ -1563,7 +1785,9 @@ mlx5e_skb_from_cqe_mpwrq_linear(struct m
 	struct sk_buff *skb;
 	void *va, *data;
 	u32 frag_size;
-	bool consumed;
+#ifdef HAVE_XDP_BUFF
+       bool consumed;
+#endif
 
 	/* Check packet size. Note LRO doesn't use linear SKB */
 	if (unlikely(cqe_bcnt > rq->hw_mtu)) {
@@ -1580,6 +1804,7 @@ mlx5e_skb_from_cqe_mpwrq_linear(struct m
 	prefetchw(va); /* xdp_frame data area */
 	prefetch(data);
 
+#ifdef HAVE_XDP_BUFF
 	rcu_read_lock();
 	consumed = mlx5e_xdp_handle(rq, di, va, &rx_headroom, &cqe_bcnt32, false);
 	rcu_read_unlock();
@@ -1588,12 +1813,20 @@ mlx5e_skb_from_cqe_mpwrq_linear(struct m
 			__set_bit(page_idx, wi->xdp_xmit_bitmap); /* non-atomic */
 		return NULL; /* page/packet was consumed by XDP */
 	}
+#endif
 
+#ifdef HAVE_BUILD_SKB
 	skb = mlx5e_build_linear_skb(rq, va, frag_size, rx_headroom, cqe_bcnt32);
+#else
+	skb = mlx5e_compat_build_skb(rq, di->page, cqe_bcnt32, head_offset);
+#endif
 	if (unlikely(!skb))
 		return NULL;
 
 	/* queue up for recycling/reuse */
+#ifndef HAVE_BUILD_SKB
+	if (skb_shinfo(skb)->nr_frags)
+#endif
 	di->refcnt_bias--;
 
 	return skb;
@@ -1602,6 +1835,9 @@ mlx5e_skb_from_cqe_mpwrq_linear(struct m
 void mlx5e_handle_rx_cqe_mpwrq(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
 			       bool xmit_more)
 {
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	struct mlx5e_priv *priv = netdev_priv(rq->netdev);
+#endif
 	u16 cstrides       = mpwrq_get_cqe_consumed_strides(cqe);
 	u16 wqe_id         = be16_to_cpu(cqe->wqe_id);
 	struct mlx5e_mpw_info *wi = &rq->mpwqe.info[wqe_id];
@@ -1641,6 +1877,31 @@ void mlx5e_handle_rx_cqe_mpwrq(struct ml
 
 	mlx5e_complete_rx_cqe(rq, cqe, cqe_bcnt, skb);
 	mlx5e_set_skb_driver_xmit_more(skb, rq, xmit_more);
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	if (IS_SW_LRO(&priv->channels.params))
+#if defined(HAVE_VLAN_GRO_RECEIVE) || defined(HAVE_VLAN_HWACCEL_RX)
+		if (priv->channels.params.vlan_grp && cqe_has_vlan(cqe))
+			lro_vlan_hwaccel_receive_skb(&rq->sw_lro->lro_mgr,
+						     skb, priv->channels.params.vlan_grp,
+						     be16_to_cpu(cqe->vlan_info),
+						     NULL);
+		else
+#endif
+		lro_receive_skb(&rq->sw_lro->lro_mgr, skb, NULL);
+	else
+#endif
+#if defined(HAVE_VLAN_GRO_RECEIVE) || defined(HAVE_VLAN_HWACCEL_RX)
+                if (priv->channels.params.vlan_grp && cqe_has_vlan(cqe))
+#ifdef HAVE_VLAN_GRO_RECEIVE
+                        vlan_gro_receive(rq->cq.napi, priv->channels.params.vlan_grp,
+                                         be16_to_cpu(cqe->vlan_info),
+                                         skb);
+#else
+                        vlan_hwaccel_receive_skb(skb, priv->channels.params.vlan_grp,
+                                        be16_to_cpu(cqe->vlan_info));
+#endif
+		else
+#endif
 	napi_gro_receive(rq->cq.napi, skb);
 
 mpwrq_cqe_out:
@@ -1659,12 +1920,23 @@ int mlx5e_poll_rx_cq(struct mlx5e_cq *cq
 	struct mlx5_cqwq *cqwq = &cq->wq;
 	struct mlx5_cqe64 *cqe, *next_cqe;
 	int work_done = 0;
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	struct mlx5e_priv *priv;
+#ifdef CONFIG_MLX5_CORE_IPOIB
+	if (MLX5_CAP_GEN(cq->mdev, port_type) != MLX5_CAP_PORT_TYPE_ETH)
+		priv = mlx5i_epriv(rq->netdev);
+	else
+#endif
+		priv = netdev_priv(rq->netdev);
+#endif
 
 	if (unlikely(!test_bit(MLX5E_RQ_STATE_ENABLED, &rq->state)))
 		return 0;
 
+#ifdef HAVE_PAGE_POLL_NID_CHANGED
 	if (rq->page_pool)
 		page_pool_nid_changed(rq->page_pool, numa_mem_id());
+#endif
 
 	if (rq->cqd.left) {
 		work_done += mlx5e_decompress_cqes_cont(rq, cqwq, 0, budget);
@@ -1699,13 +1971,19 @@ int mlx5e_poll_rx_cq(struct mlx5e_cq *cq
 	} while ((++work_done < budget) && cqe);
 
 out:
-	if (rq->xdp_prog)
-		mlx5e_xdp_rx_poll_complete(rq);
+#ifdef HAVE_XDP_BUFF
+       if (rq->xdp_prog)
+       	mlx5e_xdp_rx_poll_complete(rq);
+#endif
 
 	mlx5_cqwq_update_db_record(cqwq);
 
 	/* ensure cq space is freed before enabling more cqes */
 	wmb();
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	if (IS_SW_LRO(&priv->channels.params))
+		lro_flush_all(&rq->sw_lro->lro_mgr);
+#endif
 
 	return work_done;
 }
@@ -1731,6 +2009,9 @@ static inline void mlx5i_complete_rx_cqe
 	u32 qpn;
 	u8 *dgid;
 	u8 g;
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+       struct mlx5e_priv *parent_priv = mlx5i_epriv(rq->netdev);
+#endif
 
 	qpn = be32_to_cpu(cqe->sop_drop_qpn) & 0xffffff;
 	netdev = mlx5i_pkey_get_netdev(rq->netdev, qpn);
@@ -1773,6 +2054,11 @@ static inline void mlx5i_complete_rx_cqe
 
 	skb->protocol = *((__be16 *)(skb->data));
 
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	if (parent_priv->netdev->features & NETIF_F_LRO) {
+		skb->ip_summed = CHECKSUM_UNNECESSARY;
+	} else
+#endif
 	if (netdev->features & NETIF_F_RXCSUM) {
 		skb->ip_summed = CHECKSUM_COMPLETE;
 		skb->csum = csum_unfold((__force __sum16)cqe->check_sum);
@@ -1788,8 +2074,10 @@ static inline void mlx5i_complete_rx_cqe
 
 	skb_record_rx_queue(skb, rq->ix);
 
+#ifdef HAVE_NETIF_F_RXHASH
 	if (likely(netdev->features & NETIF_F_RXHASH))
 		mlx5e_skb_set_hash(cqe, skb);
+#endif
 
 	/* 20 bytes of ipoib header and 4 for encap existing */
 	pseudo_header = skb_push(skb, MLX5_IPOIB_PSEUDO_LEN);
@@ -1811,6 +2099,9 @@ static inline void mlx5i_complete_rx_cqe
 void mlx5i_handle_rx_cqe(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
 			 bool xmit_more)
 {
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	struct mlx5e_priv *priv = mlx5i_epriv(rq->netdev);
+#endif
 	struct mlx5_wq_cyc *wq = &rq->wqe.wq;
 	struct mlx5e_wqe_frag_info *wi;
 	struct sk_buff *skb;
@@ -1839,6 +2130,11 @@ void mlx5i_handle_rx_cqe(struct mlx5e_rq
 		goto wq_free_wqe;
 	}
 	mlx5e_set_skb_driver_xmit_more(skb, rq, xmit_more);
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	if (priv->netdev->features & NETIF_F_LRO)
+		lro_receive_skb(&rq->sw_lro->lro_mgr, skb, NULL);
+	else
+#endif
 	napi_gro_receive(rq->cq.napi, skb);
 
 wq_free_wqe:
@@ -1853,6 +2149,9 @@ wq_free_wqe:
 void mlx5e_ipsec_handle_rx_cqe(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe,
 			       bool xmit_more)
 {
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	struct mlx5e_priv *priv = mlx5i_epriv(rq->netdev);
+#endif
 	struct mlx5_wq_cyc *wq = &rq->wqe.wq;
 	struct mlx5e_wqe_frag_info *wi;
 	struct sk_buff *skb;
