From: Roy Novich <royno@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/fw_reset.c

Change-Id: I5a425a9e65e73edca2d261f063b0dff6eae7b334
---
 drivers/net/ethernet/mellanox/mlx5/core/fw_reset.c | 60 +++++++++++++++++++++-
 1 file changed, 59 insertions(+), 1 deletion(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/fw_reset.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fw_reset.c
@@ -8,7 +8,9 @@
 enum {
 	MLX5_FW_RESET_FLAGS_RESET_REQUESTED,
 	MLX5_FW_RESET_FLAGS_NACK_RESET_REQUEST,
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
 	MLX5_FW_RESET_FLAGS_PENDING_COMP
+#endif
 };
 
 struct mlx5_fw_reset {
@@ -22,8 +24,10 @@ struct mlx5_fw_reset {
 	struct work_struct reset_abort_work;
 	unsigned long reset_flags;
 	struct timer_list timer;
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
 	struct completion done;
 	int ret;
+#endif
 };
 
 void mlx5_fw_reset_enable_remote_dev_reset_set(struct mlx5_core_dev *dev, bool enable)
@@ -82,6 +86,7 @@ int mlx5_fw_reset_query(struct mlx5_core
 
 int mlx5_fw_reset_set_reset_sync(struct mlx5_core_dev *dev, u8 reset_type_sel)
 {
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
 	struct mlx5_fw_reset *fw_reset = dev->priv.fw_reset;
 	int err;
 
@@ -90,6 +95,9 @@ int mlx5_fw_reset_set_reset_sync(struct
 	if (err)
 		clear_bit(MLX5_FW_RESET_FLAGS_PENDING_COMP, &fw_reset->reset_flags);
 	return err;
+#else
+	return mlx5_reg_mfrl_set(dev, MLX5_MFRL_REG_RESET_LEVEL3, reset_type_sel, 0, true);
+#endif /* HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION */
 }
 
 int mlx5_fw_reset_set_live_patch(struct mlx5_core_dev *dev)
@@ -97,6 +105,7 @@ int mlx5_fw_reset_set_live_patch(struct
 	return mlx5_reg_mfrl_set(dev, MLX5_MFRL_REG_RESET_LEVEL0, 0, 0, false);
 }
 
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
 static void mlx5_fw_reset_complete_reload(struct mlx5_core_dev *dev)
 {
 	struct mlx5_fw_reset *fw_reset = dev->priv.fw_reset;
@@ -111,6 +120,7 @@ static void mlx5_fw_reset_complete_reloa
 							BIT(DEVLINK_RELOAD_ACTION_FW_ACTIVATE));
 	}
 }
+#endif
 
 static void mlx5_sync_reset_reload_work(struct work_struct *work)
 {
@@ -122,10 +132,18 @@ static void mlx5_sync_reset_reload_work(
 	mlx5_enter_error_state(dev, true);
 	mlx5_unload_one(dev);
 	err = mlx5_health_wait_pci_up(dev);
-	if (err)
+	if (err) {
 		mlx5_core_err(dev, "reset reload flow aborted, PCI reads still not working\n");
+#ifndef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
+		return;
+#endif
+	}
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
 	fw_reset->ret = err;
 	mlx5_fw_reset_complete_reload(dev);
+#else
+	mlx5_load_one(dev);
+#endif /* HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION */
 }
 
 static void mlx5_stop_sync_reset_poll(struct mlx5_core_dev *dev)
@@ -146,9 +164,17 @@ static void mlx5_sync_reset_clear_reset_
 }
 
 #define MLX5_RESET_POLL_INTERVAL	(HZ / 10)
+#ifdef HAVE_TIMER_SETUP
 static void poll_sync_reset(struct timer_list *t)
+#else
+static void poll_sync_reset(unsigned long data)
+#endif
 {
+#ifdef HAVE_TIMER_SETUP
 	struct mlx5_fw_reset *fw_reset = from_timer(fw_reset, t, timer);
+#else
+	struct mlx5_fw_reset *fw_reset = (struct mlx5_fw_reset *)data;
+#endif
 	struct mlx5_core_dev *dev = fw_reset->dev;
 	u32 fatal_error;
 
@@ -171,7 +197,13 @@ static void mlx5_start_sync_reset_poll(s
 {
 	struct mlx5_fw_reset *fw_reset = dev->priv.fw_reset;
 
+#ifdef HAVE_TIMER_SETUP
 	timer_setup(&fw_reset->timer, poll_sync_reset, 0);
+#else
+	init_timer(&fw_reset->timer);
+	fw_reset->timer.data = (unsigned long)fw_reset;
+	fw_reset->timer.function = poll_sync_reset;
+#endif
 	fw_reset->timer.expires = round_jiffies(jiffies + MLX5_RESET_POLL_INTERVAL);
 	add_timer(&fw_reset->timer);
 }
@@ -229,6 +261,10 @@ static void mlx5_sync_reset_request_even
 		mlx5_core_warn(dev, "PCI Sync FW Update Reset Ack. Device reset is expected.\n");
 }
 
+#ifndef PCI_EXP_RTCAP_CRSVIS
+#define  PCI_EXP_RTCAP_CRSVIS	0x0001	/* CRS Software Visibility capability */
+#endif
+
 static int mlx5_pci_config_hw_control(struct pci_dev *root_port,
 				      bool new_val, bool *prev_val)
 {
@@ -381,6 +417,20 @@ static int mlx5_reset_pci_topology(struc
 	return 0;
 }
 
+#ifndef HAVE_PCIE_FIND_ROOT_PORT
+static inline struct pci_dev *pcie_find_root_port(struct pci_dev *dev)
+{
+	while (dev) {
+		if (pci_is_pcie(dev) &&
+		    pci_pcie_type(dev) == PCI_EXP_TYPE_ROOT_PORT)
+			return dev;
+		dev = pci_upstream_bridge(dev);
+	}
+
+	return NULL;
+}
+#endif
+
 static int mlx5_pci_link_toggle_ecpf(struct mlx5_core_dev *dev)
 {
 	struct pci_dev *root_port;
@@ -536,8 +586,12 @@ static void mlx5_sync_reset_now_event(st
 	mlx5_enter_error_state(dev, true);
 	mlx5_unload_one(dev);
 done:
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
 	fw_reset->ret = err;
 	mlx5_fw_reset_complete_reload(dev);
+#else
+	mlx5_load_one(dev);
+#endif
 }
 
 static void mlx5_sync_reset_abort_event(struct work_struct *work)
@@ -592,6 +646,7 @@ static int fw_reset_event_notifier(struc
 	return NOTIFY_OK;
 }
 
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
 int mlx5_fw_reset_wait_reset_done(struct mlx5_core_dev *dev)
 {
 	unsigned long pci_sync_update_timeout = mlx5_tout_ms(dev, PCI_SYNC_UPDATE);
@@ -610,6 +665,7 @@ out:
 	clear_bit(MLX5_FW_RESET_FLAGS_PENDING_COMP, &fw_reset->reset_flags);
 	return err;
 }
+#endif /* HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION */
 
 void mlx5_fw_reset_events_start(struct mlx5_core_dev *dev)
 {
@@ -645,7 +701,9 @@ int mlx5_fw_reset_init(struct mlx5_core_
 	INIT_WORK(&fw_reset->reset_now_work, mlx5_sync_reset_now_event);
 	INIT_WORK(&fw_reset->reset_abort_work, mlx5_sync_reset_abort_event);
 
+#ifdef HAVE_DEVLINK_RELOAD_DOWN_SUPPORT_RELOAD_ACTION
 	init_completion(&fw_reset->done);
+#endif
 	return 0;
 }
 
