From: Valentine Fatiev <valentinef@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c

Change-Id: Ib0deae09b6668d3a1d999715533c27041ad1daa3
---
 .../ethernet/mellanox/mlx5/core/lib/clock.c   | 184 +++++++++++++++++-
 1 file changed, 175 insertions(+), 9 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lib/clock.c
@@ -102,8 +102,12 @@ static void mlx5_clock_lockdep_assert(st
 {
 	if (!clock->shared)
 		return;
-
+#ifdef HAVE_LOCKDEP_ASSERT
 	lockdep_assert(lockdep_is_held(&clock_priv(clock)->lock));
+#else
+	lockdep_assert_held(&clock_priv(clock)->lock);
+#endif
+
 }
 
 static struct mlx5_core_dev *mlx5_clock_mdev_get(struct mlx5_clock *clock)
@@ -194,6 +198,7 @@ static s32 mlx5_clock_getmaxphase(struct
 			     MLX5_MTUTC_OPERATION_ADJUST_TIME_MAX;
 }
 
+#ifdef HAVE_PTP_CLOCK_INFO_NDO_GETMAXPHASE
 static s32 mlx5_ptp_getmaxphase(struct ptp_clock_info *ptp)
 {
 	struct mlx5_clock *clock = container_of(ptp, struct mlx5_clock, ptp_info);
@@ -207,6 +212,7 @@ static s32 mlx5_ptp_getmaxphase(struct p
 
 	return ret;
 }
+#endif
 
 static bool mlx5_is_mtutc_time_adj_cap(struct mlx5_core_dev *mdev, s64 delta)
 {
@@ -276,11 +282,15 @@ static int mlx5_mtctr_syncdevicetime(kti
 		return -EINVAL;
 
 	host = MLX5_GET64(mtctr_reg, out, first_clock_timestamp);
+#ifdef HAVE_ENUM_CSID_X86_ART
 	*sys_counterval = (struct system_counterval_t) {
 			.cycles = host,
 			.cs_id = CSID_X86_ART,
 			.use_nsecs = true,
 	};
+#else
+	*sys_counterval = convert_art_ns_to_tsc(host);
+#endif
 
 	device = MLX5_GET64(mtctr_reg, out, second_clock_timestamp);
 	if (real_time_mode)
@@ -318,25 +328,37 @@ unlock:
 #endif /* CONFIG_X86 */
 
 static u64 mlx5_read_time(struct mlx5_core_dev *dev,
+#ifdef HAVE_GETTIMEX64
 			  struct ptp_system_timestamp *sts,
+#else
+			  void *sts,
+#endif
 			  bool real_time)
 {
 	u32 timer_h, timer_h1, timer_l;
 
 	timer_h = ioread32be(real_time ? &dev->iseg->real_time_h :
 			     &dev->iseg->internal_timer_h);
+#ifdef HAVE_GETTIMEX64
 	ptp_read_system_prets(sts);
+#endif
 	timer_l = ioread32be(real_time ? &dev->iseg->real_time_l :
 			     &dev->iseg->internal_timer_l);
+#ifdef HAVE_GETTIMEX64
 	ptp_read_system_postts(sts);
+#endif
 	timer_h1 = ioread32be(real_time ? &dev->iseg->real_time_h :
 			      &dev->iseg->internal_timer_h);
 	if (timer_h != timer_h1) {
 		/* wrap around */
+#ifdef HAVE_GETTIMEX64
 		ptp_read_system_prets(sts);
+#endif
 		timer_l = ioread32be(real_time ? &dev->iseg->real_time_l :
 				     &dev->iseg->internal_timer_l);
+#ifdef HAVE_GETTIMEX64
 		ptp_read_system_postts(sts);
+#endif
 	}
 
 	return real_time ? REAL_TIME_TO_NS(timer_h1, timer_l) :
@@ -485,7 +507,11 @@ static int mlx5_ptp_settime(struct ptp_c
 
 static
 struct timespec64 mlx5_ptp_gettimex_real_time(struct mlx5_core_dev *mdev,
+#ifdef HAVE_GETTIMEX64
 					      struct ptp_system_timestamp *sts)
+#else
+						  void *sts)
+#endif
 {
 	struct timespec64 ts;
 	u64 time;
@@ -495,8 +521,10 @@ struct timespec64 mlx5_ptp_gettimex_real
 	return ts;
 }
 
-static int mlx5_ptp_gettimex(struct ptp_clock_info *ptp, struct timespec64 *ts,
-			     struct ptp_system_timestamp *sts)
+#ifdef HAVE_GETTIMEX64
+static int mlx5_ptp_gettimex(struct ptp_clock_info *ptp,
+			    struct timespec64 *ts,
+			    struct ptp_system_timestamp *sts)
 {
 	struct mlx5_clock *clock = container_of(ptp, struct mlx5_clock, ptp_info);
 	struct mlx5_timer *timer = &clock->timer;
@@ -520,6 +548,35 @@ out:
 	mlx5_clock_unlock(clock);
 	return 0;
 }
+#else/*HAVE_GETTIMEX64*/
+static int mlx5_ptp_gettime(struct ptp_clock_info *ptp, struct timespec64 *ts)
+{
+	struct mlx5_clock *clock = container_of(ptp, struct mlx5_clock,
+			ptp_info);
+	struct mlx5_timer *timer = &clock->timer;
+	struct mlx5_core_dev *mdev;
+	unsigned long flags;
+	u64 cycles, ns;
+
+	mlx5_clock_lock(clock);
+	mdev = mlx5_clock_mdev_get(clock);
+	if (mlx5_real_time_mode(mdev)) {
+		*ts = mlx5_ptp_gettimex_real_time(mdev, NULL);
+		goto out;
+	}
+
+	write_seqlock_irqsave(&clock->lock, flags);
+	cycles = mlx5_read_time(mdev, NULL, false);
+	ns = timecounter_read(&timer->tc);
+	write_sequnlock_irqrestore(&clock->lock, flags);
+
+	*ts = ns_to_timespec64(ns);
+
+out:
+	mlx5_clock_unlock(clock);
+	return 0;
+}
+#endif/*HAVE_GETTIMEX64*/
 
 static int mlx5_ptp_adjtime_real_time(struct mlx5_core_dev *mdev, s64 delta)
 {
@@ -570,6 +627,7 @@ unlock:
 	return err;
 }
 
+#ifdef HAVE_PTP_CLOCK_INFO_ADJPHASE
 static int mlx5_ptp_adjphase(struct ptp_clock_info *ptp, s32 delta)
 {
 	struct mlx5_clock *clock = container_of(ptp, struct mlx5_clock, ptp_info);
@@ -583,6 +641,7 @@ static int mlx5_ptp_adjphase(struct ptp_
 
 	return err;
 }
+#endif
 
 static int mlx5_ptp_freq_adj_real_time(struct mlx5_core_dev *mdev, long scaled_ppm)
 {
@@ -590,6 +649,7 @@ static int mlx5_ptp_freq_adj_real_time(s
 
 	MLX5_SET(mtutc_reg, in, operation, MLX5_MTUTC_OPERATION_ADJUST_FREQ_UTC);
 
+#ifdef HAVE_ADJUST_BY_SCALED_PPM
 	if (MLX5_CAP_MCAM_FEATURE(mdev, mtutc_freq_adj_units) &&
 	    scaled_ppm <= S32_MAX && scaled_ppm >= S32_MIN) {
 		/* HW scaled_ppm support on mlx5 devices only supports a 32-bit value */
@@ -600,10 +660,54 @@ static int mlx5_ptp_freq_adj_real_time(s
 		MLX5_SET(mtutc_reg, in, freq_adj_units, MLX5_MTUTC_FREQ_ADJ_UNITS_PPB);
 		MLX5_SET(mtutc_reg, in, freq_adjustment, scaled_ppm_to_ppb(scaled_ppm));
 	}
+#else
+		MLX5_SET(mtutc_reg, in, freq_adjustment, scaled_ppm);
+#endif
+
 
 	return mlx5_set_mtutc(mdev, in, sizeof(in));
 }
 
+#ifdef HAVE_PTP_CLOCK_INFO_NDO_ADJFREQ
+static int mlx5_ptp_adjfreq(struct ptp_clock_info *ptp, s32 delta)
+{
+	struct mlx5_clock *clock = container_of(ptp, struct mlx5_clock, ptp_info);
+	struct mlx5_timer *timer = &clock->timer;
+	struct mlx5_core_dev *mdev;
+	unsigned long flags;
+	int neg_adj = 0;
+	u32 diff;
+	u64 adj;
+
+	mdev = mlx5_clock_mdev_get(clock);
+	if (mlx5_modify_mtutc_allowed(mdev)) {
+		int err = mlx5_ptp_freq_adj_real_time(mdev, delta);
+
+		if (err)
+			return err;
+	}
+
+	if (delta < 0) {
+		neg_adj = 1;
+		delta = -delta;
+	}
+
+	adj = timer->nominal_c_mult;
+	adj *= delta;
+	diff = div_u64(adj, 1000000000ULL);
+
+	write_seqlock_irqsave(&clock->lock, flags);
+	timecounter_read(&timer->tc);
+	timer->cycles.mult = neg_adj ? timer->nominal_c_mult - diff :
+				       timer->nominal_c_mult + diff;
+	mlx5_update_clock_info_page(mdev);
+	write_sequnlock_irqrestore(&clock->lock, flags);
+
+	return 0;
+}
+#endif
+
+#if defined(HAVE_ADJUST_BY_SCALED_PPM)
 static int mlx5_ptp_adjfine(struct ptp_clock_info *ptp, long scaled_ppm)
 {
 	struct mlx5_clock *clock = container_of(ptp, struct mlx5_clock, ptp_info);
@@ -635,6 +739,34 @@ unlock:
 	mlx5_clock_unlock(clock);
 	return err;
 }
+#endif
+
+
+#ifndef PTP_STRICT_FLAGS
+#define PTP_STRICT_FLAGS   (1<<3)
+#endif
+#ifndef PTP_EXTTS_EDGES
+#define PTP_EXTTS_EDGES    (PTP_RISING_EDGE | PTP_FALLING_EDGE)
+#endif
+
+#ifndef HAVE_PTP_FIND_PIN_UNLOCK
+static int mlx5_ptp_find_pin(struct mlx5_clock *clock,
+		enum ptp_pin_function func,
+		unsigned int chan, int on)
+{
+	int i;
+
+	if (on)
+		return ptp_find_pin(clock->ptp, func, chan);
+
+	for (i = 0; i < clock->ptp_info.n_pins; i++) {
+		if (clock->ptp_info.pin_config[i].func == func &&
+				clock->ptp_info.pin_config[i].chan == chan)
+			return i;
+	}
+	return -1;
+}
+#endif
 
 static int mlx5_extts_configure(struct ptp_clock_info *ptp,
 				struct ptp_clock_request *rq,
@@ -666,7 +798,12 @@ static int mlx5_extts_configure(struct p
 	if (rq->extts.index >= clock->ptp_info.n_pins)
 		return -EINVAL;
 
+#ifdef HAVE_PTP_FIND_PIN_UNLOCK
 	pin = ptp_find_pin(clock->ptp, PTP_PF_EXTTS, rq->extts.index);
+#else
+	pin = mlx5_ptp_find_pin(clock, PTP_PF_EXTTS, rq->extts.index, on);
+#endif
+
 	if (pin < 0)
 		return -EBUSY;
 
@@ -750,13 +887,12 @@ static u64 perout_conf_real_time(s64 sec
 static int perout_conf_1pps(struct mlx5_core_dev *mdev, struct ptp_clock_request *rq,
 			    u64 *time_stamp, bool real_time)
 {
-	struct timespec64 ts;
+ 	struct timespec64 ts;
 	s64 ns;
 
 	ts.tv_nsec = rq->perout.period.nsec;
 	ts.tv_sec = rq->perout.period.sec;
 	ns = timespec64_to_ns(&ts);
-
 	if ((ns >> 1) != 500000000LL)
 		return -EINVAL;
 
@@ -775,18 +911,22 @@ static int mlx5_perout_conf_out_pulse_du
 	u32 out_pulse_duration;
 	struct timespec64 ts;
 
+#ifdef HAVE_PTP_PEROUT_DUTY_CYCLE
 	if (rq->perout.flags & PTP_PEROUT_DUTY_CYCLE) {
 		ts.tv_sec = rq->perout.on.sec;
 		ts.tv_nsec = rq->perout.on.nsec;
 		out_pulse_duration = (u32)timespec64_to_ns(&ts);
 	} else {
+#endif
 		/* out_pulse_duration_ns should be up to 50% of the
 		 * pulse period as default
 		 */
 		ts.tv_sec = rq->perout.period.sec;
 		ts.tv_nsec = rq->perout.period.nsec;
 		out_pulse_duration = (u32)timespec64_to_ns(&ts) >> 1;
+#ifdef HAVE_PTP_PEROUT_DUTY_CYCLE
 	}
+#endif
 
 	if (out_pulse_duration < pps_info->min_out_pulse_duration_ns ||
 	    out_pulse_duration > MLX5_MAX_PULSE_DURATION) {
@@ -827,11 +967,12 @@ static int perout_conf_npps_real_time(st
 	return 0;
 }
 
+#ifdef HAVE_PTP_PEROUT_DUTY_CYCLE
 static bool mlx5_perout_verify_flags(struct mlx5_core_dev *mdev, unsigned int flags)
 {
-	return ((!mlx5_npps_real_time_supported(mdev) && flags) ||
-		(mlx5_npps_real_time_supported(mdev) && flags & ~PTP_PEROUT_DUTY_CYCLE));
+	return ((!mlx5_npps_real_time_supported(mdev) && flags) || (mlx5_npps_real_time_supported(mdev) && flags & ~PTP_PEROUT_DUTY_CYCLE));
 }
+#endif
 
 static int mlx5_perout_configure(struct ptp_clock_info *ptp,
 				 struct ptp_clock_request *rq,
@@ -855,7 +996,11 @@ static int mlx5_perout_configure(struct
 		return -EINVAL;
 
 	field_select = MLX5_MTPPS_FS_ENABLE;
+#ifdef HAVE_PTP_FIND_PIN_UNLOCK
 	pin = ptp_find_pin(clock->ptp, PTP_PF_PEROUT, rq->perout.index);
+#else
+	pin = mlx5_ptp_find_pin(clock, PTP_PF_PEROUT, rq->perout.index, on);
+#endif
 	if (pin < 0)
 		return -EBUSY;
 
@@ -868,8 +1013,12 @@ static int mlx5_perout_configure(struct
 		goto unlock;
 	}
 
+#ifdef HAVE_PTP_PEROUT_DUTY_CYCLE
 	/* Reject requests with unsupported flags */
 	if (mlx5_perout_verify_flags(mdev, rq->perout.flags)) {
+#else
+	if (rq->perout.flags) {
+#endif
 		err = -EOPNOTSUPP;
 		goto unlock;
 	}
@@ -981,12 +1130,26 @@ static const struct ptp_clock_info mlx5_
 	.n_per_out	= 0,
 	.n_pins		= 0,
 	.pps		= 0,
+#ifdef HAVE_PTP_CLOCK_INFO_NDO_ADJFREQ
+	.adjfreq	= mlx5_ptp_adjfreq,
+#endif
+#if defined(HAVE_ADJUST_BY_SCALED_PPM)
 	.adjfine	= mlx5_ptp_adjfine,
+#endif
+#ifdef HAVE_PTP_CLOCK_INFO_ADJPHASE
 	.adjphase	= mlx5_ptp_adjphase,
+#endif
+#ifdef HAVE_PTP_CLOCK_INFO_NDO_GETMAXPHASE
 	.getmaxphase    = mlx5_ptp_getmaxphase,
+#endif
 	.adjtime	= mlx5_ptp_adjtime,
+#ifdef HAVE_GETTIMEX64
 	.gettimex64	= mlx5_ptp_gettimex,
 	.settime64	= mlx5_ptp_settime,
+#else /*HAVE_GETTIMEX64*/
+	.gettime64      = mlx5_ptp_gettime,
+	.settime64      = mlx5_ptp_settime,
+#endif /*HAVE_GETTIMEX64*/
 	.enable		= NULL,
 	.verify		= NULL,
 };
@@ -1090,10 +1253,14 @@ static void ts_next_sec(struct timespec6
 static u64 perout_conf_next_event_timer(struct mlx5_core_dev *mdev,
 					struct mlx5_clock *clock)
 {
-	struct timespec64 ts;
+       struct timespec64 ts;
 	s64 target_ns;
 
+#ifdef HAVE_GETTIMEX64
 	mlx5_ptp_gettimex(&clock->ptp_info, &ts, NULL);
+#else
+	mlx5_ptp_gettime(&clock->ptp_info, &ts);
+#endif
 	ts_next_sec(&ts);
 	target_ns = timespec64_to_ns(&ts);
 
@@ -1186,7 +1353,6 @@ static void mlx5_init_overflow_period(st
 	 */
 	overflow_cycles = div64_u64(~0ULL >> 1, timer->cycles.mult);
 	overflow_cycles = min(overflow_cycles, div_u64(timer->cycles.mask, 3));
-
 	ns = cyclecounter_cyc2ns(&timer->cycles, overflow_cycles,
 				 frac, &frac);
 	do_div(ns, NSEC_PER_SEC / HZ);
