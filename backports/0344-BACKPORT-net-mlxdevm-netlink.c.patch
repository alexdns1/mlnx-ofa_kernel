From: Valentine Fatiev <valentinef@nvidia.com>
Subject: [PATCH] BACKPORT: net/mlxdevm/netlink.c

Change-Id: I4cbd497cd39a64485eb16d1d2ec79eb88d1871b9
---
 net/mlxdevm/netlink.c | 72 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 72 insertions(+)

--- a/net/mlxdevm/netlink.c
+++ b/net/mlxdevm/netlink.c
@@ -17,6 +17,7 @@ static const struct genl_multicast_group
 	[MLXDEVM_MCGRP_CONFIG] = { .name = MLXDEVM_GENL_MCGRP_CONFIG_NAME },
 };
 
+#ifdef HAVE_DEVLINK_NOTIFICATIONS_FILTERING
 struct mlxdevm_nl_sock_priv {
 	struct mlxdevm_obj_desc __rcu *flt;
 	spinlock_t flt_lock; /* Protects flt. */
@@ -37,6 +38,7 @@ static void mlxdevm_nl_sock_priv_destroy
 	flt = rcu_dereference_protected(sk_priv->flt, true);
 	kfree_rcu(flt, rcu);
 }
+#endif
 #if 0
 
 int devlink_nl_notify_filter_set_doit(struct sk_buff *skb,
@@ -99,6 +101,7 @@ int devlink_nl_notify_filter_set_doit(st
 }
 #endif
 
+#ifdef HAVE_DEVLINK_NOTIFICATIONS_FILTERING
 static bool mlxdevm_obj_desc_match(const struct mlxdevm_obj_desc *desc,
 				   const struct mlxdevm_obj_desc *flt)
 {
@@ -127,6 +130,7 @@ static bool mlxdevm_obj_desc_match(const
  * Return: valid pointer on success, otherwise negative error value
  * encoded by ERR_PTR(), NULL in case priv does not exist.
  */
+
 static void *mlxdevm__genl_sk_priv_get(struct genl_family *family, struct sock *sk)
 {
 	if (WARN_ON_ONCE(!family->sock_privs))
@@ -151,12 +155,15 @@ int mlxdevm_nl_notify_filter(struct sock
 	rcu_read_unlock();
 	return ret;
 }
+#endif
 
 int mlxdevm_nl_put_nested_handle(struct sk_buff *msg, struct net *net,
 				 struct mlxdevm *mlxdevm, int attrtype)
 {
 	struct nlattr *nested_attr;
+#ifdef HAVE_READ_PNET_RCU
 	struct net *devl_net;
+#endif
 
 	nested_attr = nla_nest_start(msg, attrtype);
 	if (!nested_attr)
@@ -164,16 +171,27 @@ int mlxdevm_nl_put_nested_handle(struct
 	if (mlxdevm_nl_put_handle(msg, mlxdevm))
 		goto nla_put_failure;
 
+#ifdef HAVE_READ_PNET_RCU
 	rcu_read_lock();
 	devl_net = read_pnet_rcu(&mlxdevm->_net);
 	if (!net_eq(net, devl_net)) {
 		int id = peernet2id_alloc(net, devl_net, GFP_ATOMIC);
 
 		rcu_read_unlock();
+#else
+	if (!net_eq(net, read_pnet(&mlxdevm->_net))) {
+#ifdef HAVE_PEERNET2ID_ALLOC_GET_3_PARAMS
+		int id = peernet2id_alloc(net, read_pnet(&mlxdevm->_net),GFP_KERNEL);
+#else
+		int id = peernet2id_alloc(net, read_pnet(&mlxdevm->_net));
+#endif
+#endif
 		if (nla_put_s32(msg, MLXDEVM_ATTR_NETNS_ID, id))
 			return -EMSGSIZE;
+#ifdef HAVE_READ_PNET_RCU
 	} else {
 		rcu_read_unlock();
+#endif
 	}
 
 	nla_nest_end(msg, nested_attr);
@@ -264,7 +282,11 @@ unlock:
 	return err;
 }
 
+#ifdef HAVE_STRUCT_GENL_SPLIT_OPS
 int mlxdevm_nl_pre_doit(const struct genl_split_ops *ops,
+#else
+int mlxdevm_nl_pre_doit(const struct genl_ops *ops,
+#endif
 			struct sk_buff *skb, struct genl_info *info)
 {
 	return __mlxdevm_nl_pre_doit(skb, info, 0);
@@ -302,7 +324,11 @@ static void __mlxdevm_nl_post_doit(struc
 	mlxdevm_put(mlxdevm);
 }
 
+#ifdef HAVE_STRUCT_GENL_SPLIT_OPS
 void mlxdevm_nl_post_doit(const struct genl_split_ops *ops,
+#else
+void mlxdevm_nl_post_doit(const struct genl_ops *ops,
+#endif
 			  struct sk_buff *skb, struct genl_info *info)
 {
 	__mlxdevm_nl_post_doit(skb, info, 0);
@@ -317,6 +343,7 @@ devlink_nl_post_doit_dev_lock(const stru
 }
 #endif
 
+#if defined(HAVE_GENL_INFO_DUMP) || defined (HAVE_GENL_DUMPIT_INFO)
 static int mlxdevm_nl_inst_single_dumpit(struct sk_buff *msg,
 					 struct netlink_callback *cb, int flags,
 					 mlxdevm_nl_dump_one_func_t *dump_one,
@@ -337,6 +364,7 @@ static int mlxdevm_nl_inst_single_dumpit
 		return err;
 	return msg->len;
 }
+#endif
 
 static int mlxdevm_nl_inst_iter_dumpit(struct sk_buff *msg,
 				       struct netlink_callback *cb, int flags,
@@ -375,7 +403,13 @@ static int mlxdevm_nl_inst_iter_dumpit(s
 int mlxdevm_nl_dumpit(struct sk_buff *msg, struct netlink_callback *cb,
 		      mlxdevm_nl_dump_one_func_t *dump_one)
 {
+#if defined(HAVE_GENL_INFO_DUMP) || defined (HAVE_GENL_DUMPIT_INFO)
+#ifdef HAVE_GENL_INFO_DUMP
 	const struct genl_info *info = genl_info_dump(cb);
+#else
+	const struct genl_dumpit_info *info = genl_dumpit_info(cb);
+#endif
+
 	struct nlattr **attrs = info->attrs;
 	int flags = NLM_F_MULTI;
 
@@ -385,20 +419,58 @@ int mlxdevm_nl_dumpit(struct sk_buff *ms
 						     attrs);
 	else
 		return mlxdevm_nl_inst_iter_dumpit(msg, cb, flags, dump_one);
+#else
+	int flags = NLM_F_MULTI;
+
+	return mlxdevm_nl_inst_iter_dumpit(msg, cb, flags, dump_one);
+#endif
 }
 
+#ifdef HAVE_GENL_FAMILY_POLICY
+static const struct nla_policy mlxdevm_nl_policy[MLXDEVM_ATTR_MAX + 1] = {
+        [MLXDEVM_ATTR_BUS_NAME] = { .type = NLA_STRING },
+        [MLXDEVM_ATTR_DEV_NAME] = { .type = NLA_STRING },
+        [MLXDEVM_ATTR_PORT_INDEX] = { .type = NLA_U32 },
+        [MLXDEVM_ATTR_PORT_FLAVOUR] = { .type = NLA_U16 },
+        [MLXDEVM_ATTR_PORT_PCI_PF_NUMBER] = { .type = NLA_U16 },
+        [MLXDEVM_ATTR_PORT_PCI_SF_NUMBER] = { .type = NLA_U32 },
+        [MLXDEVM_ATTR_PORT_CONTROLLER_NUMBER] = { .type = NLA_U32 },
+};
+#endif
+
 struct genl_family mlxdevm_nl_family __ro_after_init = {
 	.name		= MLXDEVM_GENL_NAME,
 	.version	= MLXDEVM_GENL_VERSION,
+	.maxattr = MLXDEVM_ATTR_MAX,
+#ifdef HAVE_GENL_FAMILY_POLICY
+        .policy = mlxdevm_nl_policy,
+#endif
+#ifdef HAVE_STRUCT_GENL_SPLIT_OPS
 	.netnsok	= true,
+#else
+	.netnsok	= false,
+#endif
 	.parallel_ops	= true,
+#ifndef HAVE_STRUCT_GENL_SPLIT_OPS
+	.pre_doit	= mlxdevm_nl_pre_doit,
+	.post_doit	= mlxdevm_nl_post_doit,
+#endif
 	.module		= THIS_MODULE,
+#ifdef HAVE_STRUCT_GENL_SPLIT_OPS
 	.split_ops	= mlxdevm_nl_ops,
 	.n_split_ops	= ARRAY_SIZE(mlxdevm_nl_ops),
+#else
+	.ops	= mlxdevm_nl_ops,
+	.n_ops	= ARRAY_SIZE(mlxdevm_nl_ops),
+#endif
+#ifdef HAVE_GENL_FAMILY_RESV_START_OP
 	.resv_start_op	= MLXDEVM_CMD_SELFTESTS_RUN + 1,
+#endif
 	.mcgrps		= mlxdevm_nl_mcgrps,
 	.n_mcgrps	= ARRAY_SIZE(mlxdevm_nl_mcgrps),
+#ifdef HAVE_DEVLINK_NOTIFICATIONS_FILTERING
 	.sock_priv_size		= sizeof(struct mlxdevm_nl_sock_priv),
 	.sock_priv_init		= mlxdevm_nl_sock_priv_init,
 	.sock_priv_destroy	= mlxdevm_nl_sock_priv_destroy,
+#endif
 };
