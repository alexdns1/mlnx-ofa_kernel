From: Mikhael Goikhman <migo@mellanox.com>
Subject: [PATCH] BACKPORT:
 drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c

Change-Id: I3063d2123f608fb13e2f289501d8d8f7f75bb513
---
 .../mellanox/mlx5/core/en_accel/ipsec_rxtx.c       | 37 ++++++++++++++++++++++
 1 file changed, 37 insertions(+)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.c
@@ -320,13 +320,19 @@ struct sk_buff *mlx5e_ipsec_handle_tx_sk
 	struct mlx5e_ipsec_metadata *mdata;
 	struct mlx5e_ipsec_sa_entry *sa_entry;
 	struct xfrm_state *x;
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	struct sec_path *sp;
+#endif
 
 	if (!xo)
 		return skb;
 
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	sp = skb_sec_path(skb);
 	if (unlikely(sp->len != 1)) {
+#else
+	if (unlikely(skb->sp->len != 1)) {
+#endif
 		atomic64_inc(&priv->ipsec->sw_stats.ipsec_tx_drop_bundle);
 		goto drop;
 	}
@@ -387,11 +393,18 @@ mlx5e_ipsec_build_sp(struct net_device *
 	struct mlx5e_priv *priv = netdev_priv(netdev);
 	struct xfrm_offload *xo;
 	struct xfrm_state *xs;
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	struct sec_path *sp;
+#endif
 	u32 sa_handle;
 
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	sp = secpath_set(skb);
 	if (unlikely(!sp)) {
+#else
+	skb->sp = secpath_dup(skb->sp);
+	if (unlikely(!skb->sp)) {
+#endif
 		atomic64_inc(&priv->ipsec->sw_stats.ipsec_rx_drop_sp_alloc);
 		return NULL;
 	}
@@ -403,9 +416,14 @@ mlx5e_ipsec_build_sp(struct net_device *
 		return NULL;
 	}
 
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	sp = skb_sec_path(skb);
 	sp->xvec[sp->len++] = xs;
 	sp->olen++;
+#else
+	skb->sp->xvec[skb->sp->len++] = xs;
+	skb->sp->olen++;
+#endif
 
 	xo = xfrm_offload(skb);
 	xo->flags = CRYPTO_DONE;
@@ -468,13 +486,20 @@ void mlx5e_ipsec_offload_handle_rx_skb(s
 	struct mlx5e_priv *priv;
 	struct xfrm_offload *xo;
 	struct xfrm_state *xs;
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	struct sec_path *sp;
+#endif
 	u32  sa_handle;
 
 	sa_handle = MLX5_IPSEC_METADATA_HANDLE(ipsec_meta_data);
 	priv = netdev_priv(netdev);
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	sp = secpath_set(skb);
 	if (unlikely(!sp)) {
+#else
+	skb->sp = secpath_dup(skb->sp);
+	if (unlikely(!skb->sp)) {
+#endif
 		atomic64_inc(&priv->ipsec->sw_stats.ipsec_rx_drop_sp_alloc);
 		return;
 	}
@@ -485,9 +510,14 @@ void mlx5e_ipsec_offload_handle_rx_skb(s
 		return;
 	}
 
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	sp = skb_sec_path(skb);
 	sp->xvec[sp->len++] = xs;
 	sp->olen++;
+#else
+	skb->sp->xvec[skb->sp->len++] = xs;
+	skb->sp->olen++;
+#endif
 
 	xo = xfrm_offload(skb);
 	xo->flags = CRYPTO_DONE;
@@ -512,11 +542,18 @@ void mlx5e_ipsec_offload_handle_rx_skb(s
 bool mlx5e_ipsec_feature_check(struct sk_buff *skb, struct net_device *netdev,
 			       netdev_features_t features)
 {
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	struct sec_path *sp = skb_sec_path(skb);
+#endif
 	struct xfrm_state *x;
 
+#if defined(HAVE_SK_BUFF_STRUCT_SOCK_SK) && defined(SECPATH_SET_RETURN_POINTER)
 	if (sp && sp->len) {
 		x = sp->xvec[0];
+#else
+	if (skb->sp && skb->sp->len) {
+		x = skb->sp->xvec[0];
+#endif
 		if (x && x->xso.offload_handle)
 			return true;
 	}
