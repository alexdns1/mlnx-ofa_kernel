From: Alaa Hleihel <alaa@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/hw/mlx5/mr.c

Change-Id: Iac059861026159825a8f1528f94b3d105c7a4834
---
 drivers/infiniband/hw/mlx5/mr.c | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

--- a/drivers/infiniband/hw/mlx5/mr.c
+++ b/drivers/infiniband/hw/mlx5/mr.c
@@ -38,6 +38,9 @@
 #include <linux/delay.h>
 #include <linux/device.h>
 #include <linux/sysfs.h>
+#ifndef ARCH_KMALLOC_MINALIGN
+#include <linux/crypto.h>
+#endif
 #include <rdma/ib_umem.h>
 #include <rdma/ib_umem_odp.h>
 #include <rdma/ib_verbs.h>
@@ -505,9 +508,17 @@ static void clean_keys(struct mlx5_ib_de
 	}
 }
 
+#ifdef HAVE_TIMER_SETUP
+static void delay_time_func(struct timer_list *t)
+#else
 static void delay_time_func(unsigned long ctx)
+#endif
 {
+#ifdef HAVE_TIMER_SETUP
+	struct mlx5_ib_dev *dev = from_timer(dev, t, delay_timer);
+#else
 	struct mlx5_ib_dev *dev = (struct mlx5_ib_dev *)ctx;
+#endif
 
 	dev->fill_delay = 0;
 }
@@ -527,7 +538,11 @@ int mlx5_mr_cache_init(struct mlx5_ib_de
 		return -ENOMEM;
 	}
 
+#ifdef HAVE_TIMER_SETUP
+	timer_setup(&dev->delay_timer, delay_time_func, 0);
+#else
 	setup_timer(&dev->delay_timer, delay_time_func, (unsigned long)dev);
+#endif
 	for (i = 0; i < MAX_MR_CACHE_ENTRIES; i++) {
 		ent = &cache->ent[i];
 		INIT_LIST_HEAD(&ent->head);
@@ -1372,7 +1387,11 @@ mlx5_alloc_priv_descs(struct ib_device *
 	int add_size;
 	int ret;
 
+#ifdef ARCH_KMALLOC_MINALIGN
 	add_size = max_t(int, MLX5_UMR_ALIGN - ARCH_KMALLOC_MINALIGN, 0);
+#else
+	add_size = max_t(int, MLX5_UMR_ALIGN - CRYPTO_MINALIGN, 0);
+#endif
 
 	mr->descs_alloc = kzalloc(size + add_size, GFP_KERNEL);
 	if (!mr->descs_alloc)
@@ -2004,7 +2023,11 @@ static ssize_t order_attr_store(struct k
 	return oa->store(co, oa, buf, size);
 }
 
+#ifdef CONFIG_COMPAT_IS_CONST_KOBJECT_SYSFS_OPS
 static const struct sysfs_ops order_sysfs_ops = {
+#else
+static struct sysfs_ops order_sysfs_ops = {
+#endif
 	.show = order_attr_show,
 	.store = order_attr_store,
 };
@@ -2142,7 +2165,11 @@ static ssize_t cache_attr_store(struct k
 	return ca->store(dev, buf, size);
 }
 
+#ifdef CONFIG_COMPAT_IS_CONST_KOBJECT_SYSFS_OPS
 static const struct sysfs_ops cache_sysfs_ops = {
+#else
+static struct sysfs_ops cache_sysfs_ops = {
+#endif
 	.show = cache_attr_show,
 	.store = cache_attr_store,
 };
