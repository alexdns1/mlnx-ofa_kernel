From: Valentine Fatiev <valentinef@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/uverbs_cmd.c

Change-Id: Id8176b1b1e5783bf70d7424ec31e93b845d2d75c
---
 drivers/infiniband/core/uverbs_cmd.c | 41 ++++++++++++++++++++++++++++
 1 file changed, 41 insertions(+)

--- a/drivers/infiniband/core/uverbs_cmd.c
+++ b/drivers/infiniband/core/uverbs_cmd.c
@@ -223,6 +223,10 @@ int ib_alloc_ucontext(struct uverbs_attr
 	ucontext = rdma_zalloc_drv_obj(ib_dev, ib_ucontext);
 	if (!ucontext)
 		return -ENOMEM;
+#ifndef HAVE_MMU_NOTIFIER_OPS_HAS_FREE_NOTIFIER
+	mutex_init(&ucontext->per_mm_list_lock);
+	INIT_LIST_HEAD(&ucontext->per_mm_list);
+#endif
 
 	ucontext->res.type = RDMA_RESTRACK_CTX;
 	ucontext->device = ib_dev;
@@ -246,10 +250,12 @@ int ib_init_ucontext(struct uverbs_attr_
 		goto err;
 	}
 
+#ifdef HAVE_CGROUP_RDMA_H
 	ret = ib_rdmacg_try_charge(&ucontext->cg_obj, ucontext->device,
 				   RDMACG_RESOURCE_HCA_HANDLE);
 	if (ret)
 		goto err;
+#endif
 
 	ret = ucontext->device->ops.alloc_ucontext(ucontext,
 						   &attrs->driver_udata);
@@ -262,15 +268,22 @@ int ib_init_ucontext(struct uverbs_attr_
 	 * Make sure that ib_uverbs_get_ucontext() sees the pointer update
 	 * only after all writes to setup the ucontext have completed
 	 */
+#ifdef HAVE_SMP_LOAD_ACQUIRE
 	smp_store_release(&file->ucontext, ucontext);
+#else
+	smp_wmb();
+	file->ucontext = ucontext;
+#endif
 
 	mutex_unlock(&file->ucontext_lock);
 	up_read(&file->hw_destroy_rwsem);
 	return 0;
 
 err_uncharge:
+#ifdef HAVE_CGROUP_RDMA_H
 	ib_rdmacg_uncharge(&ucontext->cg_obj, ucontext->device,
 			   RDMACG_RESOURCE_HCA_HANDLE);
+#endif
 err:
 	mutex_unlock(&file->ucontext_lock);
 	up_read(&file->hw_destroy_rwsem);
@@ -580,7 +593,11 @@ static int ib_uverbs_open_xrcd(struct uv
 	struct ib_uverbs_open_xrcd_resp	resp;
 	struct ib_uxrcd_object         *obj;
 	struct ib_xrcd                 *xrcd = NULL;
+#ifdef HAVE_FDGET
 	struct fd			f = {NULL, 0};
+#else
+	struct file                    *f = NULL;
+#endif
 	struct inode                   *inode = NULL;
 	int				ret = 0;
 	int				new_xrcd = 0;
@@ -593,6 +610,7 @@ static int ib_uverbs_open_xrcd(struct uv
 	mutex_lock(&ibudev->xrcd_tree_mutex);
 
 	if (cmd.fd != -1) {
+#ifdef HAVE_FDGET
 		/* search for file descriptor */
 		f = fdget(cmd.fd);
 		if (!f.file) {
@@ -601,6 +619,19 @@ static int ib_uverbs_open_xrcd(struct uv
 		}
 
 		inode = file_inode(f.file);
+#else
+		f = fget(cmd.fd);
+		if (!f) {
+			ret = -EBADF;
+			goto err_tree_mutex_unlock;
+		}
+
+		inode = f->f_dentry->d_inode;
+		if (!inode) {
+			ret = -EBADF;
+			goto err_tree_mutex_unlock;
+		}
+#endif
 		xrcd = find_xrcd(ibudev, inode);
 		if (!xrcd && !(cmd.oflags & O_CREAT)) {
 			/* no file descriptor. Need CREATE flag */
@@ -649,8 +680,13 @@ static int ib_uverbs_open_xrcd(struct uv
 	if (ret)
 		goto err_copy;
 
+#ifdef HAVE_FDGET
 	if (f.file)
 		fdput(f);
+#else
+	if (f)
+		fput(f);
+#endif
 
 	mutex_unlock(&ibudev->xrcd_tree_mutex);
 
@@ -671,8 +707,13 @@ err:
 	uobj_alloc_abort(&obj->uobject, attrs);
 
 err_tree_mutex_unlock:
+#ifdef HAVE_FDGET
 	if (f.file)
 		fdput(f);
+#else
+	if (f)
+		fput(f);
+#endif
 
 	mutex_unlock(&ibudev->xrcd_tree_mutex);
 
