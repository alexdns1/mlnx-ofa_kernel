From: Valentine Fatiev <valentinef@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/mlx5_devm.c

Change-Id: Ife8c6dfeb483c22e9b9e8ea3f1b1449ef315e866
---
 .../ethernet/mellanox/mlx5/core/mlx5_devm.c   | 235 +++++++++++++++++-
 1 file changed, 228 insertions(+), 7 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/mlx5_devm.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/mlx5_devm.c
@@ -98,6 +98,25 @@ static void dm_new_attrs2devl_new_attrs(
 	new_devlink->sfnum_valid = new_devm->sfnum_valid;
 }
 
+#ifndef HAVE_DEVLINK_HAS_RATE_FUNCTIONS
+static struct mlx5_esw_sched_node *
+esw_qos_find_devm_node(struct mlx5_eswitch *esw, const char *node)
+{
+	struct mlx5_esw_sched_node *tmp;
+
+	if (!refcount_read(&esw->qos.refcnt))
+		return NULL;
+
+	esw_assert_qos_lock_held(esw);
+	list_for_each_entry(tmp, &esw->qos.domain->nodes, entry) {
+		if (tmp->esw == esw && tmp->devm.name && !strcmp(tmp->devm.name, node))
+			return tmp;
+	}
+
+	return NULL;
+}
+#endif
+
 static struct devlink *mlxdevm_to_devlink(struct mlxdevm *devm)
 {
 	return priv_to_devlink(container_of(devm, struct mlx5_devm_device, device)->dev);
@@ -142,21 +161,30 @@ static int mlx5_devm_sf_port_new(struct
 {
 	struct devlink_port_new_attrs devl_attrs;
 	struct mlx5_devm_device *mdevm_dev;
+#ifdef HAVE_DEVLINK_PORT_OPS
 	struct devlink_port *devport;
+#endif
 	struct devlink *devlink;
 	int ret;
 
 	devlink = mlxdevm_to_devlink(devm_dev);
 	dm_new_attrs2devl_new_attrs(attrs, &devl_attrs);
 
+#ifdef HAVE_DEVLINK_PORT_OPS
 	devl_lock(devlink);
 	ret = mlx5_devlink_sf_port_new(devlink, &devl_attrs, extack, &devport);
 	devl_unlock(devlink);
+#else
+	ret = mlx5_devlink_sf_port_new(devlink, &devl_attrs, extack, new_port_index);
+#endif
+
 
 	if (ret)
 		return ret;
 
+#ifdef HAVE_DEVLINK_PORT_OPS
 	*new_port_index = devport->index;
+#endif
         mdevm_dev = container_of(devm_dev, struct mlx5_devm_device, device);
         return xa_insert(&mdevm_dev->devm_sfs, *new_port_index,
                          xa_mk_value(attrs->sfnum), GFP_KERNEL);
@@ -180,9 +208,13 @@ static int mlx5_devm_sf_port_del(struct
 	if (!port)
 		return -ENODEV;
 
+#ifdef HAVE_DEVLINK_PORT_OPS
 	devl_lock(devlink);
 	ret = mlx5_devlink_sf_port_del(devlink, port->dl_port, extack);
 	devl_unlock(devlink);
+#else
+	ret = mlx5_devlink_sf_port_del(devlink, port_index, extack);
+#endif
 	return ret;
 }
 
@@ -193,16 +225,16 @@ static int mlx5_devm_sf_port_fn_state_ge
 {
 	enum devlink_port_fn_opstate dl_opstate;
 	enum devlink_port_fn_state dl_state;
-	struct devlink_port devport;
 	struct devlink *devlink;
 	int ret;
 
 	devlink = mlxdevm_to_devlink(port->mlxdevm);
-	memset(&devport, 0, sizeof(devport));
-	devport.devlink = devlink;
-	devport.index = port->index;
 
-	ret = mlx5_devlink_sf_port_fn_state_get(&devport, &dl_state, &dl_opstate, extack);
+#if defined(HAVE_PORT_FUNCTION_STATE_GET_4_PARAM) || defined(HAVE_DEVLINK_PORT_OPS)
+	ret = mlx5_devlink_sf_port_fn_state_get(port->dl_port, &dl_state, &dl_opstate, extack);
+#else
+	ret = mlx5_devlink_sf_port_fn_state_get(devlink, port->dl_port, &dl_state, &dl_opstate, extack);
+#endif
 	if (!ret) {
 		*state = devlink_to_mlxdevm_state(dl_state);
 		*opstate = devlink_to_mlxdevm_opstate(dl_opstate);
@@ -214,18 +246,33 @@ static int mlx5_devm_sf_port_fn_state_se
 				   enum mlxdevm_port_fn_state state,
 				   struct netlink_ext_ack *extack)
 {
+#if !defined(HAVE_PORT_FUNCTION_STATE_GET_4_PARAM) && !defined(HAVE_DEVLINK_PORT_OPS)
+	struct devlink *devlink = mlxdevm_to_devlink(port->mlxdevm);
+#endif
 	enum devlink_port_fn_state dl_state;
 
 	dl_state = mlxdevm_to_devlink_state(state);
+
+#if defined(HAVE_PORT_FUNCTION_STATE_GET_4_PARAM) || defined(HAVE_DEVLINK_PORT_OPS)
 	return mlx5_devlink_sf_port_fn_state_set(port->dl_port, dl_state, extack);
+#else
+	return mlx5_devlink_sf_port_fn_state_set(devlink, port->dl_port, dl_state, extack);
+#endif
 }
 
 static int mlx5_devm_sf_port_fn_hw_addr_get(struct mlxdevm_port *port,
 				     u8 *hw_addr, int *hw_addr_len,
 				     struct netlink_ext_ack *extack)
 {
+#if defined(HAVE_PORT_FUNCTION_HW_ADDR_GET_GET_4_PARAM) || defined(HAVE_DEVLINK_PORT_OPS)
 	return mlx5_devlink_port_fn_hw_addr_get(port->dl_port, hw_addr,
 						hw_addr_len, extack);
+#else
+	struct devlink *devlink = mlxdevm_to_devlink(port->mlxdevm);
+
+	return mlx5_devlink_port_fn_hw_addr_get(devlink, port->dl_port, hw_addr,
+			hw_addr_len, extack);
+#endif
 }
 
 static int mlx5_devm_sf_port_function_trust_get(struct mlxdevm_port *port,
@@ -258,8 +305,15 @@ static int mlx5_devm_sf_port_fn_hw_addr_
 				     const u8 *hw_addr, int hw_addr_len,
 				     struct netlink_ext_ack *extack)
 {
+#if defined(HAVE_PORT_FUNCTION_HW_ADDR_GET_GET_4_PARAM) || defined(HAVE_DEVLINK_PORT_OPS)
 	return mlx5_devlink_port_fn_hw_addr_set(port->dl_port, hw_addr,
 						hw_addr_len, extack);
+#else
+	struct devlink *devlink = mlxdevm_to_devlink(port->mlxdevm);
+
+	return mlx5_devlink_port_fn_hw_addr_set(devlink, port->dl_port, hw_addr,
+						hw_addr_len, extack);
+#endif
 }
 
 static int mlx5_devm_sf_port_function_trust_set(struct mlxdevm_port *port,
@@ -504,13 +558,76 @@ out_free:
 static int mlx5_devm_rate_leaf_tx_max_set(struct mlxdevm_rate *rate_leaf, void *priv,
 					  u64 tx_max, struct netlink_ext_ack *extack)
 {
+#ifdef HAVE_DEVLINK_HAS_RATE_FUNCTIONS
 	return mlx5_esw_devlink_rate_leaf_tx_max_set(NULL, priv, tx_max, extack);
+#else
+        struct devlink_port devport;
+        struct mlx5_eswitch *esw;
+        struct mlx5_vport *vport;
+        struct devlink *devlink;
+        struct mlxdevm_port *port;
+        int err;
+        
+        port = rate_leaf->mlxdevm_port;
+        devlink = mlxdevm_to_devlink(rate_leaf->mlxdevm);
+        memset(&devport, 0, sizeof(devport));
+        devport.index = port->index;
+        
+        err = mlx5_esw_get_esw_and_vport(devlink, &devport, &esw, &vport, extack);
+        if (err)
+                return err;
+        
+	err = esw_qos_devlink_rate_to_mbps(vport->dev, "tx_max", &tx_max, extack);
+	if (err)
+		return err;
+
+        esw_qos_lock(esw);
+        if (!vport->qos.sched_node && !tx_max)
+                goto unlock;
+        err = mlx5_esw_qos_set_vport_max_rate(vport, tx_max, extack);
+unlock: 
+        esw_qos_unlock(esw);
+        return err;
+#endif
 }
 
 static int mlx5_devm_rate_leaf_tx_share_set(struct mlxdevm_rate *rate_leaf, void *priv,
 					    u64 tx_share, struct netlink_ext_ack *extack)
 {
+#ifdef HAVE_DEVLINK_HAS_RATE_FUNCTIONS
 	return mlx5_esw_devlink_rate_leaf_tx_share_set(NULL, priv, tx_share, extack);
+#else
+	struct mlx5_vport *vport;
+	struct devlink *devlink;
+	struct mlxdevm_port *port;
+	struct mlx5_eswitch *esw;
+	struct devlink_port devport;
+	int err;
+
+	port = rate_leaf->mlxdevm_port;
+	devlink = mlxdevm_to_devlink(rate_leaf->mlxdevm);
+	memset(&devport, 0, sizeof(devport));
+	devport.index = port->index;
+
+	err = mlx5_esw_get_esw_and_vport(devlink, &devport, &esw, &vport, extack);
+	if (err)
+		return err;
+
+	err = esw_qos_devlink_rate_to_mbps(vport->dev, "tx_share", &tx_share, extack);
+	if (err)
+		return err;
+
+	if (!mlx5_esw_allowed(esw))
+		return -EPERM;
+
+	esw_qos_lock(esw);
+	if (!vport->qos.sched_node && !tx_share)
+		goto unlock;
+	err = mlx5_esw_qos_set_vport_min_rate(vport, tx_share, extack);
+unlock:
+	esw_qos_unlock(esw);
+	return err;
+#endif
 }
 
 static int mlx5_devm_rate_leaf_parent_set(struct mlxdevm_rate *mlxdevm_rate,
@@ -530,13 +647,73 @@ static int mlx5_devm_rate_leaf_parent_se
 static int mlx5_devm_rate_node_tx_share_set(struct mlxdevm_rate *rate_node, void *priv,
 					    u64 tx_share, struct netlink_ext_ack *extack)
 {
+#ifdef HAVE_DEVLINK_HAS_RATE_FUNCTIONS
 	return mlx5_esw_devlink_rate_node_tx_share_set(NULL, priv, tx_share, extack);
+#else
+	struct mlx5_esw_sched_node *node;
+	struct mlx5_core_dev *dev;
+	struct mlx5_eswitch *esw;
+	struct devlink *devlink;
+	int err;
+
+	devlink = mlxdevm_to_devlink(rate_node->mlxdevm);
+	dev = devlink_priv(devlink);
+	esw = dev->priv.eswitch;
+
+	err = esw_qos_devlink_rate_to_mbps(esw->dev, "tx_share", &tx_share, extack);
+	if (err)
+		return err;
+
+	esw_qos_lock(esw);
+	node = esw_qos_find_devm_node(esw, rate_node->name);
+	if (!node) {
+		NL_SET_ERR_MSG_MOD(extack, "Can't find node");
+		err = -ENODEV;
+		goto unlock;
+	}
+	err = esw_qos_set_node_min_rate(node, tx_share, extack);
+	if (!err)
+		node->devm.tx_share = tx_share;
+unlock:
+	esw_qos_unlock(esw);
+	return err;
+#endif
 }
 
 static int mlx5_devm_rate_node_tx_max_set(struct mlxdevm_rate *rate_node, void *priv,
 					  u64 tx_max, struct netlink_ext_ack *extack)
 {
+#ifdef HAVE_DEVLINK_HAS_RATE_FUNCTIONS
 	return mlx5_esw_devlink_rate_node_tx_max_set(NULL, priv, tx_max, extack);
+#else
+	struct mlx5_esw_sched_node *node;
+	struct mlx5_core_dev *dev;
+	struct mlx5_eswitch *esw;
+	struct devlink *devlink;
+	int err;
+
+	devlink = mlxdevm_to_devlink(rate_node->mlxdevm);
+	dev = devlink_priv(devlink);
+	esw = dev->priv.eswitch;
+
+	err = esw_qos_devlink_rate_to_mbps(esw->dev, "tx_max", &tx_max, extack);
+	if (err)
+		return err;
+
+	esw_qos_lock(esw);
+	node = esw_qos_find_devm_node(esw, rate_node->name);
+	if (!node) {
+		NL_SET_ERR_MSG_MOD(extack, "Can't find node");
+		err = -ENODEV;
+		goto unlock;
+	}
+	err = esw_qos_sched_elem_config(node, tx_max, node->bw_share, extack);
+	if (!err)
+		node->devm.tx_max = tx_max;
+unlock:
+	esw_qos_unlock(esw);
+	return err;
+#endif
 }
 
 static int mlx5_devm_rate_node_new(struct mlxdevm_rate *rate_node, void **priv,
@@ -566,8 +743,13 @@ static int mlx5_devm_rate_node_new(struc
 		err = PTR_ERR(node);
 		goto unlock;
 	}
-	
+
 	*priv = node;
+#ifndef HAVE_DEVLINK_HAS_RATE_FUNCTIONS
+	node->devm.name = kstrdup(rate_node->name, GFP_KERNEL);
+	err = mlxdevm_rate_node_register(rate_node->mlxdevm,
+					  &node->devm);
+#endif
 unlock:
 	esw_qos_unlock(esw);
 	return err;
@@ -576,7 +758,43 @@ unlock:
 static int mlx5_devm_rate_node_del(struct mlxdevm_rate *rate_node, void *priv,
 				   struct netlink_ext_ack *extack)
 {
+#ifdef HAVE_DEVLINK_HAS_RATE_FUNCTIONS
 	return mlx5_esw_devlink_rate_node_del(NULL, priv, extack);
+#else
+	struct mlx5_esw_sched_node *node;
+	struct mlx5_eswitch *esw;
+	struct devlink *devlink;
+	int err, ret = 0;   
+
+	devlink = mlxdevm_to_devlink(rate_node->mlxdevm);
+       
+	esw = mlx5_devlink_eswitch_get(devlink);
+	if (IS_ERR(esw))
+		return PTR_ERR(esw);
+       
+	esw_qos_lock(esw);
+	
+	node = esw_qos_find_devm_node(esw, rate_node->name);
+	if (!node) {
+		NL_SET_ERR_MSG_MOD(extack, "Can't find node");
+		err = -ENODEV;
+		goto unlock;
+	}
+	if (node->num_vports) {
+		err = -EBUSY;
+		NL_SET_ERR_MSG_MOD(extack, "Node has children. Cannot delete node.");
+		goto unlock;
+	}
+	mlxdevm_rate_node_unregister(rate_node->mlxdevm,
+				      &node->devm);
+	kfree(node->devm.name);
+
+	esw_qos_destroy_sched_node(node, extack);
+
+unlock:
+	esw_qos_unlock(esw);
+	return ret;
+#endif
 }
 
 /* Both mlx5_devm_ops and mlx5_devm_ports_ops are aligned with upstream devlink
@@ -844,7 +1062,10 @@ void mlx5_devm_sf_port_unregister(struct
 		/* found the port */
 		ops = devm_dev->device.ops;
 
-		ops->rate_leaf_parent_set(NULL, NULL, port->port.mlxdevm_rate->priv, NULL, NULL);
+		if (ops->rate_leaf_parent_set)
+			ops->rate_leaf_parent_set(NULL, NULL,
+						  port->port.mlxdevm_rate->priv,
+						  NULL, NULL);
 
 		list_del(&port->list);
 		found = true;
