From: Valentine Fatiev <valentinef@mellanox.com>
Subject: [PATCH] BACKPORT: drivers/net/ethernet/mellanox/mlx5/core/en_stats.c

Change-Id: Ie95bc660cf2b246c9153b682f8f56c42b877f899
---
 .../ethernet/mellanox/mlx5/core/en_stats.c    | 122 ++++++++++++++++--
 1 file changed, 110 insertions(+), 12 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_stats.c
@@ -99,7 +99,7 @@ static const struct counter_desc sw_stat
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_added_vlan_packets) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_nop) },
 
-#ifdef CONFIG_MLX5_EN_TLS
+#if defined(CONFIG_MLX5_EN_TLS) && defined(HAVE_UAPI_LINUX_TLS_H)
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_tls_encrypted_packets) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_tls_encrypted_bytes) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_tls_ctx) },
@@ -124,8 +124,11 @@ static const struct counter_desc sw_stat
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_csum_complete_tail) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_csum_complete_tail_slow) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_csum_unnecessary_inner) },
+#ifdef HAVE_XDP_BUFF
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_xdp_drop) },
+#ifdef HAVE_XDP_REDIRECT
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_xdp_redirect) },
+#endif
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_xdp_tx_xmit) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_xdp_tx_mpwqe) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_xdp_tx_inlnw) },
@@ -133,6 +136,7 @@ static const struct counter_desc sw_stat
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_xdp_tx_full) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_xdp_tx_err) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_xdp_tx_cqe) },
+#endif
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_csum_none) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_csum_partial) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_csum_partial_inner) },
@@ -143,6 +147,12 @@ static const struct counter_desc sw_stat
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_cqes) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_queue_wake) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_cqe_err) },
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_sw_lro_aggregated) },
+	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_sw_lro_flushed) },
+	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_sw_lro_no_desc) },
+#endif
+#ifdef HAVE_XDP_REDIRECT
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_xmit) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_mpwqe) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_inlnw) },
@@ -150,6 +160,7 @@ static const struct counter_desc sw_stat
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_full) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_err) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_xdp_cqes) },
+#endif
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_cqe_compress_blks) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, tx_cqe_compress_pkts) },
 	{ MLX5E_DECLARE_STAT(struct mlx5e_sw_stats, rx_wqe_err) },
@@ -227,6 +238,27 @@ static MLX5E_DECLARE_STATS_GRP_OP_FILL_S
 	return idx;
 }
 
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+static void mlx5e_update_sw_lro_stats(struct mlx5e_priv *priv)
+{
+	int i;
+	struct mlx5e_sw_stats *s = &priv->stats.sw;
+
+	s->rx_sw_lro_aggregated = 0;
+	s->rx_sw_lro_flushed = 0;
+	s->rx_sw_lro_no_desc = 0;
+
+	for (i = 0; i < priv->channels.num; i++) {
+		struct mlx5e_sw_lro *sw_lro = &priv->sw_lro[i];
+
+		s->rx_sw_lro_aggregated += sw_lro->lro_mgr.stats.aggregated;
+		s->rx_sw_lro_flushed += sw_lro->lro_mgr.stats.flushed;
+		s->rx_sw_lro_no_desc += sw_lro->lro_mgr.stats.no_desc;
+	}
+}
+#endif
+ 
+
 static MLX5E_DECLARE_STATS_GRP_OP_FILL_STATS(sw)
 {
 	int i;
@@ -246,10 +278,16 @@ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE
 	for (i = 0; i < priv->max_nch; i++) {
 		struct mlx5e_channel_stats *channel_stats =
 			&priv->channel_stats[i];
+#ifdef HAVE_XDP_REDIRECT
 		struct mlx5e_xdpsq_stats *xdpsq_red_stats = &channel_stats->xdpsq;
+#endif
+#ifdef HAVE_XDP_BUFF
 		struct mlx5e_xdpsq_stats *xdpsq_stats = &channel_stats->rq_xdpsq;
+#endif
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 		struct mlx5e_xdpsq_stats *xsksq_stats = &channel_stats->xsksq;
 		struct mlx5e_rq_stats *xskrq_stats = &channel_stats->xskrq;
+#endif
 		struct mlx5e_rq_stats *rq_stats = &channel_stats->rq;
 		struct mlx5e_ch_stats *ch_stats = &channel_stats->ch;
 		int j;
@@ -268,8 +306,11 @@ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE
 		s->rx_csum_complete_tail_slow += rq_stats->csum_complete_tail_slow;
 		s->rx_csum_unnecessary += rq_stats->csum_unnecessary;
 		s->rx_csum_unnecessary_inner += rq_stats->csum_unnecessary_inner;
+#ifdef HAVE_XDP_BUFF
 		s->rx_xdp_drop     += rq_stats->xdp_drop;
+#ifdef HAVE_XDP_REDIRECT
 		s->rx_xdp_redirect += rq_stats->xdp_redirect;
+#endif
 		s->rx_xdp_tx_xmit  += xdpsq_stats->xmit;
 		s->rx_xdp_tx_mpwqe += xdpsq_stats->mpwqe;
 		s->rx_xdp_tx_inlnw += xdpsq_stats->inlnw;
@@ -277,6 +318,7 @@ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE
 		s->rx_xdp_tx_full  += xdpsq_stats->full;
 		s->rx_xdp_tx_err   += xdpsq_stats->err;
 		s->rx_xdp_tx_cqe   += xdpsq_stats->cqes;
+#endif
 		s->rx_wqe_err   += rq_stats->wqe_err;
 		s->rx_mpwqe_filler_cqes    += rq_stats->mpwqe_filler_cqes;
 		s->rx_mpwqe_filler_strides += rq_stats->mpwqe_filler_strides;
@@ -309,6 +351,7 @@ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE
 		s->ch_aff_change  += ch_stats->aff_change;
 		s->ch_force_irq   += ch_stats->force_irq;
 		s->ch_eq_rearm    += ch_stats->eq_rearm;
+#ifdef HAVE_XDP_REDIRECT
 		/* xdp redirect */
 		s->tx_xdp_xmit    += xdpsq_red_stats->xmit;
 		s->tx_xdp_mpwqe   += xdpsq_red_stats->mpwqe;
@@ -317,6 +360,9 @@ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE
 		s->tx_xdp_full    += xdpsq_red_stats->full;
 		s->tx_xdp_err     += xdpsq_red_stats->err;
 		s->tx_xdp_cqes    += xdpsq_red_stats->cqes;
+#endif
+
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 		/* AF_XDP zero-copy */
 		s->rx_xsk_packets                += xskrq_stats->packets;
 		s->rx_xsk_bytes                  += xskrq_stats->bytes;
@@ -343,6 +389,7 @@ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE
 		s->tx_xsk_full                   += xsksq_stats->full;
 		s->tx_xsk_err                    += xsksq_stats->err;
 		s->tx_xsk_cqes                   += xsksq_stats->cqes;
+#endif
 
 		for (j = 0; j < priv->max_opened_tc; j++) {
 			struct mlx5e_sq_stats *sq_stats = &channel_stats->sq[j];
@@ -364,7 +411,7 @@ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE
 			s->tx_csum_partial_inner += sq_stats->csum_partial_inner;
 			s->tx_csum_none		+= sq_stats->csum_none;
 			s->tx_csum_partial	+= sq_stats->csum_partial;
-#ifdef CONFIG_MLX5_EN_TLS
+#if defined(CONFIG_MLX5_EN_TLS) && defined(HAVE_UAPI_LINUX_TLS_H)
 			s->tx_tls_encrypted_packets += sq_stats->tls_encrypted_packets;
 			s->tx_tls_encrypted_bytes   += sq_stats->tls_encrypted_bytes;
 			s->tx_tls_ctx               += sq_stats->tls_ctx;
@@ -384,6 +431,9 @@ static MLX5E_DECLARE_STATS_GRP_OP_UPDATE
 			barrier();
 		}
 	}
+#ifdef CONFIG_COMPAT_LRO_ENABLED_IPOIB
+	mlx5e_update_sw_lro_stats(priv);
+#endif
 }
 
 static const struct counter_desc q_stats_desc[] = {
@@ -1484,8 +1534,12 @@ static const struct counter_desc rq_stat
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, csum_unnecessary) },
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, csum_unnecessary_inner) },
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, csum_none) },
+#ifdef HAVE_XDP_BUFF
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, xdp_drop) },
+#ifdef HAVE_XDP_REDIRECT
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, xdp_redirect) },
+#endif
+#endif
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, lro_packets) },
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, lro_bytes) },
 	{ MLX5E_DECLARE_RX_STAT(struct mlx5e_rq_stats, mcast_packets) },
@@ -1558,6 +1612,7 @@ static const struct counter_desc sq_stat
 	{ MLX5E_DECLARE_TX_STAT(struct mlx5e_sq_stats, cqe_err) },
 };
 
+#ifdef HAVE_XDP_BUFF
 static const struct counter_desc rq_xdpsq_stats_desc[] = {
 	{ MLX5E_DECLARE_RQ_XDPSQ_STAT(struct mlx5e_xdpsq_stats, xmit) },
 	{ MLX5E_DECLARE_RQ_XDPSQ_STAT(struct mlx5e_xdpsq_stats, mpwqe) },
@@ -1567,7 +1622,9 @@ static const struct counter_desc rq_xdps
 	{ MLX5E_DECLARE_RQ_XDPSQ_STAT(struct mlx5e_xdpsq_stats, err) },
 	{ MLX5E_DECLARE_RQ_XDPSQ_STAT(struct mlx5e_xdpsq_stats, cqes) },
 };
-
+#endif
+ 
+#ifdef HAVE_XDP_REDIRECT
 static const struct counter_desc xdpsq_stats_desc[] = {
 	{ MLX5E_DECLARE_XDPSQ_STAT(struct mlx5e_xdpsq_stats, xmit) },
 	{ MLX5E_DECLARE_XDPSQ_STAT(struct mlx5e_xdpsq_stats, mpwqe) },
@@ -1577,7 +1634,9 @@ static const struct counter_desc xdpsq_s
 	{ MLX5E_DECLARE_XDPSQ_STAT(struct mlx5e_xdpsq_stats, err) },
 	{ MLX5E_DECLARE_XDPSQ_STAT(struct mlx5e_xdpsq_stats, cqes) },
 };
+#endif
 
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 static const struct counter_desc xskrq_stats_desc[] = {
 	{ MLX5E_DECLARE_XSKRQ_STAT(struct mlx5e_rq_stats, packets) },
 	{ MLX5E_DECLARE_XSKRQ_STAT(struct mlx5e_rq_stats, bytes) },
@@ -1608,6 +1667,7 @@ static const struct counter_desc xsksq_s
 	{ MLX5E_DECLARE_XSKSQ_STAT(struct mlx5e_xdpsq_stats, err) },
 	{ MLX5E_DECLARE_XSKSQ_STAT(struct mlx5e_xdpsq_stats, cqes) },
 };
+#endif
 
 static const struct counter_desc ch_stats_desc[] = {
 	{ MLX5E_DECLARE_CH_STAT(struct mlx5e_ch_stats, events) },
@@ -1620,10 +1680,16 @@ static const struct counter_desc ch_stat
 
 #define NUM_RQ_STATS			ARRAY_SIZE(rq_stats_desc)
 #define NUM_SQ_STATS			ARRAY_SIZE(sq_stats_desc)
-#define NUM_XDPSQ_STATS			ARRAY_SIZE(xdpsq_stats_desc)
-#define NUM_RQ_XDPSQ_STATS		ARRAY_SIZE(rq_xdpsq_stats_desc)
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 #define NUM_XSKRQ_STATS			ARRAY_SIZE(xskrq_stats_desc)
 #define NUM_XSKSQ_STATS			ARRAY_SIZE(xsksq_stats_desc)
+#endif
+#ifdef HAVE_XDP_REDIRECT
+#define NUM_XDPSQ_STATS                 ARRAY_SIZE(xdpsq_stats_desc)
+#endif
+#ifdef HAVE_XDP_BUFF
+#define NUM_RQ_XDPSQ_STATS              ARRAY_SIZE(rq_xdpsq_stats_desc)
+#endif
 #define NUM_CH_STATS			ARRAY_SIZE(ch_stats_desc)
 #define MLX5E_GET_PFLAG_PER_CH_STATS(priv) \
 	(MLX5E_GET_PFLAG(&(priv)->channels.params, MLX5E_PFLAG_PER_CH_STATS))
@@ -1637,10 +1703,20 @@ static MLX5E_DECLARE_STATS_GRP_OP_NUM_ST
 
 	return (NUM_RQ_STATS * max_nch) +
 	       (NUM_CH_STATS * max_nch) +
-	       (NUM_RQ_XDPSQ_STATS * max_nch) +
+#ifdef HAVE_XDP_BUFF
+              (NUM_RQ_XDPSQ_STATS * max_nch) +
+#ifdef HAVE_XDP_REDIRECT
+              (NUM_XDPSQ_STATS * max_nch) +
+#else
+		0 +
+#endif
+#else
+		0 +
+#endif
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 	       (NUM_XSKRQ_STATS * max_nch * priv->xsk.ever_used) +
 	       (NUM_XSKSQ_STATS * max_nch * priv->xsk.ever_used) +
-	       (NUM_XDPSQ_STATS * max_nch) +
+#endif
 #ifndef CONFIG_MLX5_EN_SPECIAL_SQ
 	       (NUM_SQ_STATS * max_nch * priv->max_opened_tc);
 #else
@@ -1651,7 +1727,9 @@ static MLX5E_DECLARE_STATS_GRP_OP_NUM_ST
 
 static MLX5E_DECLARE_STATS_GRP_OP_FILL_STRS(channels)
 {
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 	bool is_xsk = priv->xsk.ever_used;
+#endif
 	int max_nch = priv->max_nch;
 	int i, j, tc;
 
@@ -1667,12 +1745,17 @@ static MLX5E_DECLARE_STATS_GRP_OP_FILL_S
 		for (j = 0; j < NUM_RQ_STATS; j++)
 			sprintf(data + (idx++) * ETH_GSTRING_LEN,
 				rq_stats_desc[j].format, i);
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 		for (j = 0; j < NUM_XSKRQ_STATS * is_xsk; j++)
 			sprintf(data + (idx++) * ETH_GSTRING_LEN,
 				xskrq_stats_desc[j].format, i);
-		for (j = 0; j < NUM_RQ_XDPSQ_STATS; j++)
-			sprintf(data + (idx++) * ETH_GSTRING_LEN,
-				rq_xdpsq_stats_desc[j].format, i);
+#endif 
+
+#ifdef HAVE_XDP_BUFF
+       	for (j = 0; j < NUM_RQ_XDPSQ_STATS; j++)
+       		sprintf(data + (idx++) * ETH_GSTRING_LEN,
+       			rq_xdpsq_stats_desc[j].format, i);
+#endif
 	}
 
 	for (tc = 0; tc < priv->max_opened_tc; tc++)
@@ -1683,12 +1766,16 @@ static MLX5E_DECLARE_STATS_GRP_OP_FILL_S
 					i + tc * max_nch);
 
 	for (i = 0; i < max_nch; i++) {
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 		for (j = 0; j < NUM_XSKSQ_STATS * is_xsk; j++)
 			sprintf(data + (idx++) * ETH_GSTRING_LEN,
 				xsksq_stats_desc[j].format, i);
+#endif
+#ifdef HAVE_XDP_REDIRECT
 		for (j = 0; j < NUM_XDPSQ_STATS; j++)
 			sprintf(data + (idx++) * ETH_GSTRING_LEN,
 				xdpsq_stats_desc[j].format, i);
+#endif
 	}
 #ifdef CONFIG_MLX5_EN_SPECIAL_SQ
 	/* Special TX queue counters */
@@ -1705,7 +1792,9 @@ static MLX5E_DECLARE_STATS_GRP_OP_FILL_S
 
 static MLX5E_DECLARE_STATS_GRP_OP_FILL_STATS(channels)
 {
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 	bool is_xsk = priv->xsk.ever_used;
+#endif
 	int max_nch = priv->max_nch;
 	int i, j, tc, rlq;
 
@@ -1723,14 +1812,19 @@ static MLX5E_DECLARE_STATS_GRP_OP_FILL_S
 			data[idx++] =
 				MLX5E_READ_CTR64_CPU(&priv->channel_stats[i].rq,
 						     rq_stats_desc, j);
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 		for (j = 0; j < NUM_XSKRQ_STATS * is_xsk; j++)
 			data[idx++] =
 				MLX5E_READ_CTR64_CPU(&priv->channel_stats[i].xskrq,
 						     xskrq_stats_desc, j);
+#endif
+
+#ifdef HAVE_XDP_BUFF
 		for (j = 0; j < NUM_RQ_XDPSQ_STATS; j++)
 			data[idx++] =
 				MLX5E_READ_CTR64_CPU(&priv->channel_stats[i].rq_xdpsq,
 						     rq_xdpsq_stats_desc, j);
+#endif
 	}
 
 	for (tc = 0; tc < priv->max_opened_tc; tc++)
@@ -1739,16 +1833,20 @@ static MLX5E_DECLARE_STATS_GRP_OP_FILL_S
 				data[idx++] =
 					MLX5E_READ_CTR64_CPU(&priv->channel_stats[i].sq[tc],
 							     sq_stats_desc, j);
-
 	for (i = 0; i < max_nch; i++) {
+#ifdef HAVE_XSK_UMEM_CONSUME_TX_GET_2_PARAMS
 		for (j = 0; j < NUM_XSKSQ_STATS * is_xsk; j++)
 			data[idx++] =
 				MLX5E_READ_CTR64_CPU(&priv->channel_stats[i].xsksq,
 						     xsksq_stats_desc, j);
+#endif
+
+#ifdef HAVE_XDP_REDIRECT
 		for (j = 0; j < NUM_XDPSQ_STATS; j++)
 			data[idx++] =
 				MLX5E_READ_CTR64_CPU(&priv->channel_stats[i].xdpsq,
 						     xdpsq_stats_desc, j);
+#endif
 	}
 
 #ifdef CONFIG_MLX5_EN_SPECIAL_SQ
@@ -1795,7 +1893,7 @@ mlx5e_stats_grp_t mlx5e_nic_stats_grps[]
 	&MLX5E_STATS_GRP(pcie),
 	&MLX5E_STATS_GRP(per_prio),
 	&MLX5E_STATS_GRP(pme),
-ifdef CONFIG_MLX5_EN_IPSEC
+#ifdef CONFIG_MLX5_EN_IPSEC
 	&MLX5E_STATS_GRP(ipsec_sw),
 	&MLX5E_STATS_GRP(ipsec_hw),
 #endif
