From: Valentine Fatiev <valentinef@nvidia.com>
Subject: [PATCH] BACKPORT: drivers/infiniband/core/nldev.c

Change-Id: I2b9f7bf6bcabe47618e5143d10a2222a3c75b26d
---
 drivers/infiniband/core/nldev.c | 98 +++++++++++++++++++++++++++++++++
 1 file changed, 98 insertions(+)

--- a/drivers/infiniband/core/nldev.c
+++ b/drivers/infiniband/core/nldev.c
@@ -400,8 +400,12 @@ static int fill_res_info_entry(struct sk
 {
 	struct nlattr *entry_attr;
 
+#ifdef HAVE_NLA_NEST_START_NOFLAG
 	entry_attr = nla_nest_start_noflag(msg,
 					   RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY);
+#else
+	entry_attr = nla_nest_start(msg, RDMA_NLDEV_ATTR_RES_SUMMARY_ENTRY);
+#endif
 	if (!entry_attr)
 		return -EMSGSIZE;
 
@@ -438,7 +442,11 @@ static int fill_res_info(struct sk_buff
 	if (fill_nldev_handle(msg, device))
 		return -EMSGSIZE;
 
+#ifdef HAVE_NLA_NEST_START_NOFLAG
 	table_attr = nla_nest_start_noflag(msg, RDMA_NLDEV_ATTR_RES_SUMMARY);
+#else
+	table_attr = nla_nest_start(msg, RDMA_NLDEV_ATTR_RES_SUMMARY);
+#endif
 	if (!table_attr)
 		return -EMSGSIZE;
 
@@ -1075,8 +1083,13 @@ static int nldev_get_doit(struct sk_buff
 	u32 index;
 	int err;
 
+#ifdef HAVE___NLMSG_PARSE
 	err = __nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, extack);
+#else
+	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 				     nldev_policy, extack);
+#endif
 	if (err || !tb[RDMA_NLDEV_ATTR_DEV_INDEX])
 		return -EINVAL;
 
@@ -1137,8 +1150,13 @@ static int nldev_set_doit(struct sk_buff
 	if (tb[RDMA_NLDEV_ATTR_DEV_NAME]) {
 		char name[IB_DEVICE_NAME_MAX] = {};
 
+#ifdef HAVE_NLA_STRSCPY
 		nla_strscpy(name, tb[RDMA_NLDEV_ATTR_DEV_NAME],
 			    IB_DEVICE_NAME_MAX);
+#else
+		nla_strlcpy(name, tb[RDMA_NLDEV_ATTR_DEV_NAME],
+				IB_DEVICE_NAME_MAX);
+#endif
 		if (strlen(name) == 0) {
 			err = -EINVAL;
 			goto done;
@@ -1216,8 +1234,13 @@ static int nldev_port_get_doit(struct sk
 	u32 port;
 	int err;
 
+#ifdef HAVE___NLMSG_PARSE
 	err = __nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, extack);
+#else
+ 	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+			  nldev_policy, extack);
+#endif
 	if (err ||
 	    !tb[RDMA_NLDEV_ATTR_DEV_INDEX] ||
 	    !tb[RDMA_NLDEV_ATTR_PORT_INDEX])
@@ -1276,8 +1299,13 @@ static int nldev_port_get_dumpit(struct
 	int err;
 	unsigned int p;
 
+#ifdef HAVE___NLMSG_PARSE
 	err = __nlmsg_parse(cb->nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, NULL);
+#else
+	err = nlmsg_parse(cb->nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, NULL);
+#endif
 	if (err || !tb[RDMA_NLDEV_ATTR_DEV_INDEX])
 		return -EINVAL;
 
@@ -1332,8 +1360,13 @@ static int nldev_res_get_doit(struct sk_
 	u32 index;
 	int ret;
 
+#ifdef HAVE___NLMSG_PARSE
 	ret = __nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, extack);
+#else
+	ret = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+			  nldev_policy, extack);
+#endif
 	if (ret || !tb[RDMA_NLDEV_ATTR_DEV_INDEX])
 		return -EINVAL;
 
@@ -1482,8 +1515,13 @@ static int res_get_common_doit(struct sk
 	struct sk_buff *msg;
 	int ret;
 
+#ifdef HAVE___NLMSG_PARSE
 	ret = __nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, extack);
+#else
+	ret = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+		 	  nldev_policy, extack);
+#endif
 	if (ret || !tb[RDMA_NLDEV_ATTR_DEV_INDEX] || !fe->id || !tb[fe->id])
 		return -EINVAL;
 
@@ -1570,8 +1608,13 @@ static int res_get_common_dumpit(struct
 	u32 index, port = 0;
 	bool filled = false;
 
+#ifdef HAVE___NLMSG_PARSE
 	err = __nlmsg_parse(cb->nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, NULL);
+#else
+	err = nlmsg_parse(cb->nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+ 			  nldev_policy, NULL);
+#endif
 	/*
 	 * Right now, we are expecting the device index to get res information,
 	 * but it is possible to extend this code to return all devices in
@@ -1612,7 +1655,11 @@ static int res_get_common_dumpit(struct
 		goto err;
 	}
 
+#ifdef HAVE_NLA_NEST_START_NOFLAG
 	table_attr = nla_nest_start_noflag(skb, fe->nldev_attr);
+#else
+	table_attr = nla_nest_start(skb, fe->nldev_attr);
+#endif
 	if (!table_attr) {
 		ret = -EMSGSIZE;
 		goto err;
@@ -1638,7 +1685,11 @@ static int res_get_common_dumpit(struct
 
 		filled = true;
 
+#ifdef HAVE_NLA_NEST_START_NOFLAG
 		entry_attr = nla_nest_start_noflag(skb, fe->entry);
+#else
+		entry_attr = nla_nest_start(skb, fe->entry);
+#endif
 		if (!entry_attr) {
 			ret = -EMSGSIZE;
 			rdma_restrack_put(res);
@@ -1769,14 +1820,25 @@ static int nldev_newlink(struct sk_buff
 	    !tb[RDMA_NLDEV_ATTR_LINK_TYPE] || !tb[RDMA_NLDEV_ATTR_NDEV_NAME])
 		return -EINVAL;
 
+#ifdef HAVE_NLA_STRSCPY
 	nla_strscpy(ibdev_name, tb[RDMA_NLDEV_ATTR_DEV_NAME],
 		    sizeof(ibdev_name));
+#else
+ 	nla_strlcpy(ibdev_name, tb[RDMA_NLDEV_ATTR_DEV_NAME],
+ 		    sizeof(ibdev_name));
+#endif
 	if (strchr(ibdev_name, '%') || strlen(ibdev_name) == 0)
 		return -EINVAL;
 
+#ifdef HAVE_NLA_STRSCPY
 	nla_strscpy(type, tb[RDMA_NLDEV_ATTR_LINK_TYPE], sizeof(type));
 	nla_strscpy(ndev_name, tb[RDMA_NLDEV_ATTR_NDEV_NAME],
 		    sizeof(ndev_name));
+#else
+ 	nla_strlcpy(type, tb[RDMA_NLDEV_ATTR_LINK_TYPE], sizeof(type));
+ 	nla_strlcpy(ndev_name, tb[RDMA_NLDEV_ATTR_NDEV_NAME],
+				sizeof(ndev_name));
+#endif
 
 	ndev = dev_get_by_name(sock_net(skb->sk), ndev_name);
 	if (!ndev)
@@ -1837,13 +1899,23 @@ static int nldev_get_chardev(struct sk_b
 	u32 index;
 	int err;
 
+#ifdef HAVE___NLMSG_PARSE
 	err = __nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1, nldev_policy,
 			    NL_VALIDATE_LIBERAL, extack);
+#else
+	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1, nldev_policy,
+		                          extack);
+#endif
 	if (err || !tb[RDMA_NLDEV_ATTR_CHARDEV_TYPE])
 		return -EINVAL;
 
+#ifdef HAVE_NLA_STRSCPY
 	nla_strscpy(client_name, tb[RDMA_NLDEV_ATTR_CHARDEV_TYPE],
 		    sizeof(client_name));
+#else
+	nla_strlcpy(client_name, tb[RDMA_NLDEV_ATTR_CHARDEV_TYPE],
+		    sizeof(client_name));
+#endif
 
 	if (tb[RDMA_NLDEV_ATTR_DEV_INDEX]) {
 		index = nla_get_u32(tb[RDMA_NLDEV_ATTR_DEV_INDEX]);
@@ -1921,8 +1993,13 @@ static int nldev_sys_get_doit(struct sk_
 	struct sk_buff *msg;
 	int err;
 
+#ifdef HAVE___NLMSG_PARSE
 	err = __nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, extack);
+#else
+	err = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+			  nldev_policy, extack);
+#endif
 	if (err)
 		return err;
 
@@ -1958,6 +2035,7 @@ static int nldev_sys_get_doit(struct sk_
 		nlmsg_free(msg);
 		return err;
 	}
+#ifdef HAVE_IS_COW_MAPPING
 	/*
 	 * Copy-on-fork is supported.
 	 * See commits:
@@ -1969,6 +2047,7 @@ static int nldev_sys_get_doit(struct sk_
 	 * supported in case of failure.
 	 */
 	nla_put_u8(msg, RDMA_NLDEV_SYS_ATTR_COPY_ON_FORK, 1);
+#endif
 
 	nlmsg_end(msg, nlh);
 	return rdma_nl_unicast(sock_net(skb->sk), msg, NETLINK_CB(skb).portid);
@@ -2427,8 +2506,13 @@ static int nldev_stat_get_doit(struct sk
 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
 	int ret;
 
+#ifdef HAVE___NLMSG_PARSE
 	ret = __nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, extack);
+#else
+	ret = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+			  nldev_policy, extack);
+#endif
 	if (ret)
 		return -EINVAL;
 
@@ -2457,8 +2541,13 @@ static int nldev_stat_get_dumpit(struct
 	struct nlattr *tb[RDMA_NLDEV_ATTR_MAX];
 	int ret;
 
+#ifdef HAVE___NLMSG_PARSE
 	ret = __nlmsg_parse(cb->nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, NULL);
+#else
+	ret = nlmsg_parse(cb->nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+			  nldev_policy, NULL);
+#endif
 	if (ret || !tb[RDMA_NLDEV_ATTR_STAT_RES])
 		return -EINVAL;
 
@@ -2489,8 +2578,13 @@ static int nldev_stat_get_counter_status
 	u32 devid, port;
 	int ret, i;
 
+#ifdef HAVE___NLMSG_PARSE
 	ret = __nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
 			    nldev_policy, NL_VALIDATE_LIBERAL, extack);
+#else
+	ret = nlmsg_parse(nlh, 0, tb, RDMA_NLDEV_ATTR_MAX - 1,
+			  nldev_policy, extack);
+#endif
 	if (ret || !tb[RDMA_NLDEV_ATTR_DEV_INDEX] ||
 	    !tb[RDMA_NLDEV_ATTR_PORT_INDEX])
 		return -EINVAL;
@@ -2587,7 +2681,11 @@ static int nldev_newdev(struct sk_buff *
 		!tb[RDMA_NLDEV_ATTR_DEV_NAME] || !tb[RDMA_NLDEV_ATTR_DEV_TYPE])
 		return -EINVAL;
 
+#ifdef HAVE_NLA_STRSCPY
 	nla_strscpy(name, tb[RDMA_NLDEV_ATTR_DEV_NAME], sizeof(name));
+#else
+	nla_strlcpy(name, tb[RDMA_NLDEV_ATTR_DEV_NAME], sizeof(name));
+#endif
 	type = nla_get_u8(tb[RDMA_NLDEV_ATTR_DEV_TYPE]);
 	parentid = nla_get_u32(tb[RDMA_NLDEV_ATTR_DEV_INDEX]);
 	parent = ib_device_get_by_index(sock_net(skb->sk), parentid);
